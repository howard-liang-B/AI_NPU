def @main(%images: Tensor[(1, 3, 640, 640), float32] /* ty=Tensor[(1, 3, 640, 640), float32] */) -> Tensor[(1, 5, 8400), float32] {
  %0 = qnn.quantize(%images, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 3, 640, 640), uint8] */;
  %1 = qnn.dequantize(%0, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 3, 640, 640), float32] */;
  %2 = qnn.dequantize(meta[relay.Constant][1] /* ty=Tensor[(4, 3, 3, 3), int8] */, 0.259183f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(4, 3, 3, 3), float32] */;
  %3 = nn.conv2d(%1, %2, strides=[2, 2], padding=[1, 1, 1, 1], channels=4, kernel_size=[3, 3]) /* ty=Tensor[(1, 4, 320, 320), float32] */;
  %4 = qnn.dequantize(meta[relay.Constant][2] /* ty=Tensor[(4), int32] */, meta[relay.Constant][3] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(4), float32] */;
  %5 = nn.bias_add(%3, %4) /* ty=Tensor[(1, 4, 320, 320), float32] */;
  %6 = qnn.quantize(%5, 0.627226f /* ty=float32 */, 143 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 320, 320), uint8] */;
  %7 = qnn.dequantize(%6, 0.627226f /* ty=float32 */, 143 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 320, 320), float32] */;
  %8 = sigmoid(%7) /* ty=Tensor[(1, 4, 320, 320), float32] */;
  %9 = qnn.quantize(%8, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 320, 320), uint8] */;
  %10 = qnn.dequantize(%9, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 320, 320), float32] */;
  %11 = multiply(%7, %10) /* ty=Tensor[(1, 4, 320, 320), float32] */;
  %12 = qnn.quantize(%11, 0.276671f /* ty=float32 */, 1 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 320, 320), uint8] */;
  %13 = qnn.dequantize(%12, 0.276671f /* ty=float32 */, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 320, 320), float32] */;
  %14 = qnn.dequantize(meta[relay.Constant][4] /* ty=Tensor[(11, 4, 3, 3), int8] */, 0.0301741f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 4, 3, 3), float32] */;
  %15 = nn.conv2d(%13, %14, strides=[2, 2], padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %16 = qnn.dequantize(meta[relay.Constant][5] /* ty=Tensor[(11), int32] */, meta[relay.Constant][6] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %17 = nn.bias_add(%15, %16) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %18 = qnn.quantize(%17, 1.82872f /* ty=float32 */, 125 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 160, 160), uint8] */;
  %19 = qnn.dequantize(%18, 1.82872f /* ty=float32 */, 125 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %20 = sigmoid(%19) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %21 = qnn.quantize(%20, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 160, 160), uint8] */;
  %22 = qnn.dequantize(%21, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %23 = multiply(%19, %22) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %24 = qnn.quantize(%23, 0.930753f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 160, 160), uint8] */;
  %25 = qnn.dequantize(%24, 0.930753f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %26 = qnn.dequantize(meta[relay.Constant][7] /* ty=Tensor[(4, 11, 1, 1), int8] */, 0.00902961f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(4, 11, 1, 1), float32] */;
  %27 = nn.conv2d(%25, %26, padding=[0, 0, 0, 0], channels=4, kernel_size=[1, 1]) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %28 = qnn.dequantize(meta[relay.Constant][8] /* ty=Tensor[(4), int32] */, meta[relay.Constant][9] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(4), float32] */;
  %29 = nn.bias_add(%27, %28) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %30 = qnn.quantize(%29, 1.19574f /* ty=float32 */, 186 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %31 = qnn.dequantize(%30, 1.19574f /* ty=float32 */, 186 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %32 = sigmoid(%31) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %33 = qnn.quantize(%32, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %34 = qnn.dequantize(%33, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %35 = multiply(%31, %34) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %36 = qnn.quantize(%35, 0.323952f /* ty=float32 */, 1 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %37 = qnn.dequantize(meta[relay.Constant][10] /* ty=Tensor[(4, 11, 1, 1), int8] */, 0.00348759f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(4, 11, 1, 1), float32] */;
  %38 = nn.conv2d(%25, %37, padding=[0, 0, 0, 0], channels=4, kernel_size=[1, 1]) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %39 = qnn.dequantize(meta[relay.Constant][11] /* ty=Tensor[(4), int32] */, meta[relay.Constant][12] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(4), float32] */;
  %40 = nn.bias_add(%38, %39) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %41 = qnn.quantize(%40, 0.604996f /* ty=float32 */, 202 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %42 = qnn.dequantize(%41, 0.604996f /* ty=float32 */, 202 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %43 = sigmoid(%42) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %44 = qnn.quantize(%43, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %45 = qnn.dequantize(%44, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %46 = multiply(%42, %45) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %47 = qnn.quantize(%46, 0.126047f /* ty=float32 */, 2 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %48 = qnn.dequantize(%47, 0.126047f /* ty=float32 */, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %49 = qnn.dequantize(meta[relay.Constant][13] /* ty=Tensor[(4, 4, 3, 3), int8] */, 0.0318887f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(4, 4, 3, 3), float32] */;
  %50 = nn.conv2d(%48, %49, padding=[1, 1, 1, 1], channels=4, kernel_size=[3, 3]) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %51 = qnn.dequantize(meta[relay.Constant][14] /* ty=Tensor[(4), int32] */, meta[relay.Constant][15] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(4), float32] */;
  %52 = nn.bias_add(%50, %51) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %53 = qnn.quantize(%52, 0.898098f /* ty=float32 */, 176 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %54 = qnn.dequantize(%53, 0.898098f /* ty=float32 */, 176 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %55 = sigmoid(%54) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %56 = qnn.quantize(%55, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %57 = qnn.dequantize(%56, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %58 = multiply(%54, %57) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %59 = qnn.quantize(%58, 0.279835f /* ty=float32 */, 1 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %60 = qnn.dequantize(%59, 0.279835f /* ty=float32 */, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %61 = qnn.dequantize(meta[relay.Constant][16] /* ty=Tensor[(4, 4, 3, 3), int8] */, 0.01287f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(4, 4, 3, 3), float32] */;
  %62 = nn.conv2d(%60, %61, padding=[1, 1, 1, 1], channels=4, kernel_size=[3, 3]) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %63 = qnn.dequantize(meta[relay.Constant][17] /* ty=Tensor[(4), int32] */, meta[relay.Constant][18] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(4), float32] */;
  %64 = nn.bias_add(%62, %63) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %65 = qnn.quantize(%64, 0.466844f /* ty=float32 */, 170 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %66 = qnn.dequantize(%65, 0.466844f /* ty=float32 */, 170 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %67 = sigmoid(%66) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %68 = qnn.quantize(%67, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %69 = qnn.dequantize(%68, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %70 = multiply(%66, %69) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %71 = qnn.quantize(%70, 0.156083f /* ty=float32 */, 2 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %72 = qnn.dequantize(%71, 0.156083f /* ty=float32 */, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %73 = add(%48, %72) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %74 = qnn.quantize(%73, 0.269673f /* ty=float32 */, 2 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 4, 160, 160), uint8] */;
  %75 = qnn.dequantize(%36, 0.323952f /* ty=float32 */, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %76 = qnn.dequantize(%74, 0.269673f /* ty=float32 */, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 4, 160, 160), float32] */;
  %77 = (%75, %48, %76) /* ty=(Tensor[(1, 4, 160, 160), float32], Tensor[(1, 4, 160, 160), float32], Tensor[(1, 4, 160, 160), float32]) */;
  %78 = concatenate(%77, axis=1) /* ty=Tensor[(1, 12, 160, 160), float32] */;
  %79 = qnn.quantize(%78, 0.325044f /* ty=float32 */, 2 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 12, 160, 160), uint8] */;
  %80 = qnn.dequantize(%79, 0.325044f /* ty=float32 */, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 12, 160, 160), float32] */;
  %81 = qnn.dequantize(meta[relay.Constant][19] /* ty=Tensor[(11, 12, 1, 1), int8] */, 0.0251766f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 12, 1, 1), float32] */;
  %82 = nn.conv2d(%80, %81, padding=[0, 0, 0, 0], channels=11, kernel_size=[1, 1]) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %83 = qnn.dequantize(meta[relay.Constant][20] /* ty=Tensor[(11), int32] */, meta[relay.Constant][21] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %84 = nn.bias_add(%82, %83) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %85 = qnn.quantize(%84, 0.389016f /* ty=float32 */, 175 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 160, 160), uint8] */;
  %86 = qnn.dequantize(%85, 0.389016f /* ty=float32 */, 175 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %87 = sigmoid(%86) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %88 = qnn.quantize(%87, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 160, 160), uint8] */;
  %89 = qnn.dequantize(%88, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %90 = multiply(%86, %89) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %91 = qnn.quantize(%90, 0.123372f /* ty=float32 */, 2 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 160, 160), uint8] */;
  %92 = qnn.dequantize(%91, 0.123372f /* ty=float32 */, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 160, 160), float32] */;
  %93 = qnn.dequantize(meta[relay.Constant][22] /* ty=Tensor[(24, 11, 3, 3), int8] */, 0.00500126f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 11, 3, 3), float32] */;
  %94 = nn.conv2d(%92, %93, strides=[2, 2], padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %95 = qnn.dequantize(meta[relay.Constant][23] /* ty=Tensor[(24), int32] */, meta[relay.Constant][24] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %96 = nn.bias_add(%94, %95) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %97 = qnn.quantize(%96, 0.13233f /* ty=float32 */, 148 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %98 = qnn.dequantize(%97, 0.13233f /* ty=float32 */, 148 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %99 = sigmoid(%98) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %100 = qnn.quantize(%99, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %101 = qnn.dequantize(%100, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %102 = multiply(%98, %101) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %103 = qnn.quantize(%102, 0.0567629f /* ty=float32 */, 5 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %104 = qnn.dequantize(%103, 0.0567629f /* ty=float32 */, 5 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %105 = qnn.dequantize(meta[relay.Constant][25] /* ty=Tensor[(11, 24, 1, 1), int8] */, 0.0177164f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 24, 1, 1), float32] */;
  %106 = nn.conv2d(%104, %105, padding=[0, 0, 0, 0], channels=11, kernel_size=[1, 1]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %107 = qnn.dequantize(meta[relay.Constant][26] /* ty=Tensor[(11), int32] */, meta[relay.Constant][27] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %108 = nn.bias_add(%106, %107) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %109 = qnn.quantize(%108, 0.169803f /* ty=float32 */, 170 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %110 = qnn.dequantize(%109, 0.169803f /* ty=float32 */, 170 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %111 = sigmoid(%110) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %112 = qnn.quantize(%111, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %113 = qnn.dequantize(%112, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %114 = multiply(%110, %113) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %115 = qnn.quantize(%114, 0.0578546f /* ty=float32 */, 5 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %116 = qnn.dequantize(meta[relay.Constant][28] /* ty=Tensor[(11, 24, 1, 1), int8] */, 0.0106114f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 24, 1, 1), float32] */;
  %117 = nn.conv2d(%104, %116, padding=[0, 0, 0, 0], channels=11, kernel_size=[1, 1]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %118 = qnn.dequantize(meta[relay.Constant][29] /* ty=Tensor[(11), int32] */, meta[relay.Constant][30] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %119 = nn.bias_add(%117, %118) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %120 = qnn.quantize(%119, 0.0847118f /* ty=float32 */, 170 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %121 = qnn.dequantize(%120, 0.0847118f /* ty=float32 */, 170 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %122 = sigmoid(%121) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %123 = qnn.quantize(%122, 0.00391873f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %124 = qnn.dequantize(%123, 0.00391873f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %125 = multiply(%121, %124) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %126 = qnn.quantize(%125, 0.0294192f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %127 = qnn.dequantize(%126, 0.0294192f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %128 = qnn.dequantize(meta[relay.Constant][31] /* ty=Tensor[(11, 11, 3, 3), int8] */, 0.00653736f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 11, 3, 3), float32] */;
  %129 = nn.conv2d(%127, %128, padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %130 = qnn.dequantize(meta[relay.Constant][32] /* ty=Tensor[(11), int32] */, meta[relay.Constant][33] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %131 = nn.bias_add(%129, %130) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %132 = qnn.quantize(%131, 0.0713631f /* ty=float32 */, 169 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %133 = qnn.dequantize(%132, 0.0713631f /* ty=float32 */, 169 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %134 = sigmoid(%133) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %135 = qnn.quantize(%134, 0.00391312f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %136 = qnn.dequantize(%135, 0.00391312f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %137 = multiply(%133, %136) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %138 = qnn.quantize(%137, 0.0251116f /* ty=float32 */, 11 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %139 = qnn.dequantize(%138, 0.0251116f /* ty=float32 */, 11 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %140 = qnn.dequantize(meta[relay.Constant][34] /* ty=Tensor[(11, 11, 3, 3), int8] */, 0.00682442f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 11, 3, 3), float32] */;
  %141 = nn.conv2d(%139, %140, padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %142 = qnn.dequantize(meta[relay.Constant][35] /* ty=Tensor[(11), int32] */, meta[relay.Constant][36] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %143 = nn.bias_add(%141, %142) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %144 = qnn.quantize(%143, 0.0605039f /* ty=float32 */, 154 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %145 = qnn.dequantize(%144, 0.0605039f /* ty=float32 */, 154 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %146 = sigmoid(%145) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %147 = qnn.quantize(%146, 0.00391301f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %148 = qnn.dequantize(%147, 0.00391301f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %149 = multiply(%145, %148) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %150 = qnn.quantize(%149, 0.0250581f /* ty=float32 */, 11 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %151 = qnn.dequantize(%150, 0.0250581f /* ty=float32 */, 11 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %152 = add(%127, %151) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %153 = qnn.quantize(%152, 0.0336655f /* ty=float32 */, 17 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %154 = qnn.dequantize(%153, 0.0336655f /* ty=float32 */, 17 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %155 = qnn.dequantize(meta[relay.Constant][37] /* ty=Tensor[(11, 11, 3, 3), int8] */, 0.00467989f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 11, 3, 3), float32] */;
  %156 = nn.conv2d(%154, %155, padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %157 = qnn.dequantize(meta[relay.Constant][38] /* ty=Tensor[(11), int32] */, meta[relay.Constant][39] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %158 = nn.bias_add(%156, %157) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %159 = qnn.quantize(%158, 0.0594253f /* ty=float32 */, 180 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %160 = qnn.dequantize(%159, 0.0594253f /* ty=float32 */, 180 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %161 = sigmoid(%160) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %162 = qnn.quantize(%161, 0.00387782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %163 = qnn.dequantize(%162, 0.00387782f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %164 = multiply(%160, %163) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %165 = qnn.quantize(%164, 0.0184825f /* ty=float32 */, 15 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %166 = qnn.dequantize(%165, 0.0184825f /* ty=float32 */, 15 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %167 = qnn.dequantize(meta[relay.Constant][40] /* ty=Tensor[(11, 11, 3, 3), int8] */, 0.0224125f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 11, 3, 3), float32] */;
  %168 = nn.conv2d(%166, %167, padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %169 = qnn.dequantize(meta[relay.Constant][41] /* ty=Tensor[(11), int32] */, meta[relay.Constant][42] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %170 = nn.bias_add(%168, %169) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %171 = qnn.quantize(%170, 0.126144f /* ty=float32 */, 130 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %172 = qnn.dequantize(%171, 0.126144f /* ty=float32 */, 130 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %173 = sigmoid(%172) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %174 = qnn.quantize(%173, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %175 = qnn.dequantize(%174, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %176 = multiply(%172, %175) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %177 = qnn.quantize(%176, 0.063086f /* ty=float32 */, 4 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %178 = qnn.dequantize(%177, 0.063086f /* ty=float32 */, 4 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %179 = add(%154, %178) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %180 = qnn.quantize(%179, 0.0679669f /* ty=float32 */, 12 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %181 = qnn.dequantize(%115, 0.0578546f /* ty=float32 */, 5 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %182 = qnn.dequantize(%180, 0.0679669f /* ty=float32 */, 12 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %183 = (%181, %127, %154, %182) /* ty=(Tensor[(1, 11, 80, 80), float32], Tensor[(1, 11, 80, 80), float32], Tensor[(1, 11, 80, 80), float32], Tensor[(1, 11, 80, 80), float32]) */;
  %184 = concatenate(%183, axis=1) /* ty=Tensor[(1, 44, 80, 80), float32] */;
  %185 = qnn.quantize(%184, 0.0679669f /* ty=float32 */, 12 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 44, 80, 80), uint8] */;
  %186 = qnn.dequantize(%185, 0.0679669f /* ty=float32 */, 12 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 44, 80, 80), float32] */;
  %187 = qnn.dequantize(meta[relay.Constant][43] /* ty=Tensor[(24, 44, 1, 1), int8] */, 0.00549634f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 44, 1, 1), float32] */;
  %188 = nn.conv2d(%186, %187, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %189 = qnn.dequantize(meta[relay.Constant][44] /* ty=Tensor[(24), int32] */, meta[relay.Constant][45] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %190 = nn.bias_add(%188, %189) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %191 = qnn.quantize(%190, 0.0823917f /* ty=float32 */, 167 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %192 = qnn.dequantize(%191, 0.0823917f /* ty=float32 */, 167 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %193 = sigmoid(%192) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %194 = qnn.quantize(%193, 0.00391873f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %195 = qnn.dequantize(%194, 0.00391873f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %196 = multiply(%192, %195) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %197 = qnn.quantize(%196, 0.0294195f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %198 = qnn.dequantize(%197, 0.0294195f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %199 = qnn.dequantize(meta[relay.Constant][46] /* ty=Tensor[(49, 24, 3, 3), int8] */, 0.00772387f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 24, 3, 3), float32] */;
  %200 = nn.conv2d(%198, %199, strides=[2, 2], padding=[1, 1, 1, 1], channels=49, kernel_size=[3, 3]) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %201 = qnn.dequantize(meta[relay.Constant][47] /* ty=Tensor[(49), int32] */, meta[relay.Constant][48] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %202 = nn.bias_add(%200, %201) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %203 = qnn.quantize(%202, 0.0843094f /* ty=float32 */, 146 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %204 = qnn.dequantize(%203, 0.0843094f /* ty=float32 */, 146 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %205 = sigmoid(%204) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %206 = qnn.quantize(%205, 0.00392118f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %207 = qnn.dequantize(%206, 0.00392118f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %208 = multiply(%204, %207) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %209 = qnn.quantize(%208, 0.0372111f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %210 = qnn.dequantize(%209, 0.0372111f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %211 = qnn.dequantize(meta[relay.Constant][49] /* ty=Tensor[(24, 49, 1, 1), int8] */, 0.0138274f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 49, 1, 1), float32] */;
  %212 = nn.conv2d(%210, %211, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %213 = qnn.dequantize(meta[relay.Constant][50] /* ty=Tensor[(24), int32] */, meta[relay.Constant][51] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %214 = nn.bias_add(%212, %213) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %215 = qnn.quantize(%214, 0.112783f /* ty=float32 */, 168 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %216 = qnn.dequantize(%215, 0.112783f /* ty=float32 */, 168 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %217 = sigmoid(%216) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %218 = qnn.quantize(%217, 0.00392135f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %219 = qnn.dequantize(%218, 0.00392135f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %220 = multiply(%216, %219) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %221 = qnn.quantize(%220, 0.0395383f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %222 = qnn.dequantize(meta[relay.Constant][52] /* ty=Tensor[(24, 49, 1, 1), int8] */, 0.0153318f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 49, 1, 1), float32] */;
  %223 = nn.conv2d(%210, %222, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %224 = qnn.dequantize(meta[relay.Constant][53] /* ty=Tensor[(24), int32] */, meta[relay.Constant][54] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %225 = nn.bias_add(%223, %224) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %226 = qnn.quantize(%225, 0.0953883f /* ty=float32 */, 181 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %227 = qnn.dequantize(%226, 0.0953883f /* ty=float32 */, 181 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %228 = sigmoid(%227) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %229 = qnn.quantize(%228, 0.00391825f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %230 = qnn.dequantize(%229, 0.00391825f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %231 = multiply(%227, %230) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %232 = qnn.quantize(%231, 0.0288086f /* ty=float32 */, 10 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %233 = qnn.dequantize(%232, 0.0288086f /* ty=float32 */, 10 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %234 = qnn.dequantize(meta[relay.Constant][55] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.00914131f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %235 = nn.conv2d(%233, %234, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %236 = qnn.dequantize(meta[relay.Constant][56] /* ty=Tensor[(24), int32] */, meta[relay.Constant][57] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %237 = nn.bias_add(%235, %236) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %238 = qnn.quantize(%237, 0.0816085f /* ty=float32 */, 135 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %239 = qnn.dequantize(%238, 0.0816085f /* ty=float32 */, 135 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %240 = sigmoid(%239) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %241 = qnn.quantize(%240, 0.00392136f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %242 = qnn.dequantize(%241, 0.00392136f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %243 = multiply(%239, %242) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %244 = qnn.quantize(%243, 0.0396453f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %245 = qnn.dequantize(%244, 0.0396453f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %246 = qnn.dequantize(meta[relay.Constant][58] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.00460174f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %247 = nn.conv2d(%245, %246, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %248 = qnn.dequantize(meta[relay.Constant][59] /* ty=Tensor[(24), int32] */, meta[relay.Constant][60] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %249 = nn.bias_add(%247, %248) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %250 = qnn.quantize(%249, 0.090239f /* ty=float32 */, 176 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %251 = qnn.dequantize(%250, 0.090239f /* ty=float32 */, 176 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %252 = sigmoid(%251) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %253 = qnn.quantize(%252, 0.00391851f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %254 = qnn.dequantize(%253, 0.00391851f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %255 = multiply(%251, %254) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %256 = qnn.quantize(%255, 0.0291299f /* ty=float32 */, 10 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %257 = qnn.dequantize(%256, 0.0291299f /* ty=float32 */, 10 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %258 = add(%233, %257) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %259 = qnn.quantize(%258, 0.0318326f /* ty=float32 */, 17 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %260 = qnn.dequantize(%259, 0.0318326f /* ty=float32 */, 17 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %261 = qnn.dequantize(meta[relay.Constant][61] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.00484597f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %262 = nn.conv2d(%260, %261, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %263 = qnn.dequantize(meta[relay.Constant][62] /* ty=Tensor[(24), int32] */, meta[relay.Constant][63] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %264 = nn.bias_add(%262, %263) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %265 = qnn.quantize(%264, 0.0745044f /* ty=float32 */, 158 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %266 = qnn.dequantize(%265, 0.0745044f /* ty=float32 */, 158 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %267 = sigmoid(%266) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %268 = qnn.quantize(%267, 0.0039188f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %269 = qnn.dequantize(%268, 0.0039188f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %270 = multiply(%266, %269) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %271 = qnn.quantize(%270, 0.0295274f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %272 = qnn.dequantize(%271, 0.0295274f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %273 = qnn.dequantize(meta[relay.Constant][64] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.0129981f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %274 = nn.conv2d(%272, %273, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %275 = qnn.dequantize(meta[relay.Constant][65] /* ty=Tensor[(24), int32] */, meta[relay.Constant][66] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %276 = nn.bias_add(%274, %275) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %277 = qnn.quantize(%276, 0.135481f /* ty=float32 */, 149 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %278 = qnn.dequantize(%277, 0.135481f /* ty=float32 */, 149 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %279 = sigmoid(%278) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %280 = qnn.quantize(%279, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %281 = qnn.dequantize(%280, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %282 = multiply(%278, %281) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %283 = qnn.quantize(%282, 0.0576497f /* ty=float32 */, 5 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %284 = qnn.dequantize(%283, 0.0576497f /* ty=float32 */, 5 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %285 = add(%260, %284) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %286 = qnn.quantize(%285, 0.0598574f /* ty=float32 */, 14 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %287 = qnn.dequantize(%221, 0.0395383f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %288 = qnn.dequantize(%286, 0.0598574f /* ty=float32 */, 14 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %289 = (%287, %233, %260, %288) /* ty=(Tensor[(1, 24, 40, 40), float32], Tensor[(1, 24, 40, 40), float32], Tensor[(1, 24, 40, 40), float32], Tensor[(1, 24, 40, 40), float32]) */;
  %290 = concatenate(%289, axis=1) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %291 = qnn.quantize(%290, 0.0598574f /* ty=float32 */, 14 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 96, 40, 40), uint8] */;
  %292 = qnn.dequantize(%291, 0.0598574f /* ty=float32 */, 14 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %293 = qnn.dequantize(meta[relay.Constant][67] /* ty=Tensor[(49, 96, 1, 1), int8] */, 0.00513666f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 96, 1, 1), float32] */;
  %294 = nn.conv2d(%292, %293, padding=[0, 0, 0, 0], channels=49, kernel_size=[1, 1]) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %295 = qnn.dequantize(meta[relay.Constant][68] /* ty=Tensor[(49), int32] */, meta[relay.Constant][69] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %296 = nn.bias_add(%294, %295) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %297 = qnn.quantize(%296, 0.0921948f /* ty=float32 */, 184 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %298 = qnn.dequantize(%297, 0.0921948f /* ty=float32 */, 184 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %299 = sigmoid(%298) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %300 = qnn.quantize(%299, 0.00391592f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %301 = qnn.dequantize(%300, 0.00391592f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %302 = multiply(%298, %301) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %303 = qnn.quantize(%302, 0.0267106f /* ty=float32 */, 10 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %304 = qnn.dequantize(%303, 0.0267106f /* ty=float32 */, 10 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %305 = qnn.dequantize(meta[relay.Constant][70] /* ty=Tensor[(101, 49, 3, 3), int8] */, 0.00501056f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(101, 49, 3, 3), float32] */;
  %306 = nn.conv2d(%304, %305, strides=[2, 2], padding=[1, 1, 1, 1], channels=101, kernel_size=[3, 3]) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %307 = qnn.dequantize(meta[relay.Constant][71] /* ty=Tensor[(101), int32] */, meta[relay.Constant][72] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(101), float32] */;
  %308 = nn.bias_add(%306, %307) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %309 = qnn.quantize(%308, 0.07602f /* ty=float32 */, 151 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %310 = qnn.dequantize(%309, 0.07602f /* ty=float32 */, 151 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %311 = sigmoid(%310) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %312 = qnn.quantize(%311, 0.00392017f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %313 = qnn.dequantize(%312, 0.00392017f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %314 = multiply(%310, %313) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %315 = qnn.quantize(%314, 0.0322162f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %316 = qnn.dequantize(%315, 0.0322162f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %317 = qnn.dequantize(meta[relay.Constant][73] /* ty=Tensor[(49, 101, 1, 1), int8] */, 0.00820525f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 101, 1, 1), float32] */;
  %318 = nn.conv2d(%316, %317, padding=[0, 0, 0, 0], channels=49, kernel_size=[1, 1]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %319 = qnn.dequantize(meta[relay.Constant][74] /* ty=Tensor[(49), int32] */, meta[relay.Constant][75] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %320 = nn.bias_add(%318, %319) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %321 = qnn.quantize(%320, 0.0974854f /* ty=float32 */, 160 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %322 = qnn.dequantize(%321, 0.0974854f /* ty=float32 */, 160 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %323 = sigmoid(%322) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %324 = qnn.quantize(%323, 0.00392119f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %325 = qnn.dequantize(%324, 0.00392119f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %326 = multiply(%322, %325) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %327 = qnn.quantize(%326, 0.0373164f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %328 = qnn.dequantize(meta[relay.Constant][76] /* ty=Tensor[(49, 101, 1, 1), int8] */, 0.00593911f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 101, 1, 1), float32] */;
  %329 = nn.conv2d(%316, %328, padding=[0, 0, 0, 0], channels=49, kernel_size=[1, 1]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %330 = qnn.dequantize(meta[relay.Constant][77] /* ty=Tensor[(49), int32] */, meta[relay.Constant][78] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %331 = nn.bias_add(%329, %330) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %332 = qnn.quantize(%331, 0.068428f /* ty=float32 */, 173 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %333 = qnn.dequantize(%332, 0.068428f /* ty=float32 */, 173 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %334 = sigmoid(%333) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %335 = qnn.quantize(%334, 0.00390744f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %336 = qnn.dequantize(%335, 0.00390744f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %337 = multiply(%333, %336) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %338 = qnn.quantize(%337, 0.0230624f /* ty=float32 */, 12 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %339 = qnn.dequantize(%338, 0.0230624f /* ty=float32 */, 12 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %340 = qnn.dequantize(meta[relay.Constant][79] /* ty=Tensor[(49, 49, 3, 3), int8] */, 0.00548429f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 49, 3, 3), float32] */;
  %341 = nn.conv2d(%339, %340, padding=[1, 1, 1, 1], channels=49, kernel_size=[3, 3]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %342 = qnn.dequantize(meta[relay.Constant][80] /* ty=Tensor[(49), int32] */, meta[relay.Constant][81] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %343 = nn.bias_add(%341, %342) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %344 = qnn.quantize(%343, 0.0690382f /* ty=float32 */, 147 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %345 = qnn.dequantize(%344, 0.0690382f /* ty=float32 */, 147 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %346 = sigmoid(%345) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %347 = qnn.quantize(%346, 0.00391931f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %348 = qnn.dequantize(%347, 0.00391931f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %349 = multiply(%345, %348) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %350 = qnn.quantize(%349, 0.030325f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %351 = qnn.dequantize(%350, 0.030325f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %352 = qnn.dequantize(meta[relay.Constant][82] /* ty=Tensor[(49, 49, 3, 3), int8] */, 0.0100225f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 49, 3, 3), float32] */;
  %353 = nn.conv2d(%351, %352, padding=[1, 1, 1, 1], channels=49, kernel_size=[3, 3]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %354 = qnn.dequantize(meta[relay.Constant][83] /* ty=Tensor[(49), int32] */, meta[relay.Constant][84] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %355 = nn.bias_add(%353, %354) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %356 = qnn.quantize(%355, 0.13085f /* ty=float32 */, 148 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %357 = qnn.dequantize(%356, 0.13085f /* ty=float32 */, 148 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %358 = sigmoid(%357) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %359 = qnn.quantize(%358, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %360 = qnn.dequantize(%359, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %361 = multiply(%357, %360) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %362 = qnn.quantize(%361, 0.0561027f /* ty=float32 */, 5 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %363 = qnn.dequantize(%362, 0.0561027f /* ty=float32 */, 5 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %364 = add(%339, %363) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %365 = qnn.quantize(%364, 0.0572253f /* ty=float32 */, 10 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %366 = qnn.dequantize(%327, 0.0373164f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %367 = qnn.dequantize(%365, 0.0572253f /* ty=float32 */, 10 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %368 = (%366, %339, %367) /* ty=(Tensor[(1, 49, 20, 20), float32], Tensor[(1, 49, 20, 20), float32], Tensor[(1, 49, 20, 20), float32]) */;
  %369 = concatenate(%368, axis=1) /* ty=Tensor[(1, 147, 20, 20), float32] */;
  %370 = qnn.quantize(%369, 0.0572253f /* ty=float32 */, 10 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 147, 20, 20), uint8] */;
  %371 = qnn.dequantize(%370, 0.0572253f /* ty=float32 */, 10 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 147, 20, 20), float32] */;
  %372 = qnn.dequantize(meta[relay.Constant][85] /* ty=Tensor[(101, 147, 1, 1), int8] */, 0.00520084f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(101, 147, 1, 1), float32] */;
  %373 = nn.conv2d(%371, %372, padding=[0, 0, 0, 0], channels=101, kernel_size=[1, 1]) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %374 = qnn.dequantize(meta[relay.Constant][86] /* ty=Tensor[(101), int32] */, meta[relay.Constant][87] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(101), float32] */;
  %375 = nn.bias_add(%373, %374) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %376 = qnn.quantize(%375, 0.0801852f /* ty=float32 */, 152 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %377 = qnn.dequantize(%376, 0.0801852f /* ty=float32 */, 152 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %378 = sigmoid(%377) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %379 = qnn.quantize(%378, 0.00392057f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %380 = qnn.dequantize(%379, 0.00392057f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %381 = multiply(%377, %380) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %382 = qnn.quantize(%381, 0.0335277f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %383 = qnn.dequantize(%382, 0.0335277f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %384 = qnn.dequantize(meta[relay.Constant][88] /* ty=Tensor[(49, 101, 1, 1), int8] */, 0.00805813f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 101, 1, 1), float32] */;
  %385 = nn.conv2d(%383, %384, padding=[0, 0, 0, 0], channels=49, kernel_size=[1, 1]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %386 = qnn.dequantize(meta[relay.Constant][89] /* ty=Tensor[(49), int32] */, meta[relay.Constant][90] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %387 = nn.bias_add(%385, %386) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %388 = qnn.quantize(%387, 0.06515f /* ty=float32 */, 129 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %389 = qnn.dequantize(%388, 0.06515f /* ty=float32 */, 129 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %390 = sigmoid(%389) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %391 = qnn.quantize(%390, 0.00392051f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %392 = qnn.dequantize(%391, 0.00392051f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %393 = multiply(%389, %392) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %394 = qnn.quantize(%393, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %395 = qnn.dequantize(%394, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %396 = nn.max_pool2d(%395, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %397 = qnn.quantize(%396, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %398 = qnn.dequantize(%397, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %399 = nn.max_pool2d(%398, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %400 = qnn.quantize(%399, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %401 = qnn.dequantize(%400, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %402 = nn.max_pool2d(%401, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %403 = qnn.quantize(%402, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %404 = qnn.dequantize(%403, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %405 = (%395, %398, %401, %404) /* ty=(Tensor[(1, 49, 20, 20), float32], Tensor[(1, 49, 20, 20), float32], Tensor[(1, 49, 20, 20), float32], Tensor[(1, 49, 20, 20), float32]) */;
  %406 = concatenate(%405, axis=1) /* ty=Tensor[(1, 196, 20, 20), float32] */;
  %407 = qnn.quantize(%406, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 196, 20, 20), uint8] */;
  %408 = qnn.dequantize(%407, 0.0332988f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 196, 20, 20), float32] */;
  %409 = qnn.dequantize(meta[relay.Constant][91] /* ty=Tensor[(101, 196, 1, 1), int8] */, 0.00266168f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(101, 196, 1, 1), float32] */;
  %410 = nn.conv2d(%408, %409, padding=[0, 0, 0, 0], channels=101, kernel_size=[1, 1]) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %411 = qnn.dequantize(meta[relay.Constant][92] /* ty=Tensor[(101), int32] */, meta[relay.Constant][93] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(101), float32] */;
  %412 = nn.bias_add(%410, %411) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %413 = qnn.quantize(%412, 0.0466312f /* ty=float32 */, 182 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %414 = qnn.dequantize(%413, 0.0466312f /* ty=float32 */, 182 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %415 = sigmoid(%414) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %416 = qnn.quantize(%415, 0.00379714f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %417 = qnn.dequantize(%416, 0.00379714f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %418 = multiply(%414, %417) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %419 = qnn.quantize(%418, 0.0140717f /* ty=float32 */, 20 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %420 = qnn.dequantize(%419, 0.0140717f /* ty=float32 */, 20 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %421 = image.resize2d(%420, size=[40, 40], roi=[0f, 0f, 0f, 0f], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 101, 40, 40), float32] */;
  %422 = qnn.quantize(%421, 0.0140717f /* ty=float32 */, 20 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 40, 40), uint8] */;
  %423 = qnn.dequantize(%422, 0.0140717f /* ty=float32 */, 20 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 40, 40), float32] */;
  %424 = (%423, %304) /* ty=(Tensor[(1, 101, 40, 40), float32], Tensor[(1, 49, 40, 40), float32]) */;
  %425 = concatenate(%424, axis=1) /* ty=Tensor[(1, 150, 40, 40), float32] */;
  %426 = qnn.quantize(%425, 0.0267106f /* ty=float32 */, 10 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 150, 40, 40), uint8] */;
  %427 = qnn.dequantize(%426, 0.0267106f /* ty=float32 */, 10 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 150, 40, 40), float32] */;
  %428 = qnn.dequantize(meta[relay.Constant][94] /* ty=Tensor[(24, 150, 1, 1), int8] */, 0.0128265f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 150, 1, 1), float32] */;
  %429 = nn.conv2d(%427, %428, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %430 = qnn.dequantize(meta[relay.Constant][95] /* ty=Tensor[(24), int32] */, meta[relay.Constant][96] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %431 = nn.bias_add(%429, %430) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %432 = qnn.quantize(%431, 0.0806644f /* ty=float32 */, 144 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %433 = qnn.dequantize(%432, 0.0806644f /* ty=float32 */, 144 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %434 = sigmoid(%433) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %435 = qnn.quantize(%434, 0.00392106f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %436 = qnn.dequantize(%435, 0.00392106f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %437 = multiply(%433, %436) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %438 = qnn.quantize(%437, 0.0361811f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %439 = qnn.dequantize(meta[relay.Constant][97] /* ty=Tensor[(24, 150, 1, 1), int8] */, 0.0123497f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 150, 1, 1), float32] */;
  %440 = nn.conv2d(%427, %439, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %441 = qnn.dequantize(meta[relay.Constant][98] /* ty=Tensor[(24), int32] */, meta[relay.Constant][99] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %442 = nn.bias_add(%440, %441) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %443 = qnn.quantize(%442, 0.0603993f /* ty=float32 */, 174 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %444 = qnn.dequantize(%443, 0.0603993f /* ty=float32 */, 174 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %445 = sigmoid(%444) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %446 = qnn.quantize(%445, 0.00389172f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %447 = qnn.dequantize(%446, 0.00389172f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %448 = multiply(%444, %447) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %449 = qnn.quantize(%448, 0.0200467f /* ty=float32 */, 14 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %450 = qnn.dequantize(%449, 0.0200467f /* ty=float32 */, 14 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %451 = qnn.dequantize(meta[relay.Constant][100] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.0041574f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %452 = nn.conv2d(%450, %451, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %453 = qnn.dequantize(meta[relay.Constant][101] /* ty=Tensor[(24), int32] */, meta[relay.Constant][102] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %454 = nn.bias_add(%452, %453) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %455 = qnn.quantize(%454, 0.0523734f /* ty=float32 */, 176 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %456 = qnn.dequantize(%455, 0.0523734f /* ty=float32 */, 176 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %457 = sigmoid(%456) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %458 = qnn.quantize(%457, 0.0038604f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %459 = qnn.dequantize(%458, 0.0038604f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %460 = multiply(%456, %459) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %461 = qnn.quantize(%460, 0.0170928f /* ty=float32 */, 16 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %462 = qnn.dequantize(%461, 0.0170928f /* ty=float32 */, 16 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %463 = qnn.dequantize(meta[relay.Constant][103] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.0081244f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %464 = nn.conv2d(%462, %463, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %465 = qnn.dequantize(meta[relay.Constant][104] /* ty=Tensor[(24), int32] */, meta[relay.Constant][105] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %466 = nn.bias_add(%464, %465) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %467 = qnn.quantize(%466, 0.0885386f /* ty=float32 */, 139 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %468 = qnn.dequantize(%467, 0.0885386f /* ty=float32 */, 139 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %469 = sigmoid(%468) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %470 = qnn.quantize(%469, 0.00392144f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %471 = qnn.dequantize(%470, 0.00392144f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %472 = multiply(%468, %471) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %473 = qnn.quantize(%472, 0.0414958f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %474 = qnn.dequantize(%438, 0.0361811f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %475 = qnn.dequantize(%473, 0.0414958f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %476 = (%474, %450, %475) /* ty=(Tensor[(1, 24, 40, 40), float32], Tensor[(1, 24, 40, 40), float32], Tensor[(1, 24, 40, 40), float32]) */;
  %477 = concatenate(%476, axis=1) /* ty=Tensor[(1, 72, 40, 40), float32] */;
  %478 = qnn.quantize(%477, 0.0414958f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 72, 40, 40), uint8] */;
  %479 = qnn.dequantize(%478, 0.0414958f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 72, 40, 40), float32] */;
  %480 = qnn.dequantize(meta[relay.Constant][106] /* ty=Tensor[(49, 72, 1, 1), int8] */, 0.0122036f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 72, 1, 1), float32] */;
  %481 = nn.conv2d(%479, %480, padding=[0, 0, 0, 0], channels=49, kernel_size=[1, 1]) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %482 = qnn.dequantize(meta[relay.Constant][107] /* ty=Tensor[(49), int32] */, meta[relay.Constant][108] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %483 = nn.bias_add(%481, %482) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %484 = qnn.quantize(%483, 0.0824907f /* ty=float32 */, 183 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %485 = qnn.dequantize(%484, 0.0824907f /* ty=float32 */, 183 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %486 = sigmoid(%485) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %487 = qnn.quantize(%486, 0.00391153f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %488 = qnn.dequantize(%487, 0.00391153f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %489 = multiply(%485, %488) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %490 = qnn.quantize(%489, 0.0244248f /* ty=float32 */, 11 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %491 = qnn.dequantize(%490, 0.0244248f /* ty=float32 */, 11 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %492 = image.resize2d(%491, size=[80, 80], roi=[0f, 0f, 0f, 0f], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 49, 80, 80), float32] */;
  %493 = qnn.quantize(%492, 0.0244248f /* ty=float32 */, 11 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 80, 80), uint8] */;
  %494 = qnn.dequantize(%493, 0.0244248f /* ty=float32 */, 11 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 80, 80), float32] */;
  %495 = (%494, %198) /* ty=(Tensor[(1, 49, 80, 80), float32], Tensor[(1, 24, 80, 80), float32]) */;
  %496 = concatenate(%495, axis=1) /* ty=Tensor[(1, 73, 80, 80), float32] */;
  %497 = qnn.quantize(%496, 0.0294195f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 73, 80, 80), uint8] */;
  %498 = qnn.dequantize(%497, 0.0294195f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 73, 80, 80), float32] */;
  %499 = qnn.dequantize(meta[relay.Constant][109] /* ty=Tensor[(11, 73, 1, 1), int8] */, 0.00764345f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 73, 1, 1), float32] */;
  %500 = nn.conv2d(%498, %499, padding=[0, 0, 0, 0], channels=11, kernel_size=[1, 1]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %501 = qnn.dequantize(meta[relay.Constant][110] /* ty=Tensor[(11), int32] */, meta[relay.Constant][111] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %502 = nn.bias_add(%500, %501) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %503 = qnn.quantize(%502, 0.0588988f /* ty=float32 */, 158 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %504 = qnn.dequantize(%503, 0.0588988f /* ty=float32 */, 158 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %505 = sigmoid(%504) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %506 = qnn.quantize(%505, 0.00390886f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %507 = qnn.dequantize(%506, 0.00390886f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %508 = multiply(%504, %507) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %509 = qnn.quantize(%508, 0.0234842f /* ty=float32 */, 12 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %510 = qnn.dequantize(meta[relay.Constant][112] /* ty=Tensor[(11, 73, 1, 1), int8] */, 0.00809468f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 73, 1, 1), float32] */;
  %511 = nn.conv2d(%498, %510, padding=[0, 0, 0, 0], channels=11, kernel_size=[1, 1]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %512 = qnn.dequantize(meta[relay.Constant][113] /* ty=Tensor[(11), int32] */, meta[relay.Constant][114] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %513 = nn.bias_add(%511, %512) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %514 = qnn.quantize(%513, 0.0541253f /* ty=float32 */, 169 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %515 = qnn.dequantize(%514, 0.0541253f /* ty=float32 */, 169 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %516 = sigmoid(%515) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %517 = qnn.quantize(%516, 0.00388476f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %518 = qnn.dequantize(%517, 0.00388476f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %519 = multiply(%515, %518) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %520 = qnn.quantize(%519, 0.019191f /* ty=float32 */, 15 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %521 = qnn.dequantize(%520, 0.019191f /* ty=float32 */, 15 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %522 = qnn.dequantize(meta[relay.Constant][115] /* ty=Tensor[(11, 11, 3, 3), int8] */, 0.00751456f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 11, 3, 3), float32] */;
  %523 = nn.conv2d(%521, %522, padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %524 = qnn.dequantize(meta[relay.Constant][116] /* ty=Tensor[(11), int32] */, meta[relay.Constant][117] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %525 = nn.bias_add(%523, %524) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %526 = qnn.quantize(%525, 0.0492031f /* ty=float32 */, 189 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %527 = qnn.dequantize(%526, 0.0492031f /* ty=float32 */, 189 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %528 = sigmoid(%527) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %529 = qnn.quantize(%528, 0.00377764f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %530 = qnn.dequantize(%529, 0.00377764f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %531 = multiply(%527, %530) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %532 = qnn.quantize(%531, 0.0134355f /* ty=float32 */, 21 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %533 = qnn.dequantize(%532, 0.0134355f /* ty=float32 */, 21 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %534 = qnn.dequantize(meta[relay.Constant][118] /* ty=Tensor[(11, 11, 3, 3), int8] */, 0.0234161f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(11, 11, 3, 3), float32] */;
  %535 = nn.conv2d(%533, %534, padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %536 = qnn.dequantize(meta[relay.Constant][119] /* ty=Tensor[(11), int32] */, meta[relay.Constant][120] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(11), float32] */;
  %537 = nn.bias_add(%535, %536) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %538 = qnn.quantize(%537, 0.0686737f /* ty=float32 */, 130 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %539 = qnn.dequantize(%538, 0.0686737f /* ty=float32 */, 130 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %540 = sigmoid(%539) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %541 = qnn.quantize(%540, 0.00392085f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %542 = qnn.dequantize(%541, 0.00392085f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %543 = multiply(%539, %542) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %544 = qnn.quantize(%543, 0.0348109f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 11, 80, 80), uint8] */;
  %545 = qnn.dequantize(%509, 0.0234842f /* ty=float32 */, 12 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %546 = qnn.dequantize(%544, 0.0348109f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 11, 80, 80), float32] */;
  %547 = (%545, %521, %546) /* ty=(Tensor[(1, 11, 80, 80), float32], Tensor[(1, 11, 80, 80), float32], Tensor[(1, 11, 80, 80), float32]) */;
  %548 = concatenate(%547, axis=1) /* ty=Tensor[(1, 33, 80, 80), float32] */;
  %549 = qnn.quantize(%548, 0.0348109f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 33, 80, 80), uint8] */;
  %550 = qnn.dequantize(%549, 0.0348109f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 33, 80, 80), float32] */;
  %551 = qnn.dequantize(meta[relay.Constant][121] /* ty=Tensor[(24, 33, 1, 1), int8] */, 0.011353f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 33, 1, 1), float32] */;
  %552 = nn.conv2d(%550, %551, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %553 = qnn.dequantize(meta[relay.Constant][122] /* ty=Tensor[(24), int32] */, meta[relay.Constant][123] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %554 = nn.bias_add(%552, %553) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %555 = qnn.quantize(%554, 0.0955662f /* ty=float32 */, 138 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %556 = qnn.dequantize(%555, 0.0955662f /* ty=float32 */, 138 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %557 = sigmoid(%556) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %558 = qnn.quantize(%557, 0.00392151f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %559 = qnn.dequantize(%558, 0.00392151f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %560 = multiply(%556, %559) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %561 = qnn.quantize(%560, 0.0448345f /* ty=float32 */, 6 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 80, 80), uint8] */;
  %562 = qnn.dequantize(%561, 0.0448345f /* ty=float32 */, 6 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %563 = qnn.dequantize(meta[relay.Constant][124] /* ty=Tensor[(64, 24, 3, 3), int8] */, 0.011168f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 24, 3, 3), float32] */;
  %564 = nn.conv2d(%562, %563, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %565 = qnn.dequantize(meta[relay.Constant][125] /* ty=Tensor[(64), int32] */, meta[relay.Constant][126] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %566 = nn.bias_add(%564, %565) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %567 = qnn.quantize(%566, 0.099179f /* ty=float32 */, 177 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %568 = qnn.dequantize(%567, 0.099179f /* ty=float32 */, 177 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %569 = sigmoid(%568) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %570 = qnn.quantize(%569, 0.00391988f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %571 = qnn.dequantize(%570, 0.00391988f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %572 = multiply(%568, %571) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %573 = qnn.quantize(%572, 0.0314813f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %574 = qnn.dequantize(%573, 0.0314813f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %575 = qnn.dequantize(meta[relay.Constant][127] /* ty=Tensor[(64, 64, 3, 3), int8] */, 0.0102822f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %576 = nn.conv2d(%574, %575, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %577 = qnn.dequantize(meta[relay.Constant][128] /* ty=Tensor[(64), int32] */, meta[relay.Constant][129] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %578 = nn.bias_add(%576, %577) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %579 = qnn.quantize(%578, 0.185274f /* ty=float32 */, 133 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %580 = qnn.dequantize(%579, 0.185274f /* ty=float32 */, 133 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %581 = sigmoid(%580) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %582 = qnn.quantize(%581, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %583 = qnn.dequantize(%582, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %584 = multiply(%580, %583) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %585 = qnn.quantize(%584, 0.0897859f /* ty=float32 */, 3 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %586 = qnn.dequantize(%585, 0.0897859f /* ty=float32 */, 3 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %587 = qnn.dequantize(meta[relay.Constant][130] /* ty=Tensor[(64, 64, 1, 1), int8] */, 0.00348141f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %588 = nn.conv2d(%586, %587, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %589 = qnn.dequantize(meta[relay.Constant][131] /* ty=Tensor[(64), int32] */, meta[relay.Constant][132] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %590 = nn.bias_add(%588, %589) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %591 = qnn.quantize(%590, 0.114338f /* ty=float32 */, 135 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %592 = qnn.dequantize(meta[relay.Constant][133] /* ty=Tensor[(64, 24, 3, 3), int8] */, 0.00716849f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 24, 3, 3), float32] */;
  %593 = nn.conv2d(%562, %592, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %594 = qnn.dequantize(meta[relay.Constant][134] /* ty=Tensor[(64), int32] */, meta[relay.Constant][135] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %595 = nn.bias_add(%593, %594) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %596 = qnn.quantize(%595, 0.100512f /* ty=float32 */, 118 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %597 = qnn.dequantize(%596, 0.100512f /* ty=float32 */, 118 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %598 = sigmoid(%597) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %599 = qnn.quantize(%598, 0.00392156f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %600 = qnn.dequantize(%599, 0.00392156f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %601 = multiply(%597, %600) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %602 = qnn.quantize(%601, 0.0551013f /* ty=float32 */, 5 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %603 = qnn.dequantize(%602, 0.0551013f /* ty=float32 */, 5 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %604 = qnn.dequantize(meta[relay.Constant][136] /* ty=Tensor[(64, 64, 3, 3), int8] */, 0.00107311f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %605 = nn.conv2d(%603, %604, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %606 = qnn.dequantize(meta[relay.Constant][137] /* ty=Tensor[(64), int32] */, meta[relay.Constant][138] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %607 = nn.bias_add(%605, %606) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %608 = qnn.quantize(%607, 0.114831f /* ty=float32 */, 153 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %609 = qnn.dequantize(%608, 0.114831f /* ty=float32 */, 153 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %610 = sigmoid(%609) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %611 = qnn.quantize(%610, 0.00392154f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %612 = qnn.dequantize(%611, 0.00392154f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %613 = multiply(%609, %612) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %614 = qnn.quantize(%613, 0.0471122f /* ty=float32 */, 6 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %615 = qnn.dequantize(%614, 0.0471122f /* ty=float32 */, 6 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %616 = qnn.dequantize(meta[relay.Constant][139] /* ty=Tensor[(1, 64, 1, 1), int8] */, 0.00314115f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %617 = nn.conv2d(%615, %616, padding=[0, 0, 0, 0], channels=1, kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 80, 80), float32] */;
  %618 = qnn.dequantize(meta[relay.Constant][140] /* ty=Tensor[(1), int32] */, meta[relay.Constant][141] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), float32] */;
  %619 = nn.bias_add(%617, %618) /* ty=Tensor[(1, 1, 80, 80), float32] */;
  %620 = qnn.quantize(%619, 0.105526f /* ty=float32 */, 255 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 1, 80, 80), uint8] */;
  %621 = qnn.dequantize(%591, 0.114338f /* ty=float32 */, 135 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %622 = qnn.dequantize(%620, 0.105526f /* ty=float32 */, 255 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 1, 80, 80), float32] */;
  %623 = (%621, %622) /* ty=(Tensor[(1, 64, 80, 80), float32], Tensor[(1, 1, 80, 80), float32]) */;
  %624 = concatenate(%623, axis=1) /* ty=Tensor[(1, 65, 80, 80), float32] */;
  %625 = qnn.quantize(%624, 0.159272f /* ty=float32 */, 169 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 65, 80, 80), uint8] */;
  %626 = qnn.dequantize(%625, 0.159272f /* ty=float32 */, 169 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 65, 80, 80), float32] */;
  %627 = reshape(%626, newshape=[1, 65, -1]) /* ty=Tensor[(1, 65, 6400), float32] */;
  %628 = qnn.quantize(%627, 0.159272f /* ty=float32 */, 169 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 65, 6400), uint8] */;
  %629 = qnn.dequantize(meta[relay.Constant][142] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.00558448f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %630 = nn.conv2d(%562, %629, strides=[2, 2], padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %631 = qnn.dequantize(meta[relay.Constant][143] /* ty=Tensor[(24), int32] */, meta[relay.Constant][144] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %632 = nn.bias_add(%630, %631) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %633 = qnn.quantize(%632, 0.0839716f /* ty=float32 */, 152 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %634 = qnn.dequantize(%633, 0.0839716f /* ty=float32 */, 152 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %635 = sigmoid(%634) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %636 = qnn.quantize(%635, 0.00392088f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %637 = qnn.dequantize(%636, 0.00392088f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %638 = multiply(%634, %637) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %639 = qnn.quantize(%638, 0.0349836f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %640 = qnn.dequantize(%639, 0.0349836f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %641 = (%640, %491) /* ty=(Tensor[(1, 24, 40, 40), float32], Tensor[(1, 49, 40, 40), float32]) */;
  %642 = concatenate(%641, axis=1) /* ty=Tensor[(1, 73, 40, 40), float32] */;
  %643 = qnn.quantize(%642, 0.0349836f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 73, 40, 40), uint8] */;
  %644 = qnn.dequantize(%643, 0.0349836f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 73, 40, 40), float32] */;
  %645 = qnn.dequantize(meta[relay.Constant][145] /* ty=Tensor[(24, 73, 1, 1), int8] */, 0.0100905f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 73, 1, 1), float32] */;
  %646 = nn.conv2d(%644, %645, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %647 = qnn.dequantize(meta[relay.Constant][146] /* ty=Tensor[(24), int32] */, meta[relay.Constant][147] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %648 = nn.bias_add(%646, %647) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %649 = qnn.quantize(%648, 0.0752479f /* ty=float32 */, 159 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %650 = qnn.dequantize(%649, 0.0752479f /* ty=float32 */, 159 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %651 = sigmoid(%650) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %652 = qnn.quantize(%651, 0.00391873f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %653 = qnn.dequantize(%652, 0.00391873f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %654 = multiply(%650, %653) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %655 = qnn.quantize(%654, 0.0294286f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %656 = qnn.dequantize(meta[relay.Constant][148] /* ty=Tensor[(24, 73, 1, 1), int8] */, 0.0091172f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 73, 1, 1), float32] */;
  %657 = nn.conv2d(%644, %656, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %658 = qnn.dequantize(meta[relay.Constant][149] /* ty=Tensor[(24), int32] */, meta[relay.Constant][150] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %659 = nn.bias_add(%657, %658) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %660 = qnn.quantize(%659, 0.0757118f /* ty=float32 */, 136 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %661 = qnn.dequantize(%660, 0.0757118f /* ty=float32 */, 136 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %662 = sigmoid(%661) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %663 = qnn.quantize(%662, 0.00392107f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %664 = qnn.dequantize(%663, 0.00392107f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %665 = multiply(%661, %664) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %666 = qnn.quantize(%665, 0.0362802f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %667 = qnn.dequantize(%666, 0.0362802f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %668 = qnn.dequantize(meta[relay.Constant][151] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.00635368f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %669 = nn.conv2d(%667, %668, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %670 = qnn.dequantize(meta[relay.Constant][152] /* ty=Tensor[(24), int32] */, meta[relay.Constant][153] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %671 = nn.bias_add(%669, %670) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %672 = qnn.quantize(%671, 0.0551121f /* ty=float32 */, 170 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %673 = qnn.dequantize(%672, 0.0551121f /* ty=float32 */, 170 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %674 = sigmoid(%673) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %675 = qnn.quantize(%674, 0.00388598f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %676 = qnn.dequantize(%675, 0.00388598f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %677 = multiply(%673, %676) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %678 = qnn.quantize(%677, 0.0193295f /* ty=float32 */, 14 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %679 = qnn.dequantize(%678, 0.0193295f /* ty=float32 */, 14 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %680 = qnn.dequantize(meta[relay.Constant][154] /* ty=Tensor[(24, 24, 3, 3), int8] */, 0.0201421f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(24, 24, 3, 3), float32] */;
  %681 = nn.conv2d(%679, %680, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %682 = qnn.dequantize(meta[relay.Constant][155] /* ty=Tensor[(24), int32] */, meta[relay.Constant][156] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(24), float32] */;
  %683 = nn.bias_add(%681, %682) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %684 = qnn.quantize(%683, 0.11669f /* ty=float32 */, 134 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %685 = qnn.dequantize(%684, 0.11669f /* ty=float32 */, 134 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %686 = sigmoid(%685) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %687 = qnn.quantize(%686, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %688 = qnn.dequantize(%687, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %689 = multiply(%685, %688) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %690 = qnn.quantize(%689, 0.0563081f /* ty=float32 */, 5 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 24, 40, 40), uint8] */;
  %691 = qnn.dequantize(%655, 0.0294286f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %692 = qnn.dequantize(%690, 0.0563081f /* ty=float32 */, 5 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %693 = (%691, %667, %692) /* ty=(Tensor[(1, 24, 40, 40), float32], Tensor[(1, 24, 40, 40), float32], Tensor[(1, 24, 40, 40), float32]) */;
  %694 = concatenate(%693, axis=1) /* ty=Tensor[(1, 72, 40, 40), float32] */;
  %695 = qnn.quantize(%694, 0.0563081f /* ty=float32 */, 5 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 72, 40, 40), uint8] */;
  %696 = qnn.dequantize(%695, 0.0563081f /* ty=float32 */, 5 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 72, 40, 40), float32] */;
  %697 = qnn.dequantize(meta[relay.Constant][157] /* ty=Tensor[(49, 72, 1, 1), int8] */, 0.0099376f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 72, 1, 1), float32] */;
  %698 = nn.conv2d(%696, %697, padding=[0, 0, 0, 0], channels=49, kernel_size=[1, 1]) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %699 = qnn.dequantize(meta[relay.Constant][158] /* ty=Tensor[(49), int32] */, meta[relay.Constant][159] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %700 = nn.bias_add(%698, %699) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %701 = qnn.quantize(%700, 0.0989424f /* ty=float32 */, 156 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %702 = qnn.dequantize(%701, 0.0989424f /* ty=float32 */, 156 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %703 = sigmoid(%702) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %704 = qnn.quantize(%703, 0.00392136f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %705 = qnn.dequantize(%704, 0.00392136f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %706 = multiply(%702, %705) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %707 = qnn.quantize(%706, 0.039594f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 40, 40), uint8] */;
  %708 = qnn.dequantize(%707, 0.039594f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 40, 40), float32] */;
  %709 = qnn.dequantize(meta[relay.Constant][160] /* ty=Tensor[(64, 49, 3, 3), int8] */, 0.0101926f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 49, 3, 3), float32] */;
  %710 = nn.conv2d(%708, %709, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %711 = qnn.dequantize(meta[relay.Constant][161] /* ty=Tensor[(64), int32] */, meta[relay.Constant][162] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %712 = nn.bias_add(%710, %711) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %713 = qnn.quantize(%712, 0.125886f /* ty=float32 */, 179 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %714 = qnn.dequantize(%713, 0.125886f /* ty=float32 */, 179 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %715 = sigmoid(%714) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %716 = qnn.quantize(%715, 0.00392131f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %717 = qnn.dequantize(%716, 0.00392131f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %718 = multiply(%714, %717) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %719 = qnn.quantize(%718, 0.038849f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %720 = qnn.dequantize(%719, 0.038849f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %721 = qnn.dequantize(meta[relay.Constant][163] /* ty=Tensor[(64, 64, 3, 3), int8] */, 0.0173558f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %722 = nn.conv2d(%720, %721, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %723 = qnn.dequantize(meta[relay.Constant][164] /* ty=Tensor[(64), int32] */, meta[relay.Constant][165] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %724 = nn.bias_add(%722, %723) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %725 = qnn.quantize(%724, 0.231982f /* ty=float32 */, 94 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %726 = qnn.dequantize(%725, 0.231982f /* ty=float32 */, 94 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %727 = sigmoid(%726) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %728 = qnn.quantize(%727, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %729 = qnn.dequantize(%728, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %730 = multiply(%726, %729) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %731 = qnn.quantize(%730, 0.147836f /* ty=float32 */, 2 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %732 = qnn.dequantize(%731, 0.147836f /* ty=float32 */, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %733 = qnn.dequantize(meta[relay.Constant][166] /* ty=Tensor[(64, 64, 1, 1), int8] */, 0.00479054f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %734 = nn.conv2d(%732, %733, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %735 = qnn.dequantize(meta[relay.Constant][167] /* ty=Tensor[(64), int32] */, meta[relay.Constant][168] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %736 = nn.bias_add(%734, %735) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %737 = qnn.quantize(%736, 0.112163f /* ty=float32 */, 148 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %738 = qnn.dequantize(meta[relay.Constant][169] /* ty=Tensor[(64, 49, 3, 3), int8] */, 0.00636471f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 49, 3, 3), float32] */;
  %739 = nn.conv2d(%708, %738, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %740 = qnn.dequantize(meta[relay.Constant][170] /* ty=Tensor[(64), int32] */, meta[relay.Constant][171] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %741 = nn.bias_add(%739, %740) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %742 = qnn.quantize(%741, 0.085274f /* ty=float32 */, 142 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %743 = qnn.dequantize(%742, 0.085274f /* ty=float32 */, 142 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %744 = sigmoid(%743) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %745 = qnn.quantize(%744, 0.00392131f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %746 = qnn.dequantize(%745, 0.00392131f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %747 = multiply(%743, %746) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %748 = qnn.quantize(%747, 0.0388231f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %749 = qnn.dequantize(%748, 0.0388231f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %750 = qnn.dequantize(meta[relay.Constant][172] /* ty=Tensor[(64, 64, 3, 3), int8] */, 0.00332262f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %751 = nn.conv2d(%749, %750, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %752 = qnn.dequantize(meta[relay.Constant][173] /* ty=Tensor[(64), int32] */, meta[relay.Constant][174] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %753 = nn.bias_add(%751, %752) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %754 = qnn.quantize(%753, 0.0841715f /* ty=float32 */, 115 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %755 = qnn.dequantize(%754, 0.0841715f /* ty=float32 */, 115 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %756 = sigmoid(%755) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %757 = qnn.quantize(%756, 0.00392154f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %758 = qnn.dequantize(%757, 0.00392154f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %759 = multiply(%755, %758) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %760 = qnn.quantize(%759, 0.0471558f /* ty=float32 */, 6 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %761 = qnn.dequantize(%760, 0.0471558f /* ty=float32 */, 6 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %762 = qnn.dequantize(meta[relay.Constant][175] /* ty=Tensor[(1, 64, 1, 1), int8] */, 0.00397546f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %763 = nn.conv2d(%761, %762, padding=[0, 0, 0, 0], channels=1, kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %764 = qnn.dequantize(meta[relay.Constant][176] /* ty=Tensor[(1), int32] */, meta[relay.Constant][177] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), float32] */;
  %765 = nn.bias_add(%763, %764) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %766 = qnn.quantize(%765, 0.156681f /* ty=float32 */, 255 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 1, 40, 40), uint8] */;
  %767 = qnn.dequantize(%737, 0.112163f /* ty=float32 */, 148 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %768 = qnn.dequantize(%766, 0.156681f /* ty=float32 */, 255 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %769 = (%767, %768) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(1, 1, 40, 40), float32]) */;
  %770 = concatenate(%769, axis=1) /* ty=Tensor[(1, 65, 40, 40), float32] */;
  %771 = qnn.quantize(%770, 0.203693f /* ty=float32 */, 196 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 65, 40, 40), uint8] */;
  %772 = qnn.dequantize(%771, 0.203693f /* ty=float32 */, 196 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 65, 40, 40), float32] */;
  %773 = reshape(%772, newshape=[1, 65, -1]) /* ty=Tensor[(1, 65, 1600), float32] */;
  %774 = qnn.quantize(%773, 0.203693f /* ty=float32 */, 196 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 65, 1600), uint8] */;
  %775 = qnn.dequantize(meta[relay.Constant][178] /* ty=Tensor[(49, 49, 3, 3), int8] */, 0.00414263f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 49, 3, 3), float32] */;
  %776 = nn.conv2d(%708, %775, strides=[2, 2], padding=[1, 1, 1, 1], channels=49, kernel_size=[3, 3]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %777 = qnn.dequantize(meta[relay.Constant][179] /* ty=Tensor[(49), int32] */, meta[relay.Constant][180] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %778 = nn.bias_add(%776, %777) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %779 = qnn.quantize(%778, 0.0723176f /* ty=float32 */, 149 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %780 = qnn.dequantize(%779, 0.0723176f /* ty=float32 */, 149 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %781 = sigmoid(%780) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %782 = qnn.quantize(%781, 0.00391976f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %783 = qnn.dequantize(%782, 0.00391976f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %784 = multiply(%780, %783) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %785 = qnn.quantize(%784, 0.0312029f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %786 = qnn.dequantize(%785, 0.0312029f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %787 = (%786, %420) /* ty=(Tensor[(1, 49, 20, 20), float32], Tensor[(1, 101, 20, 20), float32]) */;
  %788 = concatenate(%787, axis=1) /* ty=Tensor[(1, 150, 20, 20), float32] */;
  %789 = qnn.quantize(%788, 0.0312029f /* ty=float32 */, 9 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 150, 20, 20), uint8] */;
  %790 = qnn.dequantize(%789, 0.0312029f /* ty=float32 */, 9 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 150, 20, 20), float32] */;
  %791 = qnn.dequantize(meta[relay.Constant][181] /* ty=Tensor[(49, 150, 1, 1), int8] */, 0.0120365f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 150, 1, 1), float32] */;
  %792 = nn.conv2d(%790, %791, padding=[0, 0, 0, 0], channels=49, kernel_size=[1, 1]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %793 = qnn.dequantize(meta[relay.Constant][182] /* ty=Tensor[(49), int32] */, meta[relay.Constant][183] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %794 = nn.bias_add(%792, %793) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %795 = qnn.quantize(%794, 0.0818831f /* ty=float32 */, 147 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %796 = qnn.dequantize(%795, 0.0818831f /* ty=float32 */, 147 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %797 = sigmoid(%796) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %798 = qnn.quantize(%797, 0.003921f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %799 = qnn.dequantize(%798, 0.003921f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %800 = multiply(%796, %799) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %801 = qnn.quantize(%800, 0.0357713f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %802 = qnn.dequantize(meta[relay.Constant][184] /* ty=Tensor[(49, 150, 1, 1), int8] */, 0.0103424f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 150, 1, 1), float32] */;
  %803 = nn.conv2d(%790, %802, padding=[0, 0, 0, 0], channels=49, kernel_size=[1, 1]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %804 = qnn.dequantize(meta[relay.Constant][185] /* ty=Tensor[(49), int32] */, meta[relay.Constant][186] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %805 = nn.bias_add(%803, %804) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %806 = qnn.quantize(%805, 0.0699503f /* ty=float32 */, 133 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %807 = qnn.dequantize(%806, 0.0699503f /* ty=float32 */, 133 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %808 = sigmoid(%807) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %809 = qnn.quantize(%808, 0.00392078f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %810 = qnn.dequantize(%809, 0.00392078f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %811 = multiply(%807, %810) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %812 = qnn.quantize(%811, 0.0344733f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %813 = qnn.dequantize(%812, 0.0344733f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %814 = qnn.dequantize(meta[relay.Constant][187] /* ty=Tensor[(49, 49, 3, 3), int8] */, 0.00736291f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 49, 3, 3), float32] */;
  %815 = nn.conv2d(%813, %814, padding=[1, 1, 1, 1], channels=49, kernel_size=[3, 3]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %816 = qnn.dequantize(meta[relay.Constant][188] /* ty=Tensor[(49), int32] */, meta[relay.Constant][189] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %817 = nn.bias_add(%815, %816) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %818 = qnn.quantize(%817, 0.0657877f /* ty=float32 */, 160 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %819 = qnn.dequantize(%818, 0.0657877f /* ty=float32 */, 160 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %820 = sigmoid(%819) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %821 = qnn.quantize(%820, 0.00391381f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %822 = qnn.dequantize(%821, 0.00391381f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %823 = multiply(%819, %822) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %824 = qnn.quantize(%823, 0.0254473f /* ty=float32 */, 11 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %825 = qnn.dequantize(%824, 0.0254473f /* ty=float32 */, 11 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %826 = qnn.dequantize(meta[relay.Constant][190] /* ty=Tensor[(49, 49, 3, 3), int8] */, 0.00982574f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(49, 49, 3, 3), float32] */;
  %827 = nn.conv2d(%825, %826, padding=[1, 1, 1, 1], channels=49, kernel_size=[3, 3]) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %828 = qnn.dequantize(meta[relay.Constant][191] /* ty=Tensor[(49), int32] */, meta[relay.Constant][192] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(49), float32] */;
  %829 = nn.bias_add(%827, %828) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %830 = qnn.quantize(%829, 0.0864747f /* ty=float32 */, 145 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %831 = qnn.dequantize(%830, 0.0864747f /* ty=float32 */, 145 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %832 = sigmoid(%831) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %833 = qnn.quantize(%832, 0.00392127f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %834 = qnn.dequantize(%833, 0.00392127f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %835 = multiply(%831, %834) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %836 = qnn.quantize(%835, 0.0382513f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 49, 20, 20), uint8] */;
  %837 = qnn.dequantize(%801, 0.0357713f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %838 = qnn.dequantize(%836, 0.0382513f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 49, 20, 20), float32] */;
  %839 = (%837, %813, %838) /* ty=(Tensor[(1, 49, 20, 20), float32], Tensor[(1, 49, 20, 20), float32], Tensor[(1, 49, 20, 20), float32]) */;
  %840 = concatenate(%839, axis=1) /* ty=Tensor[(1, 147, 20, 20), float32] */;
  %841 = qnn.quantize(%840, 0.0382513f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 147, 20, 20), uint8] */;
  %842 = qnn.dequantize(%841, 0.0382513f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 147, 20, 20), float32] */;
  %843 = qnn.dequantize(meta[relay.Constant][193] /* ty=Tensor[(101, 147, 1, 1), int8] */, 0.0147672f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(101, 147, 1, 1), float32] */;
  %844 = nn.conv2d(%842, %843, padding=[0, 0, 0, 0], channels=101, kernel_size=[1, 1]) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %845 = qnn.dequantize(meta[relay.Constant][194] /* ty=Tensor[(101), int32] */, meta[relay.Constant][195] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(101), float32] */;
  %846 = nn.bias_add(%844, %845) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %847 = qnn.quantize(%846, 0.167213f /* ty=float32 */, 142 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %848 = qnn.dequantize(%847, 0.167213f /* ty=float32 */, 142 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %849 = sigmoid(%848) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %850 = qnn.quantize(%849, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %851 = qnn.dequantize(%850, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %852 = multiply(%848, %851) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %853 = qnn.quantize(%852, 0.0750852f /* ty=float32 */, 4 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 101, 20, 20), uint8] */;
  %854 = qnn.dequantize(%853, 0.0750852f /* ty=float32 */, 4 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 101, 20, 20), float32] */;
  %855 = qnn.dequantize(meta[relay.Constant][196] /* ty=Tensor[(64, 101, 3, 3), int8] */, 0.00712754f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 101, 3, 3), float32] */;
  %856 = nn.conv2d(%854, %855, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %857 = qnn.dequantize(meta[relay.Constant][197] /* ty=Tensor[(64), int32] */, meta[relay.Constant][198] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %858 = nn.bias_add(%856, %857) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %859 = qnn.quantize(%858, 0.153966f /* ty=float32 */, 194 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %860 = qnn.dequantize(%859, 0.153966f /* ty=float32 */, 194 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %861 = sigmoid(%860) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %862 = qnn.quantize(%861, 0.00392126f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %863 = qnn.dequantize(%862, 0.00392126f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %864 = multiply(%860, %863) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %865 = qnn.quantize(%864, 0.0381809f /* ty=float32 */, 7 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %866 = qnn.dequantize(%865, 0.0381809f /* ty=float32 */, 7 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %867 = qnn.dequantize(meta[relay.Constant][199] /* ty=Tensor[(64, 64, 3, 3), int8] */, 0.0105543f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %868 = nn.conv2d(%866, %867, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %869 = qnn.dequantize(meta[relay.Constant][200] /* ty=Tensor[(64), int32] */, meta[relay.Constant][201] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %870 = nn.bias_add(%868, %869) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %871 = qnn.quantize(%870, 0.212218f /* ty=float32 */, 117 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %872 = qnn.dequantize(%871, 0.212218f /* ty=float32 */, 117 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %873 = sigmoid(%872) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %874 = qnn.quantize(%873, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %875 = qnn.dequantize(%874, 0.00392157f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %876 = multiply(%872, %875) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %877 = qnn.quantize(%876, 0.115821f /* ty=float32 */, 2 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %878 = qnn.dequantize(%877, 0.115821f /* ty=float32 */, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %879 = qnn.dequantize(meta[relay.Constant][202] /* ty=Tensor[(64, 64, 1, 1), int8] */, 0.00490973f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %880 = nn.conv2d(%878, %879, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %881 = qnn.dequantize(meta[relay.Constant][203] /* ty=Tensor[(64), int32] */, meta[relay.Constant][204] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %882 = nn.bias_add(%880, %881) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %883 = qnn.quantize(%882, 0.11842f /* ty=float32 */, 153 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %884 = qnn.dequantize(meta[relay.Constant][205] /* ty=Tensor[(64, 101, 3, 3), int8] */, 0.00559479f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 101, 3, 3), float32] */;
  %885 = nn.conv2d(%854, %884, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %886 = qnn.dequantize(meta[relay.Constant][206] /* ty=Tensor[(64), int32] */, meta[relay.Constant][207] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %887 = nn.bias_add(%885, %886) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %888 = qnn.quantize(%887, 0.0757673f /* ty=float32 */, 148 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %889 = qnn.dequantize(%888, 0.0757673f /* ty=float32 */, 148 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %890 = sigmoid(%889) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %891 = qnn.quantize(%890, 0.00392036f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %892 = qnn.dequantize(%891, 0.00392036f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %893 = multiply(%889, %892) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %894 = qnn.quantize(%893, 0.0327881f /* ty=float32 */, 8 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %895 = qnn.dequantize(%894, 0.0327881f /* ty=float32 */, 8 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %896 = qnn.dequantize(meta[relay.Constant][208] /* ty=Tensor[(64, 64, 3, 3), int8] */, 0.0035462f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %897 = nn.conv2d(%895, %896, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %898 = qnn.dequantize(meta[relay.Constant][209] /* ty=Tensor[(64), int32] */, meta[relay.Constant][210] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(64), float32] */;
  %899 = nn.bias_add(%897, %898) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %900 = qnn.quantize(%899, 0.0870952f /* ty=float32 */, 113 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %901 = qnn.dequantize(%900, 0.0870952f /* ty=float32 */, 113 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %902 = sigmoid(%901) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %903 = qnn.quantize(%902, 0.00392155f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %904 = qnn.dequantize(%903, 0.00392155f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %905 = multiply(%901, %904) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %906 = qnn.quantize(%905, 0.049673f /* ty=float32 */, 6 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %907 = qnn.dequantize(%906, 0.049673f /* ty=float32 */, 6 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %908 = qnn.dequantize(meta[relay.Constant][211] /* ty=Tensor[(1, 64, 1, 1), int8] */, 0.00416f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %909 = nn.conv2d(%907, %908, padding=[0, 0, 0, 0], channels=1, kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %910 = qnn.dequantize(meta[relay.Constant][212] /* ty=Tensor[(1), int32] */, meta[relay.Constant][213] /* ty=Tensor[(1), float32] */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), float32] */;
  %911 = nn.bias_add(%909, %910) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %912 = qnn.quantize(%911, 0.168978f /* ty=float32 */, 241 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 1, 20, 20), uint8] */;
  %913 = qnn.dequantize(%883, 0.11842f /* ty=float32 */, 153 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %914 = qnn.dequantize(%912, 0.168978f /* ty=float32 */, 241 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %915 = (%913, %914) /* ty=(Tensor[(1, 64, 20, 20), float32], Tensor[(1, 1, 20, 20), float32]) */;
  %916 = concatenate(%915, axis=1) /* ty=Tensor[(1, 65, 20, 20), float32] */;
  %917 = qnn.quantize(%916, 0.207288f /* ty=float32 */, 197 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 65, 20, 20), uint8] */;
  %918 = qnn.dequantize(%917, 0.207288f /* ty=float32 */, 197 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 65, 20, 20), float32] */;
  %919 = reshape(%918, newshape=[1, 65, -1]) /* ty=Tensor[(1, 65, 400), float32] */;
  %920 = qnn.quantize(%919, 0.207288f /* ty=float32 */, 197 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 65, 400), uint8] */;
  %921 = qnn.dequantize(%628, 0.159272f /* ty=float32 */, 169 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 65, 6400), float32] */;
  %922 = qnn.dequantize(%774, 0.203693f /* ty=float32 */, 196 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 65, 1600), float32] */;
  %923 = qnn.dequantize(%920, 0.207288f /* ty=float32 */, 197 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 65, 400), float32] */;
  %924 = (%921, %922, %923) /* ty=(Tensor[(1, 65, 6400), float32], Tensor[(1, 65, 1600), float32], Tensor[(1, 65, 400), float32]) */;
  %925 = concatenate(%924, axis=2) /* ty=Tensor[(1, 65, 8400), float32] */;
  %926 = split(%925, indices_or_sections=[64i64], axis=1) /* ty=(Tensor[(1, 64, 8400), float32], Tensor[(1, 1, 8400), float32]) */;
  %927 = %926.0 /* ty=Tensor[(1, 64, 8400), float32] */;
  %928 = reshape(%927, newshape=[1, 4, 16, 8400]) /* ty=Tensor[(1, 4, 16, 8400), float32] */;
  %929 = transpose(%928, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 4, 8400), float32] */;
  %930 = nn.softmax(%929, axis=1) /* ty=Tensor[(1, 16, 4, 8400), float32] */;
  %931 = nn.conv2d(%930, meta[relay.Constant][214] /* ty=Tensor[(1, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1, kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 4, 8400), float32] */;
  %932 = reshape(%931, newshape=[1, 4, 8400]) /* ty=Tensor[(1, 4, 8400), float32] */;
  %933 = strided_slice(%932, begin=[0i64], end=[2i64], strides=[1i64], axes=[1i64]) /* ty=Tensor[(1, 2, 8400), float32] */;
  %934 = subtract(meta[relay.Constant][0] /* ty=Tensor[(1, 2, 8400), float32] */, %933) /* ty=Tensor[(1, 2, 8400), float32] */;
  %935 = qnn.quantize(%934, 0.347856f /* ty=float32 */, 27 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 2, 8400), uint8] */;
  %936 = strided_slice(%932, begin=[2i64], end=[4i64], strides=[1i64], axes=[1i64]) /* ty=Tensor[(1, 2, 8400), float32] */;
  %937 = add(meta[relay.Constant][215] /* ty=Tensor[(1, 2, 8400), float32] */, %936) /* ty=Tensor[(1, 2, 8400), float32] */;
  %938 = qnn.quantize(%937, 0.351966f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 2, 8400), uint8] */;
  %939 = qnn.dequantize(%935, 0.347856f /* ty=float32 */, 27 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 2, 8400), float32] */;
  %940 = qnn.dequantize(%938, 0.351966f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 2, 8400), float32] */;
  %941 = add(%939, %940) /* ty=Tensor[(1, 2, 8400), float32] */;
  %942 = qnn.quantize(%941, 0.649682f /* ty=float32 */, 6 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 2, 8400), uint8] */;
  %943 = qnn.dequantize(%942, 0.649682f /* ty=float32 */, 6 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 2, 8400), float32] */;
  %944 = divide(%943, 2f /* ty=float32 */) /* ty=Tensor[(1, 2, 8400), float32] */;
  %945 = subtract(%940, %939) /* ty=Tensor[(1, 2, 8400), float32] */;
  %946 = (%944, %945) /* ty=(Tensor[(1, 2, 8400), float32], Tensor[(1, 2, 8400), float32]) */;
  %947 = concatenate(%946, axis=1) /* ty=Tensor[(1, 4, 8400), float32] */;
  %948 = %926.1 /* ty=Tensor[(1, 1, 8400), float32] */;
  %949 = multiply(%947, meta[relay.Constant][216] /* ty=Tensor[(1, 8400), float32] */) /* ty=Tensor[(1, 4, 8400), float32] */;
  %950 = sigmoid(%948) /* ty=Tensor[(1, 1, 8400), float32] */;
  %951 = (%949, %950) /* ty=(Tensor[(1, 4, 8400), float32], Tensor[(1, 1, 8400), float32]) */;
  concatenate(%951, axis=1) /* ty=Tensor[(1, 5, 8400), float32] */
}

