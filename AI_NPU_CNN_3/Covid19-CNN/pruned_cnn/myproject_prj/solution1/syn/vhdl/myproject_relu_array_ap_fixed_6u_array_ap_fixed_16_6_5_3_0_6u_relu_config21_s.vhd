-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_6u_array_ap_fixed_16_6_5_3_0_6u_relu_config21_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_dout : IN STD_LOGIC_VECTOR (95 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    res_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    res_full_n : IN STD_LOGIC;
    res_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_6u_array_ap_fixed_16_6_5_3_0_6u_relu_config21_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_blk_n : STD_LOGIC;
    signal res_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_26_fu_69_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_reg_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_fu_73_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln155_reg_289 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_reg_294 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_1_reg_299 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_reg_304 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_2_reg_309 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_29_reg_314 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_3_reg_319 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_30_reg_324 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_4_reg_329 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_31_reg_334 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_5_reg_339 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_1_fu_182_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_1_reg_344 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_data_3_fu_194_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_3_reg_349 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_5_fu_206_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_5_reg_354 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_7_fu_218_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_7_reg_359 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_9_fu_230_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_9_reg_364 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_11_fu_242_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_11_reg_369 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln1494_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_4_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_5_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_4_fu_261_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_3_fu_258_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_2_fu_255_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_1_fu_252_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_249_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_264_p7 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                out_data_11_reg_369 <= out_data_11_fu_242_p3;
                out_data_1_reg_344 <= out_data_1_fu_182_p3;
                out_data_3_reg_349 <= out_data_3_fu_194_p3;
                out_data_5_reg_354 <= out_data_5_fu_206_p3;
                out_data_7_reg_359 <= out_data_7_fu_218_p3;
                out_data_9_reg_364 <= out_data_9_fu_230_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_26_reg_284 <= tmp_26_fu_69_p1;
                tmp_27_reg_294 <= data_dout(31 downto 16);
                tmp_28_reg_304 <= data_dout(47 downto 32);
                tmp_29_reg_314 <= data_dout(63 downto 48);
                tmp_30_reg_324 <= data_dout(79 downto 64);
                tmp_31_reg_334 <= data_dout(95 downto 80);
                trunc_ln155_1_reg_299 <= data_dout(30 downto 16);
                trunc_ln155_2_reg_309 <= data_dout(46 downto 32);
                trunc_ln155_3_reg_319 <= data_dout(62 downto 48);
                trunc_ln155_4_reg_329 <= data_dout(78 downto 64);
                trunc_ln155_5_reg_339 <= data_dout(94 downto 80);
                trunc_ln155_reg_289 <= trunc_ln155_fu_73_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_empty_n, res_full_n, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, data_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, res_full_n, ap_CS_fsm_state3)
    begin
        if (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_blk_n <= data_empty_n;
        else 
            data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_read <= ap_const_logic_1;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_1_fu_189_p2 <= "1" when (signed(tmp_27_reg_294) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_2_fu_201_p2 <= "1" when (signed(tmp_28_reg_304) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_3_fu_213_p2 <= "1" when (signed(tmp_29_reg_314) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_4_fu_225_p2 <= "1" when (signed(tmp_30_reg_324) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_5_fu_237_p2 <= "1" when (signed(tmp_31_reg_334) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_fu_177_p2 <= "1" when (signed(tmp_26_reg_284) > signed(ap_const_lv16_0)) else "0";

    internal_ap_ready_assign_proc : process(res_full_n, ap_CS_fsm_state3)
    begin
        if (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    out_data_11_fu_242_p3 <= 
        trunc_ln155_5_reg_339 when (icmp_ln1494_5_fu_237_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_1_fu_182_p3 <= 
        trunc_ln155_reg_289 when (icmp_ln1494_fu_177_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_3_fu_194_p3 <= 
        trunc_ln155_1_reg_299 when (icmp_ln1494_1_fu_189_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_5_fu_206_p3 <= 
        trunc_ln155_2_reg_309 when (icmp_ln1494_2_fu_201_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_7_fu_218_p3 <= 
        trunc_ln155_3_reg_319 when (icmp_ln1494_3_fu_213_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_9_fu_230_p3 <= 
        trunc_ln155_4_reg_329 when (icmp_ln1494_4_fu_225_p2(0) = '1') else 
        ap_const_lv15_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_blk_n_assign_proc : process(res_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            res_blk_n <= res_full_n;
        else 
            res_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_264_p7),96));

    res_write_assign_proc : process(res_full_n, ap_CS_fsm_state3)
    begin
        if (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            res_write <= ap_const_logic_1;
        else 
            res_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_26_fu_69_p1 <= data_dout(16 - 1 downto 0);
    tmp_fu_264_p7 <= (((((out_data_11_reg_369 & zext_ln45_4_fu_261_p1) & zext_ln45_3_fu_258_p1) & zext_ln45_2_fu_255_p1) & zext_ln45_1_fu_252_p1) & zext_ln45_fu_249_p1);
    trunc_ln155_fu_73_p1 <= data_dout(15 - 1 downto 0);
    zext_ln45_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_3_reg_349),16));
    zext_ln45_2_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_5_reg_354),16));
    zext_ln45_3_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_7_reg_359),16));
    zext_ln45_4_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_9_reg_364),16));
    zext_ln45_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_1_reg_344),16));
end behav;
