-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    res_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    res_full_n : IN STD_LOGIC;
    res_write : OUT STD_LOGIC );
end;


architecture behav of myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_F04 : STD_LOGIC_VECTOR (11 downto 0) := "111100000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_555 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_656 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_757 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_0_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_0_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_0_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal res_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln55_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_708_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_1_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_1_reg_790_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_117 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln109_fu_128_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_predicate_op122_write_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln109_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sX_load_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln55_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_708_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln76_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_buffer_V_1_0_fu_160_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_buffer_V_1_0_reg_719 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_buffer_V_1_1_reg_726 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_buffer_V_1_2_reg_733 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_buffer_V_1_3_reg_740 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_buffer_V_0_0_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_buffer_V_0_1_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_buffer_V_0_2_reg_761 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0_reg_768 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln55_3_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_3_reg_775 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_780 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_780_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln80_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln55_1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_438_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_reg_794 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_3_fu_456_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_3_reg_800 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_474_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_reg_806 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_492_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_reg_812 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_fu_510_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_reg_818 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_7_fu_528_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_7_reg_824 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_9_fu_546_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_9_reg_830 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_10_fu_564_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_10_reg_836 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln80_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_load_1_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln86_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_fu_613_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_4_reg_856 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_fu_629_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_reg_861 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_8_fu_645_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_8_reg_866 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_11_fu_661_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_11_reg_871 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln86_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_pY_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_pX_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln91_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sX_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal select_ln91_fu_284_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln55_2_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_3_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_5_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_6_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_6_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_8_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_9_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_9_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_11_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_11_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_12_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_12_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_4_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_4_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_7_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_7_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_10_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_10_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_13_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_13_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_106 : BOOLEAN;
    signal ap_condition_629 : BOOLEAN;
    signal ap_condition_292 : BOOLEAN;
    signal ap_condition_575 : BOOLEAN;
    signal ap_condition_637 : BOOLEAN;
    signal ap_condition_641 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_0_0_U : component myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi
    generic map (
        DataWidth => 16,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3D,
        ce0 => line_buffer_Array_0_0_ce0,
        we0 => line_buffer_Array_0_0_we0,
        d0 => shift_buffer_V_1_0_fu_160_p1,
        q0 => line_buffer_Array_0_0_q0);

    line_buffer_Array_0_1_U : component myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi
    generic map (
        DataWidth => 16,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3D,
        ce0 => line_buffer_Array_0_1_ce0,
        we0 => line_buffer_Array_0_1_we0,
        d0 => line_buffer_Array_0_1_d0,
        q0 => line_buffer_Array_0_1_q0);

    line_buffer_Array_0_2_U : component myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi
    generic map (
        DataWidth => 16,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3D,
        ce0 => line_buffer_Array_0_2_ce0,
        we0 => line_buffer_Array_0_2_we0,
        d0 => line_buffer_Array_0_2_d0,
        q0 => line_buffer_Array_0_2_q0);

    line_buffer_Array_0_3_U : component myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi
    generic map (
        DataWidth => 16,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3D,
        ce0 => line_buffer_Array_0_3_ce0,
        we0 => line_buffer_Array_0_3_we0,
        d0 => line_buffer_Array_0_3_d0,
        q0 => line_buffer_Array_0_3_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln109_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_117 <= add_ln109_fu_128_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_117 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_292)) then
                if ((icmp_ln76_fu_274_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln76_fu_274_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln76_reg_713;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_575)) then
                if ((icmp_ln80_fu_571_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln80_fu_571_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln80_reg_784;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_292)) then
                if ((icmp_ln76_fu_274_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln76_fu_274_p2 = ap_const_lv1_0)) then 
                    sX <= add_ln91_fu_291_p2;
                end if;
            end if; 
        end if;
    end process;

    sY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_641)) then 
                    sY <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_637)) then 
                    sY <= add_ln86_fu_674_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln109_fu_134_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln76_reg_713 <= add_ln76_fu_154_p2;
                icmp_ln55_reg_708 <= icmp_ln55_fu_144_p2;
                sX_load_reg_703 <= ap_sig_allocacmp_sX_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_274_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln80_reg_784 <= add_ln80_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_708_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln55_1_reg_790 <= and_ln55_1_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln55_1_reg_790_pp0_iter3_reg <= and_ln55_1_reg_790;
                icmp_ln55_reg_708_pp0_iter2_reg <= icmp_ln55_reg_708_pp0_iter1_reg;
                icmp_ln55_reg_708_pp0_iter3_reg <= icmp_ln55_reg_708_pp0_iter2_reg;
                icmp_ln76_reg_780_pp0_iter2_reg <= icmp_ln76_reg_780;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln55_reg_708 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln55_3_reg_775 <= icmp_ln55_3_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln55_reg_708_pp0_iter1_reg <= icmp_ln55_reg_708;
                icmp_ln76_reg_780 <= icmp_ln76_fu_274_p2;
                p_0_reg_768 <= line_buffer_Array_0_3_q0;
                shift_buffer_V_0_0_reg_747 <= line_buffer_Array_0_0_q0;
                shift_buffer_V_0_1_reg_754 <= line_buffer_Array_0_1_q0;
                shift_buffer_V_0_2_reg_761 <= line_buffer_Array_0_2_q0;
                shift_buffer_V_1_0_reg_719 <= shift_buffer_V_1_0_fu_160_p1;
                shift_buffer_V_1_1_reg_726 <= data_dout(31 downto 16);
                shift_buffer_V_1_2_reg_733 <= data_dout(47 downto 32);
                shift_buffer_V_1_3_reg_740 <= data_dout(63 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_780 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln80_reg_842 <= icmp_ln80_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_571_p2 = ap_const_lv1_0) and (icmp_ln76_reg_780 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln86_reg_851 <= icmp_ln86_fu_585_p2;
                sY_load_1_reg_846 <= ap_sig_allocacmp_sY_load_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_data_V_12 <= shift_buffer_V_1_0_reg_719;
                kernel_data_V_13 <= shift_buffer_V_1_1_reg_726;
                kernel_data_V_14 <= shift_buffer_V_1_2_reg_733;
                kernel_data_V_15 <= shift_buffer_V_1_3_reg_740;
                kernel_data_V_4 <= shift_buffer_V_0_0_reg_747;
                kernel_data_V_555 <= shift_buffer_V_0_1_reg_754;
                kernel_data_V_656 <= shift_buffer_V_0_2_reg_761;
                kernel_data_V_757 <= p_0_reg_768;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_708_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln55_1_fu_421_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln65_10_reg_836 <= select_ln65_10_fu_564_p3;
                select_ln65_1_reg_806 <= select_ln65_1_fu_474_p3;
                select_ln65_2_reg_818 <= select_ln65_2_fu_510_p3;
                select_ln65_3_reg_800 <= select_ln65_3_fu_456_p3;
                select_ln65_5_reg_812 <= select_ln65_5_fu_492_p3;
                select_ln65_7_reg_824 <= select_ln65_7_fu_528_p3;
                select_ln65_9_reg_830 <= select_ln65_9_fu_546_p3;
                select_ln65_reg_794 <= select_ln65_fu_438_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_708_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln55_1_reg_790) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln65_11_reg_871 <= select_ln65_11_fu_661_p3;
                select_ln65_4_reg_856 <= select_ln65_4_fu_613_p3;
                select_ln65_6_reg_861 <= select_ln65_6_fu_629_p3;
                select_ln65_8_reg_866 <= select_ln65_8_fu_645_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, icmp_ln109_fu_134_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln109_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln109_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln109_fu_128_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_117) + unsigned(ap_const_lv12_1));
    add_ln76_fu_154_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_pX_load_1) + unsigned(ap_const_lv32_1));
    add_ln80_fu_318_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_pY_load_1) + unsigned(ap_const_lv32_1));
    add_ln86_fu_674_p2 <= std_logic_vector(unsigned(sY_load_1_reg_846) + unsigned(select_ln86_fu_667_p3));
    add_ln91_fu_291_p2 <= std_logic_vector(unsigned(sX_load_reg_703) + unsigned(select_ln91_fu_284_p3));
    and_ln55_1_fu_421_p2 <= (icmp_ln55_1_fu_400_p2 and and_ln55_fu_416_p2);
    and_ln55_fu_416_p2 <= (icmp_ln55_3_reg_775 and icmp_ln55_2_fu_410_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(data_empty_n, res_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_predicate_op122_write_state6)
    begin
                ap_block_pp0_stage0_01001 <= (((res_full_n = ap_const_logic_0) and (ap_predicate_op122_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (data_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data_empty_n, res_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_predicate_op122_write_state6)
    begin
                ap_block_pp0_stage0_11001 <= (((res_full_n = ap_const_logic_0) and (ap_predicate_op122_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (data_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_empty_n, res_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_predicate_op122_write_state6)
    begin
                ap_block_pp0_stage0_subdone <= (((res_full_n = ap_const_logic_0) and (ap_predicate_op122_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (data_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (data_empty_n = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(res_full_n, ap_predicate_op122_write_state6)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((res_full_n = ap_const_logic_0) and (ap_predicate_op122_write_state6 = ap_const_boolean_1));
    end process;


    ap_condition_106_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_106 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_292_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_292 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_575_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln76_reg_780, ap_enable_reg_pp0_iter2)
    begin
                ap_condition_575 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln76_reg_780 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_629_assign_proc : process(ap_block_pp0_stage0, icmp_ln76_reg_780, ap_enable_reg_pp0_iter2)
    begin
                ap_condition_629 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln76_reg_780 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_637_assign_proc : process(icmp_ln76_reg_780_pp0_iter2_reg, icmp_ln80_reg_842, ap_enable_reg_pp0_iter3)
    begin
                ap_condition_637 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln80_reg_842 = ap_const_lv1_0) and (icmp_ln76_reg_780_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_condition_641_assign_proc : process(icmp_ln76_reg_780, icmp_ln80_fu_571_p2, ap_enable_reg_pp0_iter2)
    begin
                ap_condition_641 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln80_fu_571_p2 = ap_const_lv1_1) and (icmp_ln76_reg_780 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln109_fu_134_p2)
    begin
        if ((icmp_ln109_fu_134_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op122_write_state6_assign_proc : process(icmp_ln55_reg_708_pp0_iter3_reg, and_ln55_1_reg_790_pp0_iter3_reg)
    begin
                ap_predicate_op122_write_state6 <= ((ap_const_lv1_1 = and_ln55_1_reg_790_pp0_iter3_reg) and (icmp_ln55_reg_708_pp0_iter3_reg = ap_const_lv1_1));
    end process;

    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_pX_load_1_assign_proc : process(pX, add_ln76_reg_713, icmp_ln76_fu_274_p2, ap_condition_106)
    begin
        if ((ap_const_boolean_1 = ap_condition_106)) then
            if ((icmp_ln76_fu_274_p2 = ap_const_lv1_1)) then 
                ap_sig_allocacmp_pX_load_1 <= ap_const_lv32_0;
            elsif ((icmp_ln76_fu_274_p2 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_pX_load_1 <= add_ln76_reg_713;
            else 
                ap_sig_allocacmp_pX_load_1 <= pX;
            end if;
        else 
            ap_sig_allocacmp_pX_load_1 <= pX;
        end if; 
    end process;


    ap_sig_allocacmp_pY_load_1_assign_proc : process(pY, add_ln80_reg_784, icmp_ln80_fu_571_p2, ap_condition_629)
    begin
        if ((ap_const_boolean_1 = ap_condition_629)) then
            if ((icmp_ln80_fu_571_p2 = ap_const_lv1_1)) then 
                ap_sig_allocacmp_pY_load_1 <= ap_const_lv32_0;
            elsif ((icmp_ln80_fu_571_p2 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_pY_load_1 <= add_ln80_reg_784;
            else 
                ap_sig_allocacmp_pY_load_1 <= pY;
            end if;
        else 
            ap_sig_allocacmp_pY_load_1 <= pY;
        end if; 
    end process;


    ap_sig_allocacmp_sX_load_assign_proc : process(sX, icmp_ln76_fu_274_p2, add_ln91_fu_291_p2, ap_condition_106)
    begin
        if ((ap_const_boolean_1 = ap_condition_106)) then
            if ((icmp_ln76_fu_274_p2 = ap_const_lv1_1)) then 
                ap_sig_allocacmp_sX_load <= ap_const_lv32_0;
            elsif ((icmp_ln76_fu_274_p2 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_sX_load <= add_ln91_fu_291_p2;
            else 
                ap_sig_allocacmp_sX_load <= sX;
            end if;
        else 
            ap_sig_allocacmp_sX_load <= sX;
        end if; 
    end process;


    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_block_pp0_stage0, icmp_ln76_reg_780_pp0_iter2_reg, icmp_ln80_reg_842, ap_enable_reg_pp0_iter3, add_ln86_fu_674_p2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln80_reg_842 = ap_const_lv1_0) and (icmp_ln76_reg_780_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_load <= add_ln86_fu_674_p2;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    ap_sig_allocacmp_sY_load_1_assign_proc : process(sY, ap_block_pp0_stage0, icmp_ln76_reg_780_pp0_iter2_reg, icmp_ln80_reg_842, ap_enable_reg_pp0_iter3, add_ln86_fu_674_p2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln80_reg_842 = ap_const_lv1_0) and (icmp_ln76_reg_780_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_load_1 <= add_ln86_fu_674_p2;
        else 
            ap_sig_allocacmp_sY_load_1 <= sY;
        end if; 
    end process;


    data_blk_n_assign_proc : process(data_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_blk_n <= data_empty_n;
        else 
            data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_read <= ap_const_logic_1;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln109_fu_134_p2 <= "1" when (indvar_flatten_reg_117 = ap_const_lv12_F04) else "0";
    icmp_ln1496_10_fu_635_p2 <= "1" when (signed(select_ln65_2_reg_818) < signed(select_ln65_7_reg_824)) else "0";
    icmp_ln1496_11_fu_535_p2 <= "1" when (signed(kernel_data_V_757) < signed(p_0_reg_768)) else "0";
    icmp_ln1496_12_fu_553_p2 <= "1" when (signed(kernel_data_V_15) < signed(shift_buffer_V_1_3_reg_740)) else "0";
    icmp_ln1496_13_fu_651_p2 <= "1" when (signed(select_ln65_9_reg_830) < signed(select_ln65_10_reg_836)) else "0";
    icmp_ln1496_3_fu_445_p2 <= "1" when (signed(kernel_data_V_12) < signed(shift_buffer_V_1_0_reg_719)) else "0";
    icmp_ln1496_4_fu_603_p2 <= "1" when (signed(select_ln65_reg_794) < signed(select_ln65_3_reg_800)) else "0";
    icmp_ln1496_5_fu_463_p2 <= "1" when (signed(kernel_data_V_555) < signed(shift_buffer_V_0_1_reg_754)) else "0";
    icmp_ln1496_6_fu_481_p2 <= "1" when (signed(kernel_data_V_13) < signed(shift_buffer_V_1_1_reg_726)) else "0";
    icmp_ln1496_7_fu_619_p2 <= "1" when (signed(select_ln65_1_reg_806) < signed(select_ln65_5_reg_812)) else "0";
    icmp_ln1496_8_fu_499_p2 <= "1" when (signed(kernel_data_V_656) < signed(shift_buffer_V_0_2_reg_761)) else "0";
    icmp_ln1496_9_fu_517_p2 <= "1" when (signed(kernel_data_V_14) < signed(shift_buffer_V_1_2_reg_733)) else "0";
    icmp_ln1496_fu_427_p2 <= "1" when (signed(kernel_data_V_4) < signed(shift_buffer_V_0_0_reg_747)) else "0";
    icmp_ln55_1_fu_400_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_1) else "0";
    icmp_ln55_2_fu_410_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln55_3_fu_268_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln55_fu_144_p2 <= "1" when (ap_sig_allocacmp_sX_load = ap_const_lv32_1) else "0";
    icmp_ln76_fu_274_p2 <= "1" when (add_ln76_reg_713 = ap_const_lv32_3E) else "0";
    icmp_ln80_fu_571_p2 <= "1" when (add_ln80_reg_784 = ap_const_lv32_3E) else "0";
    icmp_ln86_fu_585_p2 <= "1" when (ap_sig_allocacmp_sY_load_1 = ap_const_lv32_1) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_Array_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_Array_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_Array_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_Array_0_1_d0 <= data_dout(31 downto 16);

    line_buffer_Array_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_Array_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_Array_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_Array_0_2_d0 <= data_dout(47 downto 32);

    line_buffer_Array_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_Array_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_Array_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_Array_0_3_d0 <= data_dout(63 downto 48);

    line_buffer_Array_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_Array_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_blk_n_assign_proc : process(res_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln55_reg_708_pp0_iter3_reg, and_ln55_1_reg_790_pp0_iter3_reg)
    begin
        if (((ap_const_lv1_1 = and_ln55_1_reg_790_pp0_iter3_reg) and (icmp_ln55_reg_708_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_blk_n <= res_full_n;
        else 
            res_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_din <= (((select_ln65_11_reg_871 & select_ln65_8_reg_866) & select_ln65_6_reg_861) & select_ln65_4_reg_856);

    res_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_predicate_op122_write_state6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op122_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_write <= ap_const_logic_1;
        else 
            res_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln65_10_fu_564_p3 <= 
        kernel_data_V_15 when (xor_ln1496_12_fu_558_p2(0) = '1') else 
        shift_buffer_V_1_3_reg_740;
    select_ln65_11_fu_661_p3 <= 
        select_ln65_9_reg_830 when (xor_ln1496_13_fu_655_p2(0) = '1') else 
        select_ln65_10_reg_836;
    select_ln65_1_fu_474_p3 <= 
        kernel_data_V_555 when (xor_ln1496_5_fu_468_p2(0) = '1') else 
        shift_buffer_V_0_1_reg_754;
    select_ln65_2_fu_510_p3 <= 
        kernel_data_V_656 when (xor_ln1496_8_fu_504_p2(0) = '1') else 
        shift_buffer_V_0_2_reg_761;
    select_ln65_3_fu_456_p3 <= 
        kernel_data_V_12 when (xor_ln1496_3_fu_450_p2(0) = '1') else 
        shift_buffer_V_1_0_reg_719;
    select_ln65_4_fu_613_p3 <= 
        select_ln65_reg_794 when (xor_ln1496_4_fu_607_p2(0) = '1') else 
        select_ln65_3_reg_800;
    select_ln65_5_fu_492_p3 <= 
        kernel_data_V_13 when (xor_ln1496_6_fu_486_p2(0) = '1') else 
        shift_buffer_V_1_1_reg_726;
    select_ln65_6_fu_629_p3 <= 
        select_ln65_1_reg_806 when (xor_ln1496_7_fu_623_p2(0) = '1') else 
        select_ln65_5_reg_812;
    select_ln65_7_fu_528_p3 <= 
        kernel_data_V_14 when (xor_ln1496_9_fu_522_p2(0) = '1') else 
        shift_buffer_V_1_2_reg_733;
    select_ln65_8_fu_645_p3 <= 
        select_ln65_2_reg_818 when (xor_ln1496_10_fu_639_p2(0) = '1') else 
        select_ln65_7_reg_824;
    select_ln65_9_fu_546_p3 <= 
        kernel_data_V_757 when (xor_ln1496_11_fu_540_p2(0) = '1') else 
        p_0_reg_768;
    select_ln65_fu_438_p3 <= 
        kernel_data_V_4 when (xor_ln1496_fu_432_p2(0) = '1') else 
        shift_buffer_V_0_0_reg_747;
    select_ln86_fu_667_p3 <= 
        ap_const_lv32_FFFFFFFF when (icmp_ln86_reg_851(0) = '1') else 
        ap_const_lv32_1;
    select_ln91_fu_284_p3 <= 
        ap_const_lv32_FFFFFFFF when (icmp_ln55_reg_708(0) = '1') else 
        ap_const_lv32_1;
    shift_buffer_V_1_0_fu_160_p1 <= data_dout(16 - 1 downto 0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1496_10_fu_639_p2 <= (icmp_ln1496_10_fu_635_p2 xor ap_const_lv1_1);
    xor_ln1496_11_fu_540_p2 <= (icmp_ln1496_11_fu_535_p2 xor ap_const_lv1_1);
    xor_ln1496_12_fu_558_p2 <= (icmp_ln1496_12_fu_553_p2 xor ap_const_lv1_1);
    xor_ln1496_13_fu_655_p2 <= (icmp_ln1496_13_fu_651_p2 xor ap_const_lv1_1);
    xor_ln1496_3_fu_450_p2 <= (icmp_ln1496_3_fu_445_p2 xor ap_const_lv1_1);
    xor_ln1496_4_fu_607_p2 <= (icmp_ln1496_4_fu_603_p2 xor ap_const_lv1_1);
    xor_ln1496_5_fu_468_p2 <= (icmp_ln1496_5_fu_463_p2 xor ap_const_lv1_1);
    xor_ln1496_6_fu_486_p2 <= (icmp_ln1496_6_fu_481_p2 xor ap_const_lv1_1);
    xor_ln1496_7_fu_623_p2 <= (icmp_ln1496_7_fu_619_p2 xor ap_const_lv1_1);
    xor_ln1496_8_fu_504_p2 <= (icmp_ln1496_8_fu_499_p2 xor ap_const_lv1_1);
    xor_ln1496_9_fu_522_p2 <= (icmp_ln1496_9_fu_517_p2 xor ap_const_lv1_1);
    xor_ln1496_fu_432_p2 <= (icmp_ln1496_fu_427_p2 xor ap_const_lv1_1);
end behav;
