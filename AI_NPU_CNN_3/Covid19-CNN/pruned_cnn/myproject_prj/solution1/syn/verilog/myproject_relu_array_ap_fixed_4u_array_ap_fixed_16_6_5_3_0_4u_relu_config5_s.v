// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_relu_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_dout,
        data_empty_n,
        data_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] data_dout;
input   data_empty_n;
output   data_read;
output  [63:0] res_din;
input   res_full_n;
output   res_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_read;
reg res_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln41_reg_244;
reg    res_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln41_reg_244_pp0_iter2_reg;
reg   [11:0] i_reg_75;
wire   [11:0] i_1_fu_86_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln41_fu_92_p2;
reg   [0:0] icmp_ln41_reg_244_pp0_iter1_reg;
wire   [15:0] tmp_36_fu_98_p1;
reg   [15:0] tmp_36_reg_248;
wire   [14:0] trunc_ln155_fu_102_p1;
reg   [14:0] trunc_ln155_reg_253;
reg   [15:0] tmp_37_reg_258;
reg   [14:0] trunc_ln155_6_reg_263;
reg   [15:0] tmp_38_reg_268;
reg   [14:0] trunc_ln155_7_reg_273;
reg   [15:0] tmp_39_reg_278;
reg   [14:0] trunc_ln155_8_reg_283;
wire   [14:0] out_data_12_fu_171_p3;
reg   [14:0] out_data_12_reg_288;
wire   [14:0] out_data_14_fu_183_p3;
reg   [14:0] out_data_14_reg_293;
wire   [14:0] out_data_16_fu_195_p3;
reg   [14:0] out_data_16_reg_298;
wire   [14:0] out_data_18_fu_207_p3;
reg   [14:0] out_data_18_reg_303;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1494_fu_166_p2;
wire   [0:0] icmp_ln1494_6_fu_178_p2;
wire   [0:0] icmp_ln1494_7_fu_190_p2;
wire   [0:0] icmp_ln1494_8_fu_202_p2;
wire   [15:0] zext_ln45_6_fu_220_p1;
wire   [15:0] zext_ln45_5_fu_217_p1;
wire   [15:0] zext_ln45_fu_214_p1;
wire   [62:0] tmp_fu_223_p5;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_92_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_75 <= i_1_fu_86_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_75 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln41_reg_244 <= icmp_ln41_fu_92_p2;
        icmp_ln41_reg_244_pp0_iter1_reg <= icmp_ln41_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln41_reg_244_pp0_iter2_reg <= icmp_ln41_reg_244_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_244_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_data_12_reg_288 <= out_data_12_fu_171_p3;
        out_data_14_reg_293 <= out_data_14_fu_183_p3;
        out_data_16_reg_298 <= out_data_16_fu_195_p3;
        out_data_18_reg_303 <= out_data_18_fu_207_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_244 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_36_reg_248 <= tmp_36_fu_98_p1;
        tmp_37_reg_258 <= {{data_dout[31:16]}};
        tmp_38_reg_268 <= {{data_dout[47:32]}};
        tmp_39_reg_278 <= {{data_dout[63:48]}};
        trunc_ln155_6_reg_263 <= {{data_dout[30:16]}};
        trunc_ln155_7_reg_273 <= {{data_dout[46:32]}};
        trunc_ln155_8_reg_283 <= {{data_dout[62:48]}};
        trunc_ln155_reg_253 <= trunc_ln155_fu_102_p1;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_92_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_244 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_blk_n = data_empty_n;
    end else begin
        data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_244 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_read = 1'b1;
    end else begin
        data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_244_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_244_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_write = 1'b1;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln41_fu_92_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((icmp_ln41_fu_92_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln41_reg_244_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (res_full_n == 1'b0)) | ((icmp_ln41_reg_244 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln41_reg_244_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (res_full_n == 1'b0)) | ((icmp_ln41_reg_244 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln41_reg_244_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (res_full_n == 1'b0)) | ((icmp_ln41_reg_244 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln41_reg_244 == 1'd0) & (data_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln41_reg_244_pp0_iter2_reg == 1'd0) & (res_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_1_fu_86_p2 = (i_reg_75 + 12'd1);

assign icmp_ln1494_6_fu_178_p2 = (($signed(tmp_37_reg_258) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_190_p2 = (($signed(tmp_38_reg_268) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_202_p2 = (($signed(tmp_39_reg_278) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_166_p2 = (($signed(tmp_36_reg_248) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_92_p2 = ((i_reg_75 == 12'd3844) ? 1'b1 : 1'b0);

assign out_data_12_fu_171_p3 = ((icmp_ln1494_fu_166_p2[0:0] == 1'b1) ? trunc_ln155_reg_253 : 15'd0);

assign out_data_14_fu_183_p3 = ((icmp_ln1494_6_fu_178_p2[0:0] == 1'b1) ? trunc_ln155_6_reg_263 : 15'd0);

assign out_data_16_fu_195_p3 = ((icmp_ln1494_7_fu_190_p2[0:0] == 1'b1) ? trunc_ln155_7_reg_273 : 15'd0);

assign out_data_18_fu_207_p3 = ((icmp_ln1494_8_fu_202_p2[0:0] == 1'b1) ? trunc_ln155_8_reg_283 : 15'd0);

assign res_din = tmp_fu_223_p5;

assign start_out = real_start;

assign tmp_36_fu_98_p1 = data_dout[15:0];

assign tmp_fu_223_p5 = {{{{out_data_18_reg_303}, {zext_ln45_6_fu_220_p1}}, {zext_ln45_5_fu_217_p1}}, {zext_ln45_fu_214_p1}};

assign trunc_ln155_fu_102_p1 = data_dout[14:0];

assign zext_ln45_5_fu_217_p1 = out_data_14_reg_293;

assign zext_ln45_6_fu_220_p1 = out_data_16_reg_298;

assign zext_ln45_fu_214_p1 = out_data_12_reg_288;

endmodule //myproject_relu_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_relu_config5_s
