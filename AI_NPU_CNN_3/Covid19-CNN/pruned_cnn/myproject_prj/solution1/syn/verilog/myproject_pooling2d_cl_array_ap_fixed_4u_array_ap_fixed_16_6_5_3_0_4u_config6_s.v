// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_dout,
        data_empty_n,
        data_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] data_dout;
input   data_empty_n;
output   data_read;
output  [63:0] res_din;
input   res_full_n;
output   res_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_read;
reg res_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] sY;
reg   [31:0] pY;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [15:0] kernel_data_V_4;
reg   [15:0] kernel_data_V_555;
reg   [15:0] kernel_data_V_656;
reg   [15:0] kernel_data_V_757;
reg   [15:0] kernel_data_V_12;
reg   [15:0] kernel_data_V_13;
reg   [15:0] kernel_data_V_14;
reg   [15:0] kernel_data_V_15;
reg    line_buffer_Array_0_0_ce0;
reg    line_buffer_Array_0_0_we0;
wire   [15:0] line_buffer_Array_0_0_q0;
reg    line_buffer_Array_0_1_ce0;
reg    line_buffer_Array_0_1_we0;
wire   [15:0] line_buffer_Array_0_1_d0;
wire   [15:0] line_buffer_Array_0_1_q0;
reg    line_buffer_Array_0_2_ce0;
reg    line_buffer_Array_0_2_we0;
wire   [15:0] line_buffer_Array_0_2_d0;
wire   [15:0] line_buffer_Array_0_2_q0;
reg    line_buffer_Array_0_3_ce0;
reg    line_buffer_Array_0_3_we0;
wire   [15:0] line_buffer_Array_0_3_d0;
wire   [15:0] line_buffer_Array_0_3_q0;
reg    data_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    res_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln55_reg_708;
reg   [0:0] icmp_ln55_reg_708_pp0_iter3_reg;
reg   [0:0] and_ln55_1_reg_790;
reg   [0:0] and_ln55_1_reg_790_pp0_iter3_reg;
reg   [11:0] indvar_flatten_reg_117;
wire   [11:0] add_ln109_fu_128_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_predicate_op122_write_state6;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln109_fu_134_p2;
reg   [31:0] sX_load_reg_703;
wire   [0:0] icmp_ln55_fu_144_p2;
reg   [0:0] icmp_ln55_reg_708_pp0_iter1_reg;
reg   [0:0] icmp_ln55_reg_708_pp0_iter2_reg;
wire   [31:0] add_ln76_fu_154_p2;
reg   [31:0] add_ln76_reg_713;
wire   [15:0] shift_buffer_V_1_0_fu_160_p1;
reg   [15:0] shift_buffer_V_1_0_reg_719;
reg   [15:0] shift_buffer_V_1_1_reg_726;
reg   [15:0] shift_buffer_V_1_2_reg_733;
reg   [15:0] shift_buffer_V_1_3_reg_740;
reg   [15:0] shift_buffer_V_0_0_reg_747;
reg   [15:0] shift_buffer_V_0_1_reg_754;
reg   [15:0] shift_buffer_V_0_2_reg_761;
reg   [15:0] p_0_reg_768;
wire   [0:0] icmp_ln55_3_fu_268_p2;
reg   [0:0] icmp_ln55_3_reg_775;
wire   [0:0] icmp_ln76_fu_274_p2;
reg   [0:0] icmp_ln76_reg_780;
reg   [0:0] icmp_ln76_reg_780_pp0_iter2_reg;
wire   [31:0] add_ln80_fu_318_p2;
reg   [31:0] add_ln80_reg_784;
wire   [0:0] and_ln55_1_fu_421_p2;
wire   [15:0] select_ln65_fu_438_p3;
reg   [15:0] select_ln65_reg_794;
wire   [15:0] select_ln65_3_fu_456_p3;
reg   [15:0] select_ln65_3_reg_800;
wire   [15:0] select_ln65_1_fu_474_p3;
reg   [15:0] select_ln65_1_reg_806;
wire   [15:0] select_ln65_5_fu_492_p3;
reg   [15:0] select_ln65_5_reg_812;
wire   [15:0] select_ln65_2_fu_510_p3;
reg   [15:0] select_ln65_2_reg_818;
wire   [15:0] select_ln65_7_fu_528_p3;
reg   [15:0] select_ln65_7_reg_824;
wire   [15:0] select_ln65_9_fu_546_p3;
reg   [15:0] select_ln65_9_reg_830;
wire   [15:0] select_ln65_10_fu_564_p3;
reg   [15:0] select_ln65_10_reg_836;
wire   [0:0] icmp_ln80_fu_571_p2;
reg   [0:0] icmp_ln80_reg_842;
reg   [31:0] sY_load_1_reg_846;
wire   [0:0] icmp_ln86_fu_585_p2;
reg   [0:0] icmp_ln86_reg_851;
wire   [15:0] select_ln65_4_fu_613_p3;
reg   [15:0] select_ln65_4_reg_856;
wire   [15:0] select_ln65_6_fu_629_p3;
reg   [15:0] select_ln65_6_reg_861;
wire   [15:0] select_ln65_8_fu_645_p3;
reg   [15:0] select_ln65_8_reg_866;
wire   [15:0] select_ln65_11_fu_661_p3;
reg   [15:0] select_ln65_11_reg_871;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] add_ln86_fu_674_p2;
reg   [31:0] ap_sig_allocacmp_sY_load;
reg   [31:0] ap_sig_allocacmp_sY_load_1;
reg   [31:0] ap_sig_allocacmp_pY_load_1;
reg   [31:0] ap_sig_allocacmp_pX_load_1;
wire   [31:0] add_ln91_fu_291_p2;
reg   [31:0] ap_sig_allocacmp_sX_load;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] select_ln91_fu_284_p3;
wire   [0:0] icmp_ln55_2_fu_410_p2;
wire   [0:0] and_ln55_fu_416_p2;
wire   [0:0] icmp_ln55_1_fu_400_p2;
wire   [0:0] icmp_ln1496_fu_427_p2;
wire   [0:0] xor_ln1496_fu_432_p2;
wire   [0:0] icmp_ln1496_3_fu_445_p2;
wire   [0:0] xor_ln1496_3_fu_450_p2;
wire   [0:0] icmp_ln1496_5_fu_463_p2;
wire   [0:0] xor_ln1496_5_fu_468_p2;
wire   [0:0] icmp_ln1496_6_fu_481_p2;
wire   [0:0] xor_ln1496_6_fu_486_p2;
wire   [0:0] icmp_ln1496_8_fu_499_p2;
wire   [0:0] xor_ln1496_8_fu_504_p2;
wire   [0:0] icmp_ln1496_9_fu_517_p2;
wire   [0:0] xor_ln1496_9_fu_522_p2;
wire   [0:0] icmp_ln1496_11_fu_535_p2;
wire   [0:0] xor_ln1496_11_fu_540_p2;
wire   [0:0] icmp_ln1496_12_fu_553_p2;
wire   [0:0] xor_ln1496_12_fu_558_p2;
wire   [0:0] icmp_ln1496_4_fu_603_p2;
wire   [0:0] xor_ln1496_4_fu_607_p2;
wire   [0:0] icmp_ln1496_7_fu_619_p2;
wire   [0:0] xor_ln1496_7_fu_623_p2;
wire   [0:0] icmp_ln1496_10_fu_635_p2;
wire   [0:0] xor_ln1496_10_fu_639_p2;
wire   [0:0] icmp_ln1496_13_fu_651_p2;
wire   [0:0] xor_ln1496_13_fu_655_p2;
wire   [31:0] select_ln86_fu_667_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_106;
reg    ap_condition_629;
reg    ap_condition_292;
reg    ap_condition_575;
reg    ap_condition_637;
reg    ap_condition_641;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 sY = 32'd0;
#0 pY = 32'd0;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 kernel_data_V_4 = 16'd0;
#0 kernel_data_V_555 = 16'd0;
#0 kernel_data_V_656 = 16'd0;
#0 kernel_data_V_757 = 16'd0;
#0 kernel_data_V_12 = 16'd0;
#0 kernel_data_V_13 = 16'd0;
#0 kernel_data_V_14 = 16'd0;
#0 kernel_data_V_15 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi #(
    .DataWidth( 16 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
line_buffer_Array_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd61),
    .ce0(line_buffer_Array_0_0_ce0),
    .we0(line_buffer_Array_0_0_we0),
    .d0(shift_buffer_V_1_0_fu_160_p1),
    .q0(line_buffer_Array_0_0_q0)
);

myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi #(
    .DataWidth( 16 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
line_buffer_Array_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd61),
    .ce0(line_buffer_Array_0_1_ce0),
    .we0(line_buffer_Array_0_1_we0),
    .d0(line_buffer_Array_0_1_d0),
    .q0(line_buffer_Array_0_1_q0)
);

myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi #(
    .DataWidth( 16 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
line_buffer_Array_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd61),
    .ce0(line_buffer_Array_0_2_ce0),
    .we0(line_buffer_Array_0_2_we0),
    .d0(line_buffer_Array_0_2_d0),
    .q0(line_buffer_Array_0_2_q0)
);

myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s_line_buhbi #(
    .DataWidth( 16 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
line_buffer_Array_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd61),
    .ce0(line_buffer_Array_0_3_ce0),
    .we0(line_buffer_Array_0_3_we0),
    .d0(line_buffer_Array_0_3_d0),
    .q0(line_buffer_Array_0_3_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_117 <= add_ln109_fu_128_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_117 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_292)) begin
        if ((icmp_ln76_fu_274_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln76_fu_274_p2 == 1'd0)) begin
            pX <= add_ln76_reg_713;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_575)) begin
        if ((icmp_ln80_fu_571_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln80_fu_571_p2 == 1'd0)) begin
            pY <= add_ln80_reg_784;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_292)) begin
        if ((icmp_ln76_fu_274_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln76_fu_274_p2 == 1'd0)) begin
            sX <= add_ln91_fu_291_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_641)) begin
            sY <= 32'd0;
        end else if ((1'b1 == ap_condition_637)) begin
            sY <= add_ln86_fu_674_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_fu_134_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln76_reg_713 <= add_ln76_fu_154_p2;
        icmp_ln55_reg_708 <= icmp_ln55_fu_144_p2;
        sX_load_reg_703 <= ap_sig_allocacmp_sX_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_274_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln80_reg_784 <= add_ln80_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_708_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln55_1_reg_790 <= and_ln55_1_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln55_1_reg_790_pp0_iter3_reg <= and_ln55_1_reg_790;
        icmp_ln55_reg_708_pp0_iter2_reg <= icmp_ln55_reg_708_pp0_iter1_reg;
        icmp_ln55_reg_708_pp0_iter3_reg <= icmp_ln55_reg_708_pp0_iter2_reg;
        icmp_ln76_reg_780_pp0_iter2_reg <= icmp_ln76_reg_780;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_708 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln55_3_reg_775 <= icmp_ln55_3_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln55_reg_708_pp0_iter1_reg <= icmp_ln55_reg_708;
        icmp_ln76_reg_780 <= icmp_ln76_fu_274_p2;
        p_0_reg_768 <= line_buffer_Array_0_3_q0;
        shift_buffer_V_0_0_reg_747 <= line_buffer_Array_0_0_q0;
        shift_buffer_V_0_1_reg_754 <= line_buffer_Array_0_1_q0;
        shift_buffer_V_0_2_reg_761 <= line_buffer_Array_0_2_q0;
        shift_buffer_V_1_0_reg_719 <= shift_buffer_V_1_0_fu_160_p1;
        shift_buffer_V_1_1_reg_726 <= {{data_dout[31:16]}};
        shift_buffer_V_1_2_reg_733 <= {{data_dout[47:32]}};
        shift_buffer_V_1_3_reg_740 <= {{data_dout[63:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_reg_780 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln80_reg_842 <= icmp_ln80_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_571_p2 == 1'd0) & (icmp_ln76_reg_780 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln86_reg_851 <= icmp_ln86_fu_585_p2;
        sY_load_1_reg_846 <= ap_sig_allocacmp_sY_load_1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_data_V_12 <= shift_buffer_V_1_0_reg_719;
        kernel_data_V_13 <= shift_buffer_V_1_1_reg_726;
        kernel_data_V_14 <= shift_buffer_V_1_2_reg_733;
        kernel_data_V_15 <= shift_buffer_V_1_3_reg_740;
        kernel_data_V_4 <= shift_buffer_V_0_0_reg_747;
        kernel_data_V_555 <= shift_buffer_V_0_1_reg_754;
        kernel_data_V_656 <= shift_buffer_V_0_2_reg_761;
        kernel_data_V_757 <= p_0_reg_768;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_708_pp0_iter1_reg == 1'd1) & (1'd1 == and_ln55_1_fu_421_p2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln65_10_reg_836 <= select_ln65_10_fu_564_p3;
        select_ln65_1_reg_806 <= select_ln65_1_fu_474_p3;
        select_ln65_2_reg_818 <= select_ln65_2_fu_510_p3;
        select_ln65_3_reg_800 <= select_ln65_3_fu_456_p3;
        select_ln65_5_reg_812 <= select_ln65_5_fu_492_p3;
        select_ln65_7_reg_824 <= select_ln65_7_fu_528_p3;
        select_ln65_9_reg_830 <= select_ln65_9_fu_546_p3;
        select_ln65_reg_794 <= select_ln65_fu_438_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_708_pp0_iter2_reg == 1'd1) & (1'd1 == and_ln55_1_reg_790) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln65_11_reg_871 <= select_ln65_11_fu_661_p3;
        select_ln65_4_reg_856 <= select_ln65_4_fu_613_p3;
        select_ln65_6_reg_861 <= select_ln65_6_fu_629_p3;
        select_ln65_8_reg_866 <= select_ln65_8_fu_645_p3;
    end
end

always @ (*) begin
    if ((icmp_ln109_fu_134_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_106)) begin
        if ((icmp_ln76_fu_274_p2 == 1'd1)) begin
            ap_sig_allocacmp_pX_load_1 = 32'd0;
        end else if ((icmp_ln76_fu_274_p2 == 1'd0)) begin
            ap_sig_allocacmp_pX_load_1 = add_ln76_reg_713;
        end else begin
            ap_sig_allocacmp_pX_load_1 = pX;
        end
    end else begin
        ap_sig_allocacmp_pX_load_1 = pX;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_629)) begin
        if ((icmp_ln80_fu_571_p2 == 1'd1)) begin
            ap_sig_allocacmp_pY_load_1 = 32'd0;
        end else if ((icmp_ln80_fu_571_p2 == 1'd0)) begin
            ap_sig_allocacmp_pY_load_1 = add_ln80_reg_784;
        end else begin
            ap_sig_allocacmp_pY_load_1 = pY;
        end
    end else begin
        ap_sig_allocacmp_pY_load_1 = pY;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_106)) begin
        if ((icmp_ln76_fu_274_p2 == 1'd1)) begin
            ap_sig_allocacmp_sX_load = 32'd0;
        end else if ((icmp_ln76_fu_274_p2 == 1'd0)) begin
            ap_sig_allocacmp_sX_load = add_ln91_fu_291_p2;
        end else begin
            ap_sig_allocacmp_sX_load = sX;
        end
    end else begin
        ap_sig_allocacmp_sX_load = sX;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln80_reg_842 == 1'd0) & (icmp_ln76_reg_780_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sY_load = add_ln86_fu_674_p2;
    end else begin
        ap_sig_allocacmp_sY_load = sY;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln80_reg_842 == 1'd0) & (icmp_ln76_reg_780_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sY_load_1 = add_ln86_fu_674_p2;
    end else begin
        ap_sig_allocacmp_sY_load_1 = sY;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_blk_n = data_empty_n;
    end else begin
        data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_read = 1'b1;
    end else begin
        data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_Array_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_Array_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_Array_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_Array_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_Array_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_Array_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_Array_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_Array_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln55_1_reg_790_pp0_iter3_reg) & (icmp_ln55_reg_708_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op122_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_write = 1'b1;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln109_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln109_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_128_p2 = (indvar_flatten_reg_117 + 12'd1);

assign add_ln76_fu_154_p2 = (ap_sig_allocacmp_pX_load_1 + 32'd1);

assign add_ln80_fu_318_p2 = (ap_sig_allocacmp_pY_load_1 + 32'd1);

assign add_ln86_fu_674_p2 = (sY_load_1_reg_846 + select_ln86_fu_667_p3);

assign add_ln91_fu_291_p2 = (sX_load_reg_703 + select_ln91_fu_284_p3);

assign and_ln55_1_fu_421_p2 = (icmp_ln55_1_fu_400_p2 & and_ln55_fu_416_p2);

assign and_ln55_fu_416_p2 = (icmp_ln55_3_reg_775 & icmp_ln55_2_fu_410_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((res_full_n == 1'b0) & (ap_predicate_op122_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((res_full_n == 1'b0) & (ap_predicate_op122_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((res_full_n == 1'b0) & (ap_predicate_op122_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (data_empty_n == 1'b0);
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((res_full_n == 1'b0) & (ap_predicate_op122_write_state6 == 1'b1));
end

always @ (*) begin
    ap_condition_106 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_292 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_575 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln76_reg_780 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_629 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln76_reg_780 == 1'd1) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_637 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln80_reg_842 == 1'd0) & (icmp_ln76_reg_780_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_condition_641 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln80_fu_571_p2 == 1'd1) & (icmp_ln76_reg_780 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op122_write_state6 = ((1'd1 == and_ln55_1_reg_790_pp0_iter3_reg) & (icmp_ln55_reg_708_pp0_iter3_reg == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln109_fu_134_p2 = ((indvar_flatten_reg_117 == 12'd3844) ? 1'b1 : 1'b0);

assign icmp_ln1496_10_fu_635_p2 = (($signed(select_ln65_2_reg_818) < $signed(select_ln65_7_reg_824)) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_535_p2 = (($signed(kernel_data_V_757) < $signed(p_0_reg_768)) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_553_p2 = (($signed(kernel_data_V_15) < $signed(shift_buffer_V_1_3_reg_740)) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_651_p2 = (($signed(select_ln65_9_reg_830) < $signed(select_ln65_10_reg_836)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_445_p2 = (($signed(kernel_data_V_12) < $signed(shift_buffer_V_1_0_reg_719)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_603_p2 = (($signed(select_ln65_reg_794) < $signed(select_ln65_3_reg_800)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_463_p2 = (($signed(kernel_data_V_555) < $signed(shift_buffer_V_0_1_reg_754)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_481_p2 = (($signed(kernel_data_V_13) < $signed(shift_buffer_V_1_1_reg_726)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_619_p2 = (($signed(select_ln65_1_reg_806) < $signed(select_ln65_5_reg_812)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_499_p2 = (($signed(kernel_data_V_656) < $signed(shift_buffer_V_0_2_reg_761)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_517_p2 = (($signed(kernel_data_V_14) < $signed(shift_buffer_V_1_2_reg_733)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_427_p2 = (($signed(kernel_data_V_4) < $signed(shift_buffer_V_0_0_reg_747)) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_400_p2 = ((ap_sig_allocacmp_sY_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln55_2_fu_410_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_3_fu_268_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_144_p2 = ((ap_sig_allocacmp_sX_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_274_p2 = ((add_ln76_reg_713 == 32'd62) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_571_p2 = ((add_ln80_reg_784 == 32'd62) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_585_p2 = ((ap_sig_allocacmp_sY_load_1 == 32'd1) ? 1'b1 : 1'b0);

assign line_buffer_Array_0_1_d0 = {{data_dout[31:16]}};

assign line_buffer_Array_0_2_d0 = {{data_dout[47:32]}};

assign line_buffer_Array_0_3_d0 = {{data_dout[63:48]}};

assign res_din = {{{{select_ln65_11_reg_871}, {select_ln65_8_reg_866}}, {select_ln65_6_reg_861}}, {select_ln65_4_reg_856}};

assign select_ln65_10_fu_564_p3 = ((xor_ln1496_12_fu_558_p2[0:0] == 1'b1) ? kernel_data_V_15 : shift_buffer_V_1_3_reg_740);

assign select_ln65_11_fu_661_p3 = ((xor_ln1496_13_fu_655_p2[0:0] == 1'b1) ? select_ln65_9_reg_830 : select_ln65_10_reg_836);

assign select_ln65_1_fu_474_p3 = ((xor_ln1496_5_fu_468_p2[0:0] == 1'b1) ? kernel_data_V_555 : shift_buffer_V_0_1_reg_754);

assign select_ln65_2_fu_510_p3 = ((xor_ln1496_8_fu_504_p2[0:0] == 1'b1) ? kernel_data_V_656 : shift_buffer_V_0_2_reg_761);

assign select_ln65_3_fu_456_p3 = ((xor_ln1496_3_fu_450_p2[0:0] == 1'b1) ? kernel_data_V_12 : shift_buffer_V_1_0_reg_719);

assign select_ln65_4_fu_613_p3 = ((xor_ln1496_4_fu_607_p2[0:0] == 1'b1) ? select_ln65_reg_794 : select_ln65_3_reg_800);

assign select_ln65_5_fu_492_p3 = ((xor_ln1496_6_fu_486_p2[0:0] == 1'b1) ? kernel_data_V_13 : shift_buffer_V_1_1_reg_726);

assign select_ln65_6_fu_629_p3 = ((xor_ln1496_7_fu_623_p2[0:0] == 1'b1) ? select_ln65_1_reg_806 : select_ln65_5_reg_812);

assign select_ln65_7_fu_528_p3 = ((xor_ln1496_9_fu_522_p2[0:0] == 1'b1) ? kernel_data_V_14 : shift_buffer_V_1_2_reg_733);

assign select_ln65_8_fu_645_p3 = ((xor_ln1496_10_fu_639_p2[0:0] == 1'b1) ? select_ln65_2_reg_818 : select_ln65_7_reg_824);

assign select_ln65_9_fu_546_p3 = ((xor_ln1496_11_fu_540_p2[0:0] == 1'b1) ? kernel_data_V_757 : p_0_reg_768);

assign select_ln65_fu_438_p3 = ((xor_ln1496_fu_432_p2[0:0] == 1'b1) ? kernel_data_V_4 : shift_buffer_V_0_0_reg_747);

assign select_ln86_fu_667_p3 = ((icmp_ln86_reg_851[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign select_ln91_fu_284_p3 = ((icmp_ln55_reg_708[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign shift_buffer_V_1_0_fu_160_p1 = data_dout[15:0];

assign start_out = real_start;

assign xor_ln1496_10_fu_639_p2 = (icmp_ln1496_10_fu_635_p2 ^ 1'd1);

assign xor_ln1496_11_fu_540_p2 = (icmp_ln1496_11_fu_535_p2 ^ 1'd1);

assign xor_ln1496_12_fu_558_p2 = (icmp_ln1496_12_fu_553_p2 ^ 1'd1);

assign xor_ln1496_13_fu_655_p2 = (icmp_ln1496_13_fu_651_p2 ^ 1'd1);

assign xor_ln1496_3_fu_450_p2 = (icmp_ln1496_3_fu_445_p2 ^ 1'd1);

assign xor_ln1496_4_fu_607_p2 = (icmp_ln1496_4_fu_603_p2 ^ 1'd1);

assign xor_ln1496_5_fu_468_p2 = (icmp_ln1496_5_fu_463_p2 ^ 1'd1);

assign xor_ln1496_6_fu_486_p2 = (icmp_ln1496_6_fu_481_p2 ^ 1'd1);

assign xor_ln1496_7_fu_623_p2 = (icmp_ln1496_7_fu_619_p2 ^ 1'd1);

assign xor_ln1496_8_fu_504_p2 = (icmp_ln1496_8_fu_499_p2 ^ 1'd1);

assign xor_ln1496_9_fu_522_p2 = (icmp_ln1496_9_fu_517_p2 ^ 1'd1);

assign xor_ln1496_fu_432_p2 = (icmp_ln1496_fu_427_p2 ^ 1'd1);

endmodule //myproject_pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config6_s
