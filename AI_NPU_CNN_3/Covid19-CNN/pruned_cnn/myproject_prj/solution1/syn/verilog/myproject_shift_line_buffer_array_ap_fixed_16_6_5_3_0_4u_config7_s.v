// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        kernel_data_V_7_4_i,
        kernel_data_V_7_4_o,
        kernel_data_V_7_4_o_ap_vld,
        kernel_data_V_7_0,
        kernel_data_V_7_0_ap_vld,
        kernel_data_V_7_5_i,
        kernel_data_V_7_5_o,
        kernel_data_V_7_5_o_ap_vld,
        kernel_data_V_7_1,
        kernel_data_V_7_1_ap_vld,
        kernel_data_V_7_6_i,
        kernel_data_V_7_6_o,
        kernel_data_V_7_6_o_ap_vld,
        kernel_data_V_7_2,
        kernel_data_V_7_2_ap_vld,
        kernel_data_V_7_7_i,
        kernel_data_V_7_7_o,
        kernel_data_V_7_7_o_ap_vld,
        kernel_data_V_7_3,
        kernel_data_V_7_3_ap_vld,
        kernel_data_V_7_17_i,
        kernel_data_V_7_17_o,
        kernel_data_V_7_17_o_ap_vld,
        kernel_data_V_7_13,
        kernel_data_V_7_13_ap_vld,
        kernel_data_V_7_18_i,
        kernel_data_V_7_18_o,
        kernel_data_V_7_18_o_ap_vld,
        kernel_data_V_7_14,
        kernel_data_V_7_14_ap_vld,
        kernel_data_V_7_19_i,
        kernel_data_V_7_19_o,
        kernel_data_V_7_19_o_ap_vld,
        kernel_data_V_7_15,
        kernel_data_V_7_15_ap_vld,
        kernel_data_V_7_28_i,
        kernel_data_V_7_28_o,
        kernel_data_V_7_28_o_ap_vld,
        kernel_data_V_7_24,
        kernel_data_V_7_24_ap_vld,
        kernel_data_V_7_29_i,
        kernel_data_V_7_29_o,
        kernel_data_V_7_29_o_ap_vld,
        kernel_data_V_7_25,
        kernel_data_V_7_25_ap_vld,
        kernel_data_V_7_30_i,
        kernel_data_V_7_30_o,
        kernel_data_V_7_30_o_ap_vld,
        kernel_data_V_7_26,
        kernel_data_V_7_26_ap_vld,
        kernel_data_V_7_31_i,
        kernel_data_V_7_31_o,
        kernel_data_V_7_31_o_ap_vld,
        kernel_data_V_7_27,
        kernel_data_V_7_27_ap_vld,
        kernel_data_V_7_8_i,
        kernel_data_V_7_8_o,
        kernel_data_V_7_8_o_ap_vld,
        kernel_data_V_7_9_i,
        kernel_data_V_7_9_o,
        kernel_data_V_7_9_o_ap_vld,
        kernel_data_V_7_10_i,
        kernel_data_V_7_10_o,
        kernel_data_V_7_10_o_ap_vld,
        kernel_data_V_7_11_i,
        kernel_data_V_7_11_o,
        kernel_data_V_7_11_o_ap_vld,
        kernel_data_V_7_20_i,
        kernel_data_V_7_20_o,
        kernel_data_V_7_20_o_ap_vld,
        kernel_data_V_7_16,
        kernel_data_V_7_16_ap_vld,
        kernel_data_V_7_21_i,
        kernel_data_V_7_21_o,
        kernel_data_V_7_21_o_ap_vld,
        kernel_data_V_7_22_i,
        kernel_data_V_7_22_o,
        kernel_data_V_7_22_o_ap_vld,
        kernel_data_V_7_23_i,
        kernel_data_V_7_23_o,
        kernel_data_V_7_23_o_ap_vld,
        kernel_data_V_7_32_i,
        kernel_data_V_7_32_o,
        kernel_data_V_7_32_o_ap_vld,
        kernel_data_V_7_33_i,
        kernel_data_V_7_33_o,
        kernel_data_V_7_33_o_ap_vld,
        kernel_data_V_7_34_i,
        kernel_data_V_7_34_o,
        kernel_data_V_7_34_o_ap_vld,
        kernel_data_V_7_35_i,
        kernel_data_V_7_35_o,
        kernel_data_V_7_35_o_ap_vld,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] kernel_data_V_7_4_i;
output  [15:0] kernel_data_V_7_4_o;
output   kernel_data_V_7_4_o_ap_vld;
output  [15:0] kernel_data_V_7_0;
output   kernel_data_V_7_0_ap_vld;
input  [15:0] kernel_data_V_7_5_i;
output  [15:0] kernel_data_V_7_5_o;
output   kernel_data_V_7_5_o_ap_vld;
output  [15:0] kernel_data_V_7_1;
output   kernel_data_V_7_1_ap_vld;
input  [15:0] kernel_data_V_7_6_i;
output  [15:0] kernel_data_V_7_6_o;
output   kernel_data_V_7_6_o_ap_vld;
output  [15:0] kernel_data_V_7_2;
output   kernel_data_V_7_2_ap_vld;
input  [15:0] kernel_data_V_7_7_i;
output  [15:0] kernel_data_V_7_7_o;
output   kernel_data_V_7_7_o_ap_vld;
output  [15:0] kernel_data_V_7_3;
output   kernel_data_V_7_3_ap_vld;
input  [15:0] kernel_data_V_7_17_i;
output  [15:0] kernel_data_V_7_17_o;
output   kernel_data_V_7_17_o_ap_vld;
output  [15:0] kernel_data_V_7_13;
output   kernel_data_V_7_13_ap_vld;
input  [15:0] kernel_data_V_7_18_i;
output  [15:0] kernel_data_V_7_18_o;
output   kernel_data_V_7_18_o_ap_vld;
output  [15:0] kernel_data_V_7_14;
output   kernel_data_V_7_14_ap_vld;
input  [15:0] kernel_data_V_7_19_i;
output  [15:0] kernel_data_V_7_19_o;
output   kernel_data_V_7_19_o_ap_vld;
output  [15:0] kernel_data_V_7_15;
output   kernel_data_V_7_15_ap_vld;
input  [15:0] kernel_data_V_7_28_i;
output  [15:0] kernel_data_V_7_28_o;
output   kernel_data_V_7_28_o_ap_vld;
output  [15:0] kernel_data_V_7_24;
output   kernel_data_V_7_24_ap_vld;
input  [15:0] kernel_data_V_7_29_i;
output  [15:0] kernel_data_V_7_29_o;
output   kernel_data_V_7_29_o_ap_vld;
output  [15:0] kernel_data_V_7_25;
output   kernel_data_V_7_25_ap_vld;
input  [15:0] kernel_data_V_7_30_i;
output  [15:0] kernel_data_V_7_30_o;
output   kernel_data_V_7_30_o_ap_vld;
output  [15:0] kernel_data_V_7_26;
output   kernel_data_V_7_26_ap_vld;
input  [15:0] kernel_data_V_7_31_i;
output  [15:0] kernel_data_V_7_31_o;
output   kernel_data_V_7_31_o_ap_vld;
output  [15:0] kernel_data_V_7_27;
output   kernel_data_V_7_27_ap_vld;
input  [15:0] kernel_data_V_7_8_i;
output  [15:0] kernel_data_V_7_8_o;
output   kernel_data_V_7_8_o_ap_vld;
input  [15:0] kernel_data_V_7_9_i;
output  [15:0] kernel_data_V_7_9_o;
output   kernel_data_V_7_9_o_ap_vld;
input  [15:0] kernel_data_V_7_10_i;
output  [15:0] kernel_data_V_7_10_o;
output   kernel_data_V_7_10_o_ap_vld;
input  [15:0] kernel_data_V_7_11_i;
output  [15:0] kernel_data_V_7_11_o;
output   kernel_data_V_7_11_o_ap_vld;
input  [15:0] kernel_data_V_7_20_i;
output  [15:0] kernel_data_V_7_20_o;
output   kernel_data_V_7_20_o_ap_vld;
output  [15:0] kernel_data_V_7_16;
output   kernel_data_V_7_16_ap_vld;
input  [15:0] kernel_data_V_7_21_i;
output  [15:0] kernel_data_V_7_21_o;
output   kernel_data_V_7_21_o_ap_vld;
input  [15:0] kernel_data_V_7_22_i;
output  [15:0] kernel_data_V_7_22_o;
output   kernel_data_V_7_22_o_ap_vld;
input  [15:0] kernel_data_V_7_23_i;
output  [15:0] kernel_data_V_7_23_o;
output   kernel_data_V_7_23_o_ap_vld;
input  [15:0] kernel_data_V_7_32_i;
output  [15:0] kernel_data_V_7_32_o;
output   kernel_data_V_7_32_o_ap_vld;
input  [15:0] kernel_data_V_7_33_i;
output  [15:0] kernel_data_V_7_33_o;
output   kernel_data_V_7_33_o_ap_vld;
input  [15:0] kernel_data_V_7_34_i;
output  [15:0] kernel_data_V_7_34_o;
output   kernel_data_V_7_34_o_ap_vld;
input  [15:0] kernel_data_V_7_35_i;
output  [15:0] kernel_data_V_7_35_o;
output   kernel_data_V_7_35_o_ap_vld;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] kernel_data_V_7_4_o;
reg kernel_data_V_7_4_o_ap_vld;
reg kernel_data_V_7_0_ap_vld;
reg[15:0] kernel_data_V_7_5_o;
reg kernel_data_V_7_5_o_ap_vld;
reg kernel_data_V_7_1_ap_vld;
reg[15:0] kernel_data_V_7_6_o;
reg kernel_data_V_7_6_o_ap_vld;
reg kernel_data_V_7_2_ap_vld;
reg[15:0] kernel_data_V_7_7_o;
reg kernel_data_V_7_7_o_ap_vld;
reg kernel_data_V_7_3_ap_vld;
reg[15:0] kernel_data_V_7_17_o;
reg kernel_data_V_7_17_o_ap_vld;
reg kernel_data_V_7_13_ap_vld;
reg[15:0] kernel_data_V_7_18_o;
reg kernel_data_V_7_18_o_ap_vld;
reg kernel_data_V_7_14_ap_vld;
reg[15:0] kernel_data_V_7_19_o;
reg kernel_data_V_7_19_o_ap_vld;
reg kernel_data_V_7_15_ap_vld;
reg[15:0] kernel_data_V_7_28_o;
reg kernel_data_V_7_28_o_ap_vld;
reg kernel_data_V_7_24_ap_vld;
reg[15:0] kernel_data_V_7_29_o;
reg kernel_data_V_7_29_o_ap_vld;
reg kernel_data_V_7_25_ap_vld;
reg[15:0] kernel_data_V_7_30_o;
reg kernel_data_V_7_30_o_ap_vld;
reg kernel_data_V_7_26_ap_vld;
reg[15:0] kernel_data_V_7_31_o;
reg kernel_data_V_7_31_o_ap_vld;
reg kernel_data_V_7_27_ap_vld;
reg[15:0] kernel_data_V_7_8_o;
reg kernel_data_V_7_8_o_ap_vld;
reg[15:0] kernel_data_V_7_9_o;
reg kernel_data_V_7_9_o_ap_vld;
reg[15:0] kernel_data_V_7_10_o;
reg kernel_data_V_7_10_o_ap_vld;
reg[15:0] kernel_data_V_7_11_o;
reg kernel_data_V_7_11_o_ap_vld;
reg[15:0] kernel_data_V_7_20_o;
reg kernel_data_V_7_20_o_ap_vld;
reg kernel_data_V_7_16_ap_vld;
reg[15:0] kernel_data_V_7_21_o;
reg kernel_data_V_7_21_o_ap_vld;
reg[15:0] kernel_data_V_7_22_o;
reg kernel_data_V_7_22_o_ap_vld;
reg[15:0] kernel_data_V_7_23_o;
reg kernel_data_V_7_23_o_ap_vld;
reg[15:0] kernel_data_V_7_32_o;
reg kernel_data_V_7_32_o_ap_vld;
reg[15:0] kernel_data_V_7_33_o;
reg kernel_data_V_7_33_o_ap_vld;
reg[15:0] kernel_data_V_7_34_o;
reg kernel_data_V_7_34_o_ap_vld;
reg[15:0] kernel_data_V_7_35_o;
reg kernel_data_V_7_35_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    line_buffer_Array_7_0_0_ce0;
reg    line_buffer_Array_7_0_0_we0;
wire   [15:0] line_buffer_Array_7_0_0_q0;
reg    line_buffer_Array_7_1_0_ce0;
reg    line_buffer_Array_7_1_0_we0;
wire   [15:0] line_buffer_Array_7_1_0_q0;
reg    line_buffer_Array_7_0_1_ce0;
reg    line_buffer_Array_7_0_1_we0;
wire   [15:0] line_buffer_Array_7_0_1_q0;
reg    line_buffer_Array_7_1_1_ce0;
reg    line_buffer_Array_7_1_1_we0;
wire   [15:0] line_buffer_Array_7_1_1_q0;
reg    line_buffer_Array_7_0_2_ce0;
reg    line_buffer_Array_7_0_2_we0;
wire   [15:0] line_buffer_Array_7_0_2_q0;
reg    line_buffer_Array_7_1_2_ce0;
reg    line_buffer_Array_7_1_2_we0;
wire   [15:0] line_buffer_Array_7_1_2_q0;
reg    line_buffer_Array_7_0_3_ce0;
reg    line_buffer_Array_7_0_3_we0;
wire   [15:0] line_buffer_Array_7_0_3_q0;
reg    line_buffer_Array_7_1_3_ce0;
reg    line_buffer_Array_7_1_3_we0;
wire   [15:0] line_buffer_Array_7_1_3_q0;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s_line_buffer_Array_7_lbW #(
    .DataWidth( 16 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
line_buffer_Array_7_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd30),
    .ce0(line_buffer_Array_7_0_0_ce0),
    .we0(line_buffer_Array_7_0_0_we0),
    .d0(p_read),
    .q0(line_buffer_Array_7_0_0_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s_line_buffer_Array_7_lbW #(
    .DataWidth( 16 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
line_buffer_Array_7_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd30),
    .ce0(line_buffer_Array_7_1_0_ce0),
    .we0(line_buffer_Array_7_1_0_we0),
    .d0(line_buffer_Array_7_0_0_q0),
    .q0(line_buffer_Array_7_1_0_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s_line_buffer_Array_7_lbW #(
    .DataWidth( 16 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
line_buffer_Array_7_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd30),
    .ce0(line_buffer_Array_7_0_1_ce0),
    .we0(line_buffer_Array_7_0_1_we0),
    .d0(p_read1),
    .q0(line_buffer_Array_7_0_1_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s_line_buffer_Array_7_lbW #(
    .DataWidth( 16 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
line_buffer_Array_7_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd30),
    .ce0(line_buffer_Array_7_1_1_ce0),
    .we0(line_buffer_Array_7_1_1_we0),
    .d0(line_buffer_Array_7_0_1_q0),
    .q0(line_buffer_Array_7_1_1_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s_line_buffer_Array_7_lbW #(
    .DataWidth( 16 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
line_buffer_Array_7_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd30),
    .ce0(line_buffer_Array_7_0_2_ce0),
    .we0(line_buffer_Array_7_0_2_we0),
    .d0(p_read2),
    .q0(line_buffer_Array_7_0_2_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s_line_buffer_Array_7_lbW #(
    .DataWidth( 16 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
line_buffer_Array_7_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd30),
    .ce0(line_buffer_Array_7_1_2_ce0),
    .we0(line_buffer_Array_7_1_2_we0),
    .d0(line_buffer_Array_7_0_2_q0),
    .q0(line_buffer_Array_7_1_2_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s_line_buffer_Array_7_lbW #(
    .DataWidth( 16 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
line_buffer_Array_7_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd30),
    .ce0(line_buffer_Array_7_0_3_ce0),
    .we0(line_buffer_Array_7_0_3_we0),
    .d0(p_read3),
    .q0(line_buffer_Array_7_0_3_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s_line_buffer_Array_7_lbW #(
    .DataWidth( 16 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
line_buffer_Array_7_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd30),
    .ce0(line_buffer_Array_7_1_3_ce0),
    .we0(line_buffer_Array_7_1_3_we0),
    .d0(line_buffer_Array_7_0_3_q0),
    .q0(line_buffer_Array_7_1_3_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_0_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_10_o = line_buffer_Array_7_1_2_q0;
    end else begin
        kernel_data_V_7_10_o = kernel_data_V_7_10_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_10_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_10_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_11_o = line_buffer_Array_7_1_3_q0;
    end else begin
        kernel_data_V_7_11_o = kernel_data_V_7_11_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_11_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_11_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_13_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_14_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_15_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_16_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_17_o = kernel_data_V_7_21_i;
    end else begin
        kernel_data_V_7_17_o = kernel_data_V_7_17_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_17_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_17_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_18_o = kernel_data_V_7_22_i;
    end else begin
        kernel_data_V_7_18_o = kernel_data_V_7_18_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_18_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_18_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_19_o = kernel_data_V_7_23_i;
    end else begin
        kernel_data_V_7_19_o = kernel_data_V_7_19_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_19_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_19_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_1_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_20_o = line_buffer_Array_7_0_0_q0;
    end else begin
        kernel_data_V_7_20_o = kernel_data_V_7_20_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_20_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_20_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_21_o = line_buffer_Array_7_0_1_q0;
    end else begin
        kernel_data_V_7_21_o = kernel_data_V_7_21_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_21_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_21_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_22_o = line_buffer_Array_7_0_2_q0;
    end else begin
        kernel_data_V_7_22_o = kernel_data_V_7_22_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_22_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_22_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_23_o = line_buffer_Array_7_0_3_q0;
    end else begin
        kernel_data_V_7_23_o = kernel_data_V_7_23_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_23_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_23_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_24_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_24_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_25_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_25_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_26_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_26_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_27_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_27_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_28_o = kernel_data_V_7_32_i;
    end else begin
        kernel_data_V_7_28_o = kernel_data_V_7_28_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_28_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_28_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_29_o = kernel_data_V_7_33_i;
    end else begin
        kernel_data_V_7_29_o = kernel_data_V_7_29_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_29_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_29_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_2_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_30_o = kernel_data_V_7_34_i;
    end else begin
        kernel_data_V_7_30_o = kernel_data_V_7_30_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_30_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_30_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_31_o = kernel_data_V_7_35_i;
    end else begin
        kernel_data_V_7_31_o = kernel_data_V_7_31_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_31_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_31_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_32_o = p_read;
    end else begin
        kernel_data_V_7_32_o = kernel_data_V_7_32_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_32_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_32_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_33_o = p_read1;
    end else begin
        kernel_data_V_7_33_o = kernel_data_V_7_33_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_33_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_33_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_34_o = p_read2;
    end else begin
        kernel_data_V_7_34_o = kernel_data_V_7_34_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_34_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_34_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_35_o = p_read3;
    end else begin
        kernel_data_V_7_35_o = kernel_data_V_7_35_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_35_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_35_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_3_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_4_o = kernel_data_V_7_8_i;
    end else begin
        kernel_data_V_7_4_o = kernel_data_V_7_4_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_4_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_5_o = kernel_data_V_7_9_i;
    end else begin
        kernel_data_V_7_5_o = kernel_data_V_7_5_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_5_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_6_o = kernel_data_V_7_10_i;
    end else begin
        kernel_data_V_7_6_o = kernel_data_V_7_6_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_6_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_7_o = kernel_data_V_7_11_i;
    end else begin
        kernel_data_V_7_7_o = kernel_data_V_7_7_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_7_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_8_o = line_buffer_Array_7_1_0_q0;
    end else begin
        kernel_data_V_7_8_o = kernel_data_V_7_8_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_8_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_8_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_7_9_o = line_buffer_Array_7_1_1_q0;
    end else begin
        kernel_data_V_7_9_o = kernel_data_V_7_9_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        kernel_data_V_7_9_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_7_9_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_7_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_7_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_7_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_7_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_7_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_7_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_7_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_7_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_1_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_7_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_1_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_7_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_1_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_7_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_1_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_7_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_1_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_7_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_1_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_7_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_1_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_7_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        line_buffer_Array_7_1_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_7_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign kernel_data_V_7_0 = kernel_data_V_7_4_i;

assign kernel_data_V_7_1 = kernel_data_V_7_5_i;

assign kernel_data_V_7_13 = kernel_data_V_7_17_i;

assign kernel_data_V_7_14 = kernel_data_V_7_18_i;

assign kernel_data_V_7_15 = kernel_data_V_7_19_i;

assign kernel_data_V_7_16 = kernel_data_V_7_20_i;

assign kernel_data_V_7_2 = kernel_data_V_7_6_i;

assign kernel_data_V_7_24 = kernel_data_V_7_28_i;

assign kernel_data_V_7_25 = kernel_data_V_7_29_i;

assign kernel_data_V_7_26 = kernel_data_V_7_30_i;

assign kernel_data_V_7_27 = kernel_data_V_7_31_i;

assign kernel_data_V_7_3 = kernel_data_V_7_7_i;

endmodule //myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_4u_config7_s
