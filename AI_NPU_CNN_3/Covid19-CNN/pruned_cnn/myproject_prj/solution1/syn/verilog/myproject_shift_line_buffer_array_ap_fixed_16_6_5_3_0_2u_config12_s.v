// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        kernel_data_V_5_2_i,
        kernel_data_V_5_2_o,
        kernel_data_V_5_2_o_ap_vld,
        kernel_data_V_5_0,
        kernel_data_V_5_0_ap_vld,
        kernel_data_V_5_8_i,
        kernel_data_V_5_8_o,
        kernel_data_V_5_8_o_ap_vld,
        kernel_data_V_5_6,
        kernel_data_V_5_6_ap_vld,
        kernel_data_V_5_9_i,
        kernel_data_V_5_9_o,
        kernel_data_V_5_9_o_ap_vld,
        kernel_data_V_5_7,
        kernel_data_V_5_7_ap_vld,
        kernel_data_V_5_14_i,
        kernel_data_V_5_14_o,
        kernel_data_V_5_14_o_ap_vld,
        kernel_data_V_5_12,
        kernel_data_V_5_12_ap_vld,
        kernel_data_V_5_4_i,
        kernel_data_V_5_4_o,
        kernel_data_V_5_4_o_ap_vld,
        kernel_data_V_5_5_i,
        kernel_data_V_5_5_o,
        kernel_data_V_5_5_o_ap_vld,
        kernel_data_V_5_3,
        kernel_data_V_5_3_ap_vld,
        kernel_data_V_5_10_i,
        kernel_data_V_5_10_o,
        kernel_data_V_5_10_o_ap_vld,
        kernel_data_V_5_11_i,
        kernel_data_V_5_11_o,
        kernel_data_V_5_11_o_ap_vld,
        kernel_data_V_5_16_i,
        kernel_data_V_5_16_o,
        kernel_data_V_5_16_o_ap_vld,
        kernel_data_V_5_15,
        kernel_data_V_5_15_ap_vld,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] kernel_data_V_5_2_i;
output  [15:0] kernel_data_V_5_2_o;
output   kernel_data_V_5_2_o_ap_vld;
output  [15:0] kernel_data_V_5_0;
output   kernel_data_V_5_0_ap_vld;
input  [15:0] kernel_data_V_5_8_i;
output  [15:0] kernel_data_V_5_8_o;
output   kernel_data_V_5_8_o_ap_vld;
output  [15:0] kernel_data_V_5_6;
output   kernel_data_V_5_6_ap_vld;
input  [15:0] kernel_data_V_5_9_i;
output  [15:0] kernel_data_V_5_9_o;
output   kernel_data_V_5_9_o_ap_vld;
output  [15:0] kernel_data_V_5_7;
output   kernel_data_V_5_7_ap_vld;
input  [15:0] kernel_data_V_5_14_i;
output  [15:0] kernel_data_V_5_14_o;
output   kernel_data_V_5_14_o_ap_vld;
output  [15:0] kernel_data_V_5_12;
output   kernel_data_V_5_12_ap_vld;
input  [15:0] kernel_data_V_5_4_i;
output  [15:0] kernel_data_V_5_4_o;
output   kernel_data_V_5_4_o_ap_vld;
input  [15:0] kernel_data_V_5_5_i;
output  [15:0] kernel_data_V_5_5_o;
output   kernel_data_V_5_5_o_ap_vld;
output  [15:0] kernel_data_V_5_3;
output   kernel_data_V_5_3_ap_vld;
input  [15:0] kernel_data_V_5_10_i;
output  [15:0] kernel_data_V_5_10_o;
output   kernel_data_V_5_10_o_ap_vld;
input  [15:0] kernel_data_V_5_11_i;
output  [15:0] kernel_data_V_5_11_o;
output   kernel_data_V_5_11_o_ap_vld;
input  [15:0] kernel_data_V_5_16_i;
output  [15:0] kernel_data_V_5_16_o;
output   kernel_data_V_5_16_o_ap_vld;
output  [15:0] kernel_data_V_5_15;
output   kernel_data_V_5_15_ap_vld;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] kernel_data_V_5_2_o;
reg kernel_data_V_5_2_o_ap_vld;
reg kernel_data_V_5_0_ap_vld;
reg[15:0] kernel_data_V_5_8_o;
reg kernel_data_V_5_8_o_ap_vld;
reg kernel_data_V_5_6_ap_vld;
reg[15:0] kernel_data_V_5_9_o;
reg kernel_data_V_5_9_o_ap_vld;
reg kernel_data_V_5_7_ap_vld;
reg[15:0] kernel_data_V_5_14_o;
reg kernel_data_V_5_14_o_ap_vld;
reg kernel_data_V_5_12_ap_vld;
reg[15:0] kernel_data_V_5_4_o;
reg kernel_data_V_5_4_o_ap_vld;
reg[15:0] kernel_data_V_5_5_o;
reg kernel_data_V_5_5_o_ap_vld;
reg kernel_data_V_5_3_ap_vld;
reg[15:0] kernel_data_V_5_10_o;
reg kernel_data_V_5_10_o_ap_vld;
reg[15:0] kernel_data_V_5_11_o;
reg kernel_data_V_5_11_o_ap_vld;
reg[15:0] kernel_data_V_5_16_o;
reg kernel_data_V_5_16_o_ap_vld;
reg kernel_data_V_5_15_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] kernel_data_V_5_17;
reg    line_buffer_Array_5_0_0_ce0;
reg    line_buffer_Array_5_0_0_we0;
wire   [15:0] line_buffer_Array_5_0_0_q0;
reg    line_buffer_Array_5_1_0_ce0;
reg    line_buffer_Array_5_1_0_we0;
wire   [15:0] line_buffer_Array_5_1_0_q0;
reg    line_buffer_Array_5_0_1_ce0;
reg    line_buffer_Array_5_0_1_we0;
wire   [15:0] line_buffer_Array_5_0_1_q0;
reg    line_buffer_Array_5_1_1_ce0;
reg    line_buffer_Array_5_1_1_we0;
wire   [15:0] line_buffer_Array_5_1_1_q0;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 kernel_data_V_5_17 = 16'd0;
end

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy #(
    .DataWidth( 16 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
line_buffer_Array_5_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(line_buffer_Array_5_0_0_ce0),
    .we0(line_buffer_Array_5_0_0_we0),
    .d0(p_read),
    .q0(line_buffer_Array_5_0_0_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy #(
    .DataWidth( 16 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
line_buffer_Array_5_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(line_buffer_Array_5_1_0_ce0),
    .we0(line_buffer_Array_5_1_0_we0),
    .d0(line_buffer_Array_5_0_0_q0),
    .q0(line_buffer_Array_5_1_0_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy #(
    .DataWidth( 16 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
line_buffer_Array_5_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(line_buffer_Array_5_0_1_ce0),
    .we0(line_buffer_Array_5_0_1_we0),
    .d0(p_read1),
    .q0(line_buffer_Array_5_0_1_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy #(
    .DataWidth( 16 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
line_buffer_Array_5_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd13),
    .ce0(line_buffer_Array_5_1_1_ce0),
    .we0(line_buffer_Array_5_1_1_we0),
    .d0(line_buffer_Array_5_0_1_q0),
    .q0(line_buffer_Array_5_1_1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_17 <= p_read1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_0_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_10_o = line_buffer_Array_5_0_0_q0;
    end else begin
        kernel_data_V_5_10_o = kernel_data_V_5_10_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_10_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_10_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_11_o = line_buffer_Array_5_0_1_q0;
    end else begin
        kernel_data_V_5_11_o = kernel_data_V_5_11_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_11_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_11_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_12_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_14_o = kernel_data_V_5_16_i;
    end else begin
        kernel_data_V_5_14_o = kernel_data_V_5_14_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_14_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_14_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_15_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_16_o = p_read;
    end else begin
        kernel_data_V_5_16_o = kernel_data_V_5_16_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_16_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_16_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_2_o = kernel_data_V_5_4_i;
    end else begin
        kernel_data_V_5_2_o = kernel_data_V_5_2_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_2_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_3_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_4_o = line_buffer_Array_5_1_0_q0;
    end else begin
        kernel_data_V_5_4_o = kernel_data_V_5_4_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_4_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_5_o = line_buffer_Array_5_1_1_q0;
    end else begin
        kernel_data_V_5_5_o = kernel_data_V_5_5_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_5_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_6_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_7_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_8_o = kernel_data_V_5_10_i;
    end else begin
        kernel_data_V_5_8_o = kernel_data_V_5_8_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_8_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_8_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_5_9_o = kernel_data_V_5_11_i;
    end else begin
        kernel_data_V_5_9_o = kernel_data_V_5_9_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_5_9_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_5_9_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_5_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_5_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_5_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_5_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_5_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_5_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_5_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_5_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_5_1_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_5_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_5_1_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_5_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_5_1_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_5_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_5_1_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_5_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign kernel_data_V_5_0 = kernel_data_V_5_2_i;

assign kernel_data_V_5_12 = kernel_data_V_5_14_i;

assign kernel_data_V_5_15 = kernel_data_V_5_17;

assign kernel_data_V_5_3 = kernel_data_V_5_5_i;

assign kernel_data_V_5_6 = kernel_data_V_5_8_i;

assign kernel_data_V_5_7 = kernel_data_V_5_9_i;

endmodule //myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s
