-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_24u_relu_config25_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_dout : IN STD_LOGIC_VECTOR (383 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    res_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    res_full_n : IN STD_LOGIC;
    res_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_24u_relu_config25_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001110";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101110";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_10E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001110";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_11E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011110";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_12E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101110";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_13E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111110";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_14E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001110";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_15E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011110";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_16E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101110";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_17E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_blk_n : STD_LOGIC;
    signal res_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_66_fu_177_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_reg_1058 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_fu_181_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln155_reg_1063 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_67_reg_1068 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_s_reg_1073 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_68_reg_1078 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_1_reg_1083 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_69_reg_1088 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_2_reg_1093 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_70_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_3_reg_1103 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_71_reg_1108 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_4_reg_1113 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_72_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_5_reg_1123 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_73_reg_1128 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_6_reg_1133 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_74_reg_1138 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_7_reg_1143 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_75_reg_1148 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_8_reg_1153 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_76_reg_1158 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_9_reg_1163 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_77_reg_1168 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_10_reg_1173 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_78_reg_1178 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_11_reg_1183 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_79_reg_1188 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_12_reg_1193 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_80_reg_1198 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_13_reg_1203 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_81_reg_1208 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_14_reg_1213 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_82_reg_1218 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_15_reg_1223 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_83_reg_1228 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_16_reg_1233 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_84_reg_1238 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_17_reg_1243 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_85_reg_1248 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_18_reg_1253 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_86_reg_1258 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_19_reg_1263 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_87_reg_1268 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_20_reg_1273 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_88_reg_1278 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_21_reg_1283 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_89_reg_1288 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln155_22_reg_1293 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_25_fu_650_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_25_reg_1298 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_data_27_fu_662_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_27_reg_1303 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_29_fu_674_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_29_reg_1308 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_31_fu_686_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_31_reg_1313 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_33_fu_698_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_33_reg_1318 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_35_fu_710_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_35_reg_1323 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_37_fu_722_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_37_reg_1328 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_39_fu_734_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_39_reg_1333 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_41_fu_746_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_41_reg_1338 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_43_fu_758_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_43_reg_1343 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_45_fu_770_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_45_reg_1348 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_47_fu_782_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_47_reg_1353 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_49_fu_794_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_49_reg_1358 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_51_fu_806_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_51_reg_1363 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_53_fu_818_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_53_reg_1368 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_55_fu_830_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_55_reg_1373 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_57_fu_842_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_57_reg_1378 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_59_fu_854_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_59_reg_1383 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_61_fu_866_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_61_reg_1388 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_63_fu_878_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_63_reg_1393 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_65_fu_890_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_65_reg_1398 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_67_fu_902_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_67_reg_1403 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_69_fu_914_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_69_reg_1408 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_71_fu_926_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_71_reg_1413 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln1494_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_11_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_12_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_13_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_14_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_15_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_16_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_17_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_18_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_19_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_20_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_21_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_22_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_23_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_24_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_25_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_26_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_27_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_28_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_29_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_30_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_31_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_32_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_33_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_28_fu_999_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_27_fu_996_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_26_fu_993_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_25_fu_990_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_24_fu_987_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_23_fu_984_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_22_fu_981_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_21_fu_978_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_20_fu_975_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_19_fu_972_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_18_fu_969_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_17_fu_966_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_16_fu_963_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_15_fu_960_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_14_fu_957_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_13_fu_954_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_12_fu_951_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_11_fu_948_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_10_fu_945_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_9_fu_942_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_8_fu_939_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_7_fu_936_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_933_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_1002_p25 : STD_LOGIC_VECTOR (382 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                out_data_25_reg_1298 <= out_data_25_fu_650_p3;
                out_data_27_reg_1303 <= out_data_27_fu_662_p3;
                out_data_29_reg_1308 <= out_data_29_fu_674_p3;
                out_data_31_reg_1313 <= out_data_31_fu_686_p3;
                out_data_33_reg_1318 <= out_data_33_fu_698_p3;
                out_data_35_reg_1323 <= out_data_35_fu_710_p3;
                out_data_37_reg_1328 <= out_data_37_fu_722_p3;
                out_data_39_reg_1333 <= out_data_39_fu_734_p3;
                out_data_41_reg_1338 <= out_data_41_fu_746_p3;
                out_data_43_reg_1343 <= out_data_43_fu_758_p3;
                out_data_45_reg_1348 <= out_data_45_fu_770_p3;
                out_data_47_reg_1353 <= out_data_47_fu_782_p3;
                out_data_49_reg_1358 <= out_data_49_fu_794_p3;
                out_data_51_reg_1363 <= out_data_51_fu_806_p3;
                out_data_53_reg_1368 <= out_data_53_fu_818_p3;
                out_data_55_reg_1373 <= out_data_55_fu_830_p3;
                out_data_57_reg_1378 <= out_data_57_fu_842_p3;
                out_data_59_reg_1383 <= out_data_59_fu_854_p3;
                out_data_61_reg_1388 <= out_data_61_fu_866_p3;
                out_data_63_reg_1393 <= out_data_63_fu_878_p3;
                out_data_65_reg_1398 <= out_data_65_fu_890_p3;
                out_data_67_reg_1403 <= out_data_67_fu_902_p3;
                out_data_69_reg_1408 <= out_data_69_fu_914_p3;
                out_data_71_reg_1413 <= out_data_71_fu_926_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_66_reg_1058 <= tmp_66_fu_177_p1;
                tmp_67_reg_1068 <= data_dout(31 downto 16);
                tmp_68_reg_1078 <= data_dout(47 downto 32);
                tmp_69_reg_1088 <= data_dout(63 downto 48);
                tmp_70_reg_1098 <= data_dout(79 downto 64);
                tmp_71_reg_1108 <= data_dout(95 downto 80);
                tmp_72_reg_1118 <= data_dout(111 downto 96);
                tmp_73_reg_1128 <= data_dout(127 downto 112);
                tmp_74_reg_1138 <= data_dout(143 downto 128);
                tmp_75_reg_1148 <= data_dout(159 downto 144);
                tmp_76_reg_1158 <= data_dout(175 downto 160);
                tmp_77_reg_1168 <= data_dout(191 downto 176);
                tmp_78_reg_1178 <= data_dout(207 downto 192);
                tmp_79_reg_1188 <= data_dout(223 downto 208);
                tmp_80_reg_1198 <= data_dout(239 downto 224);
                tmp_81_reg_1208 <= data_dout(255 downto 240);
                tmp_82_reg_1218 <= data_dout(271 downto 256);
                tmp_83_reg_1228 <= data_dout(287 downto 272);
                tmp_84_reg_1238 <= data_dout(303 downto 288);
                tmp_85_reg_1248 <= data_dout(319 downto 304);
                tmp_86_reg_1258 <= data_dout(335 downto 320);
                tmp_87_reg_1268 <= data_dout(351 downto 336);
                tmp_88_reg_1278 <= data_dout(367 downto 352);
                tmp_89_reg_1288 <= data_dout(383 downto 368);
                trunc_ln155_10_reg_1173 <= data_dout(190 downto 176);
                trunc_ln155_11_reg_1183 <= data_dout(206 downto 192);
                trunc_ln155_12_reg_1193 <= data_dout(222 downto 208);
                trunc_ln155_13_reg_1203 <= data_dout(238 downto 224);
                trunc_ln155_14_reg_1213 <= data_dout(254 downto 240);
                trunc_ln155_15_reg_1223 <= data_dout(270 downto 256);
                trunc_ln155_16_reg_1233 <= data_dout(286 downto 272);
                trunc_ln155_17_reg_1243 <= data_dout(302 downto 288);
                trunc_ln155_18_reg_1253 <= data_dout(318 downto 304);
                trunc_ln155_19_reg_1263 <= data_dout(334 downto 320);
                trunc_ln155_1_reg_1083 <= data_dout(46 downto 32);
                trunc_ln155_20_reg_1273 <= data_dout(350 downto 336);
                trunc_ln155_21_reg_1283 <= data_dout(366 downto 352);
                trunc_ln155_22_reg_1293 <= data_dout(382 downto 368);
                trunc_ln155_2_reg_1093 <= data_dout(62 downto 48);
                trunc_ln155_3_reg_1103 <= data_dout(78 downto 64);
                trunc_ln155_4_reg_1113 <= data_dout(94 downto 80);
                trunc_ln155_5_reg_1123 <= data_dout(110 downto 96);
                trunc_ln155_6_reg_1133 <= data_dout(126 downto 112);
                trunc_ln155_7_reg_1143 <= data_dout(142 downto 128);
                trunc_ln155_8_reg_1153 <= data_dout(158 downto 144);
                trunc_ln155_9_reg_1163 <= data_dout(174 downto 160);
                trunc_ln155_reg_1063 <= trunc_ln155_fu_181_p1;
                trunc_ln155_s_reg_1073 <= data_dout(30 downto 16);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_empty_n, res_full_n, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, data_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, res_full_n, ap_CS_fsm_state3)
    begin
        if (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_blk_n <= data_empty_n;
        else 
            data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_read <= ap_const_logic_1;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_11_fu_657_p2 <= "1" when (signed(tmp_67_reg_1068) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_12_fu_669_p2 <= "1" when (signed(tmp_68_reg_1078) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_13_fu_681_p2 <= "1" when (signed(tmp_69_reg_1088) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_14_fu_693_p2 <= "1" when (signed(tmp_70_reg_1098) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_15_fu_705_p2 <= "1" when (signed(tmp_71_reg_1108) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_16_fu_717_p2 <= "1" when (signed(tmp_72_reg_1118) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_17_fu_729_p2 <= "1" when (signed(tmp_73_reg_1128) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_18_fu_741_p2 <= "1" when (signed(tmp_74_reg_1138) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_19_fu_753_p2 <= "1" when (signed(tmp_75_reg_1148) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_20_fu_765_p2 <= "1" when (signed(tmp_76_reg_1158) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_21_fu_777_p2 <= "1" when (signed(tmp_77_reg_1168) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_22_fu_789_p2 <= "1" when (signed(tmp_78_reg_1178) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_23_fu_801_p2 <= "1" when (signed(tmp_79_reg_1188) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_24_fu_813_p2 <= "1" when (signed(tmp_80_reg_1198) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_25_fu_825_p2 <= "1" when (signed(tmp_81_reg_1208) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_26_fu_837_p2 <= "1" when (signed(tmp_82_reg_1218) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_27_fu_849_p2 <= "1" when (signed(tmp_83_reg_1228) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_28_fu_861_p2 <= "1" when (signed(tmp_84_reg_1238) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_29_fu_873_p2 <= "1" when (signed(tmp_85_reg_1248) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_30_fu_885_p2 <= "1" when (signed(tmp_86_reg_1258) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_31_fu_897_p2 <= "1" when (signed(tmp_87_reg_1268) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_32_fu_909_p2 <= "1" when (signed(tmp_88_reg_1278) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_33_fu_921_p2 <= "1" when (signed(tmp_89_reg_1288) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_fu_645_p2 <= "1" when (signed(tmp_66_reg_1058) > signed(ap_const_lv16_0)) else "0";

    internal_ap_ready_assign_proc : process(res_full_n, ap_CS_fsm_state3)
    begin
        if (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    out_data_25_fu_650_p3 <= 
        trunc_ln155_reg_1063 when (icmp_ln1494_fu_645_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_27_fu_662_p3 <= 
        trunc_ln155_s_reg_1073 when (icmp_ln1494_11_fu_657_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_29_fu_674_p3 <= 
        trunc_ln155_1_reg_1083 when (icmp_ln1494_12_fu_669_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_31_fu_686_p3 <= 
        trunc_ln155_2_reg_1093 when (icmp_ln1494_13_fu_681_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_33_fu_698_p3 <= 
        trunc_ln155_3_reg_1103 when (icmp_ln1494_14_fu_693_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_35_fu_710_p3 <= 
        trunc_ln155_4_reg_1113 when (icmp_ln1494_15_fu_705_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_37_fu_722_p3 <= 
        trunc_ln155_5_reg_1123 when (icmp_ln1494_16_fu_717_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_39_fu_734_p3 <= 
        trunc_ln155_6_reg_1133 when (icmp_ln1494_17_fu_729_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_41_fu_746_p3 <= 
        trunc_ln155_7_reg_1143 when (icmp_ln1494_18_fu_741_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_43_fu_758_p3 <= 
        trunc_ln155_8_reg_1153 when (icmp_ln1494_19_fu_753_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_45_fu_770_p3 <= 
        trunc_ln155_9_reg_1163 when (icmp_ln1494_20_fu_765_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_47_fu_782_p3 <= 
        trunc_ln155_10_reg_1173 when (icmp_ln1494_21_fu_777_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_49_fu_794_p3 <= 
        trunc_ln155_11_reg_1183 when (icmp_ln1494_22_fu_789_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_51_fu_806_p3 <= 
        trunc_ln155_12_reg_1193 when (icmp_ln1494_23_fu_801_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_53_fu_818_p3 <= 
        trunc_ln155_13_reg_1203 when (icmp_ln1494_24_fu_813_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_55_fu_830_p3 <= 
        trunc_ln155_14_reg_1213 when (icmp_ln1494_25_fu_825_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_57_fu_842_p3 <= 
        trunc_ln155_15_reg_1223 when (icmp_ln1494_26_fu_837_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_59_fu_854_p3 <= 
        trunc_ln155_16_reg_1233 when (icmp_ln1494_27_fu_849_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_61_fu_866_p3 <= 
        trunc_ln155_17_reg_1243 when (icmp_ln1494_28_fu_861_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_63_fu_878_p3 <= 
        trunc_ln155_18_reg_1253 when (icmp_ln1494_29_fu_873_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_65_fu_890_p3 <= 
        trunc_ln155_19_reg_1263 when (icmp_ln1494_30_fu_885_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_67_fu_902_p3 <= 
        trunc_ln155_20_reg_1273 when (icmp_ln1494_31_fu_897_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_69_fu_914_p3 <= 
        trunc_ln155_21_reg_1283 when (icmp_ln1494_32_fu_909_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_71_fu_926_p3 <= 
        trunc_ln155_22_reg_1293 when (icmp_ln1494_33_fu_921_p2(0) = '1') else 
        ap_const_lv15_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_blk_n_assign_proc : process(res_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            res_blk_n <= res_full_n;
        else 
            res_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1002_p25),384));

    res_write_assign_proc : process(res_full_n, ap_CS_fsm_state3)
    begin
        if (((res_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            res_write <= ap_const_logic_1;
        else 
            res_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_66_fu_177_p1 <= data_dout(16 - 1 downto 0);
    tmp_fu_1002_p25 <= (((((((((((((((((((((((out_data_71_reg_1413 & zext_ln45_28_fu_999_p1) & zext_ln45_27_fu_996_p1) & zext_ln45_26_fu_993_p1) & zext_ln45_25_fu_990_p1) & zext_ln45_24_fu_987_p1) & zext_ln45_23_fu_984_p1) & zext_ln45_22_fu_981_p1) & zext_ln45_21_fu_978_p1) & zext_ln45_20_fu_975_p1) & zext_ln45_19_fu_972_p1) & zext_ln45_18_fu_969_p1) & zext_ln45_17_fu_966_p1) & zext_ln45_16_fu_963_p1) & zext_ln45_15_fu_960_p1) & zext_ln45_14_fu_957_p1) & zext_ln45_13_fu_954_p1) & zext_ln45_12_fu_951_p1) & zext_ln45_11_fu_948_p1) & zext_ln45_10_fu_945_p1) & zext_ln45_9_fu_942_p1) & zext_ln45_8_fu_939_p1) & zext_ln45_7_fu_936_p1) & zext_ln45_fu_933_p1);
    trunc_ln155_fu_181_p1 <= data_dout(15 - 1 downto 0);
    zext_ln45_10_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_33_reg_1318),16));
    zext_ln45_11_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_35_reg_1323),16));
    zext_ln45_12_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_37_reg_1328),16));
    zext_ln45_13_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_39_reg_1333),16));
    zext_ln45_14_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_41_reg_1338),16));
    zext_ln45_15_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_43_reg_1343),16));
    zext_ln45_16_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_45_reg_1348),16));
    zext_ln45_17_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_47_reg_1353),16));
    zext_ln45_18_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_49_reg_1358),16));
    zext_ln45_19_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_51_reg_1363),16));
    zext_ln45_20_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_53_reg_1368),16));
    zext_ln45_21_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_55_reg_1373),16));
    zext_ln45_22_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_57_reg_1378),16));
    zext_ln45_23_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_59_reg_1383),16));
    zext_ln45_24_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_61_reg_1388),16));
    zext_ln45_25_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_63_reg_1393),16));
    zext_ln45_26_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_65_reg_1398),16));
    zext_ln45_27_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_67_reg_1403),16));
    zext_ln45_28_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_69_reg_1408),16));
    zext_ln45_7_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_27_reg_1303),16));
    zext_ln45_8_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_29_reg_1308),16));
    zext_ln45_9_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_31_reg_1313),16));
    zext_ln45_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_25_reg_1298),16));
end behav;
