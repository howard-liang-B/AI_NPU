-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_2_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_2_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_2_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_0_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_8_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_8_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_8_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_6_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_9_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_9_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_9_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_7_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_14_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_14_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_14_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_12_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_4_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_4_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_4_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_5_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_5_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_5_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_3_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_10_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_10_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_10_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_11_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_11_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_11_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_16_i : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_16_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_16_o_ap_vld : OUT STD_LOGIC;
    kernel_data_V_5_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_data_V_5_15_ap_vld : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal kernel_data_V_5_17 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_5_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_5_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_5_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_5_1_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_5_1_0_we0 : STD_LOGIC;
    signal line_buffer_Array_5_1_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_5_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_5_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_5_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_5_1_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_5_1_1_we0 : STD_LOGIC;
    signal line_buffer_Array_5_1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_5_0_0_U : component myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_D,
        ce0 => line_buffer_Array_5_0_0_ce0,
        we0 => line_buffer_Array_5_0_0_we0,
        d0 => p_read,
        q0 => line_buffer_Array_5_0_0_q0);

    line_buffer_Array_5_1_0_U : component myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_D,
        ce0 => line_buffer_Array_5_1_0_ce0,
        we0 => line_buffer_Array_5_1_0_we0,
        d0 => line_buffer_Array_5_0_0_q0,
        q0 => line_buffer_Array_5_1_0_q0);

    line_buffer_Array_5_0_1_U : component myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_D,
        ce0 => line_buffer_Array_5_0_1_ce0,
        we0 => line_buffer_Array_5_0_1_we0,
        d0 => p_read1,
        q0 => line_buffer_Array_5_0_1_q0);

    line_buffer_Array_5_1_1_U : component myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_2u_config12_s_line_buffer_Array_5vdy
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_D,
        ce0 => line_buffer_Array_5_1_1_ce0,
        we0 => line_buffer_Array_5_1_1_we0,
        d0 => line_buffer_Array_5_0_1_q0,
        q0 => line_buffer_Array_5_1_1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then
                kernel_data_V_5_17 <= p_read1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    kernel_data_V_5_0 <= kernel_data_V_5_2_i;

    kernel_data_V_5_0_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_0_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_10_o_assign_proc : process(ap_CS_fsm_state1, kernel_data_V_5_10_i, line_buffer_Array_5_0_0_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_10_o <= line_buffer_Array_5_0_0_q0;
        else 
            kernel_data_V_5_10_o <= kernel_data_V_5_10_i;
        end if; 
    end process;


    kernel_data_V_5_10_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_10_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_10_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_11_o_assign_proc : process(ap_CS_fsm_state1, kernel_data_V_5_11_i, line_buffer_Array_5_0_1_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_11_o <= line_buffer_Array_5_0_1_q0;
        else 
            kernel_data_V_5_11_o <= kernel_data_V_5_11_i;
        end if; 
    end process;


    kernel_data_V_5_11_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_11_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_11_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    kernel_data_V_5_12 <= kernel_data_V_5_14_i;

    kernel_data_V_5_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_12_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_14_o_assign_proc : process(ap_CS_fsm_state1, kernel_data_V_5_14_i, kernel_data_V_5_16_i)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_14_o <= kernel_data_V_5_16_i;
        else 
            kernel_data_V_5_14_o <= kernel_data_V_5_14_i;
        end if; 
    end process;


    kernel_data_V_5_14_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_14_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_14_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    kernel_data_V_5_15 <= kernel_data_V_5_17;

    kernel_data_V_5_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_15_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_16_o_assign_proc : process(ap_CS_fsm_state1, p_read, kernel_data_V_5_16_i)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_16_o <= p_read;
        else 
            kernel_data_V_5_16_o <= kernel_data_V_5_16_i;
        end if; 
    end process;


    kernel_data_V_5_16_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_16_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_16_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_2_o_assign_proc : process(ap_CS_fsm_state1, kernel_data_V_5_2_i, kernel_data_V_5_4_i)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_2_o <= kernel_data_V_5_4_i;
        else 
            kernel_data_V_5_2_o <= kernel_data_V_5_2_i;
        end if; 
    end process;


    kernel_data_V_5_2_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_2_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    kernel_data_V_5_3 <= kernel_data_V_5_5_i;

    kernel_data_V_5_3_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_3_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_4_o_assign_proc : process(ap_CS_fsm_state1, kernel_data_V_5_4_i, line_buffer_Array_5_1_0_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_4_o <= line_buffer_Array_5_1_0_q0;
        else 
            kernel_data_V_5_4_o <= kernel_data_V_5_4_i;
        end if; 
    end process;


    kernel_data_V_5_4_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_4_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_5_o_assign_proc : process(ap_CS_fsm_state1, kernel_data_V_5_5_i, line_buffer_Array_5_1_1_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_5_o <= line_buffer_Array_5_1_1_q0;
        else 
            kernel_data_V_5_5_o <= kernel_data_V_5_5_i;
        end if; 
    end process;


    kernel_data_V_5_5_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_5_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    kernel_data_V_5_6 <= kernel_data_V_5_8_i;

    kernel_data_V_5_6_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_6_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    kernel_data_V_5_7 <= kernel_data_V_5_9_i;

    kernel_data_V_5_7_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_7_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_8_o_assign_proc : process(ap_CS_fsm_state1, kernel_data_V_5_8_i, kernel_data_V_5_10_i)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_8_o <= kernel_data_V_5_10_i;
        else 
            kernel_data_V_5_8_o <= kernel_data_V_5_8_i;
        end if; 
    end process;


    kernel_data_V_5_8_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_8_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_8_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    kernel_data_V_5_9_o_assign_proc : process(ap_CS_fsm_state1, kernel_data_V_5_9_i, kernel_data_V_5_11_i)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            kernel_data_V_5_9_o <= kernel_data_V_5_11_i;
        else 
            kernel_data_V_5_9_o <= kernel_data_V_5_9_i;
        end if; 
    end process;


    kernel_data_V_5_9_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            kernel_data_V_5_9_o_ap_vld <= ap_const_logic_1;
        else 
            kernel_data_V_5_9_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_5_0_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            line_buffer_Array_5_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_5_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_5_0_0_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            line_buffer_Array_5_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_5_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_5_0_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            line_buffer_Array_5_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_5_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_5_0_1_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            line_buffer_Array_5_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_5_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_5_1_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            line_buffer_Array_5_1_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_5_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_5_1_0_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            line_buffer_Array_5_1_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_5_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_5_1_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            line_buffer_Array_5_1_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_5_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_5_1_1_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            line_buffer_Array_5_1_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_5_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
