-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_4u_config26_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer25_out_dout : IN STD_LOGIC_VECTOR (383 downto 0);
    layer25_out_empty_n : IN STD_LOGIC;
    layer25_out_read : OUT STD_LOGIC;
    layer26_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    layer26_out_full_n : IN STD_LOGIC;
    layer26_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_dense_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_4u_config26_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv16_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100100";
    constant ap_const_lv16_FEE3 : STD_LOGIC_VECTOR (15 downto 0) := "1111111011100011";
    constant ap_const_lv16_5F : STD_LOGIC_VECTOR (15 downto 0) := "0000000001011111";
    constant ap_const_lv16_4C : STD_LOGIC_VECTOR (15 downto 0) := "0000000001001100";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal w26_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal w26_V_ce0 : STD_LOGIC;
    signal w26_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal w26_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal w26_V_ce1 : STD_LOGIC;
    signal w26_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal w26_V_address2 : STD_LOGIC_VECTOR (6 downto 0);
    signal w26_V_ce2 : STD_LOGIC;
    signal w26_V_q2 : STD_LOGIC_VECTOR (11 downto 0);
    signal w26_V_address3 : STD_LOGIC_VECTOR (6 downto 0);
    signal w26_V_ce3 : STD_LOGIC;
    signal w26_V_q3 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer25_out_blk_n : STD_LOGIC;
    signal layer26_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ii_reg_734 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_reg_734_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ii_reg_734_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_757 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_3_reg_768 : STD_LOGIC_VECTOR (4 downto 0);
    signal jj_reg_779 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_pack_fu_2086_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_reg_4259 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_24_reg_4264 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_25_reg_4269 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_26_reg_4274 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_27_reg_4279 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_28_reg_4284 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_29_reg_4289 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_30_reg_4294 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_31_reg_4299 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_32_reg_4304 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_33_reg_4309 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_34_reg_4314 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_35_reg_4319 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_36_reg_4324 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_37_reg_4329 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_38_reg_4334 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_39_reg_4339 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_40_reg_4344 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_41_reg_4349 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_42_reg_4354 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_43_reg_4359 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_44_reg_4364 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_45_reg_4369 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_46_reg_4374 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln37_fu_2320_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_reg_4379 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln37_fu_2326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_4384 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_fu_2332_p26 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_reg_4388 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_reg_4388_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w26_V_load_reg_4413 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal w26_V_load_1_reg_4418 : STD_LOGIC_VECTOR (11 downto 0);
    signal w26_V_load_2_reg_4423 : STD_LOGIC_VECTOR (11 downto 0);
    signal w26_V_load_3_reg_4428 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_152_fu_2412_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln48_fu_2951_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal acc_V_3_load_reg_4490 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_1_load_reg_4495 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_2_load_reg_4500 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_4_load_reg_4505 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_fu_3029_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln54_fu_3035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_4549 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_5_fu_3061_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln54_5_reg_4553 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln57_fu_3069_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_4559 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_4559_pp2_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln56_fu_3073_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_3367_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_4570 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_3386_p98 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_4575 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_fu_3608_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_ii_phi_fu_738_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal iacc_reg_746 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln48_fu_2969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_ii_3_phi_fu_772_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ires_reg_790 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln64_fu_3614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln42_cast_fu_2370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_2381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_27_fu_2392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_28_fu_2403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mult_V_92_fu_240 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_fu_244 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_fu_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_fu_252 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_1_fu_256 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_1_fu_260 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_1_fu_264 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_1_fu_268 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_2_fu_272 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_2_fu_276 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_2_fu_280 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_2_fu_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_3_fu_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_3_fu_292 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_3_fu_296 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_3_fu_300 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_4_fu_304 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_4_fu_308 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_4_fu_312 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_4_fu_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_5_fu_320 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_5_fu_324 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_5_fu_328 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_5_fu_332 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_6_fu_336 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_6_fu_340 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_6_fu_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_6_fu_348 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_7_fu_352 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_7_fu_356 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_7_fu_360 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_7_fu_364 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_8_fu_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_8_fu_372 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_8_fu_376 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_8_fu_380 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_9_fu_384 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_9_fu_388 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_9_fu_392 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_9_fu_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_10_fu_400 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_10_fu_404 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_10_fu_408 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_10_fu_412 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_11_fu_416 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_11_fu_420 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_11_fu_424 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_11_fu_428 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_12_fu_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_12_fu_436 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_12_fu_440 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_12_fu_444 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_13_fu_448 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_13_fu_452 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_13_fu_456 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_13_fu_460 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_14_fu_464 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_14_fu_468 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_14_fu_472 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_14_fu_476 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_15_fu_480 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_15_fu_484 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_15_fu_488 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_15_fu_492 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_16_fu_496 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_16_fu_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_16_fu_504 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_16_fu_508 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_17_fu_512 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_17_fu_516 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_17_fu_520 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_17_fu_524 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_18_fu_528 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_18_fu_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_18_fu_536 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_18_fu_540 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_19_fu_544 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_19_fu_548 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_19_fu_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_19_fu_556 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_20_fu_560 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_20_fu_564 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_20_fu_568 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_20_fu_572 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_21_fu_576 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_21_fu_580 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_21_fu_584 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_21_fu_588 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_22_fu_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_22_fu_596 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_22_fu_600 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_22_fu_604 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_92_23_fu_608 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_93_23_fu_612 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_94_23_fu_616 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_95_23_fu_620 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_fu_624 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_0_fu_2979_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln49_fu_2975_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_V_3_1_fu_628 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_2_fu_632 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_4_fu_636 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_5_fu_640 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_0_3_fu_3584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_acc_V_3_5_load : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_2074_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_6_fu_644 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_acc_V_3_6_load : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_2077_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_7_fu_648 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_acc_V_3_7_load : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_2080_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_3_fu_652 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_acc_V_3_3_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_2083_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_pack_fu_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_0_fu_3624_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_fu_3620_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal res_pack_29_fu_660 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_pack_30_fu_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_pack_31_fu_668 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_822_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_868_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_882_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_894_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_2362_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln41_fu_2375_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln41_7_fu_2386_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln41_8_fu_2397_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_868_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_822_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_894_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_882_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal acc_V_0_fu_2979_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln56_fu_3041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln5422_fu_3055_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln54_fu_3047_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_3386_p97 : STD_LOGIC_VECTOR (6 downto 0);
    signal res_V_0_fu_3624_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_16s_12s_26_2_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mux_245_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mux_967_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (15 downto 0);
        din65 : IN STD_LOGIC_VECTOR (15 downto 0);
        din66 : IN STD_LOGIC_VECTOR (15 downto 0);
        din67 : IN STD_LOGIC_VECTOR (15 downto 0);
        din68 : IN STD_LOGIC_VECTOR (15 downto 0);
        din69 : IN STD_LOGIC_VECTOR (15 downto 0);
        din70 : IN STD_LOGIC_VECTOR (15 downto 0);
        din71 : IN STD_LOGIC_VECTOR (15 downto 0);
        din72 : IN STD_LOGIC_VECTOR (15 downto 0);
        din73 : IN STD_LOGIC_VECTOR (15 downto 0);
        din74 : IN STD_LOGIC_VECTOR (15 downto 0);
        din75 : IN STD_LOGIC_VECTOR (15 downto 0);
        din76 : IN STD_LOGIC_VECTOR (15 downto 0);
        din77 : IN STD_LOGIC_VECTOR (15 downto 0);
        din78 : IN STD_LOGIC_VECTOR (15 downto 0);
        din79 : IN STD_LOGIC_VECTOR (15 downto 0);
        din80 : IN STD_LOGIC_VECTOR (15 downto 0);
        din81 : IN STD_LOGIC_VECTOR (15 downto 0);
        din82 : IN STD_LOGIC_VECTOR (15 downto 0);
        din83 : IN STD_LOGIC_VECTOR (15 downto 0);
        din84 : IN STD_LOGIC_VECTOR (15 downto 0);
        din85 : IN STD_LOGIC_VECTOR (15 downto 0);
        din86 : IN STD_LOGIC_VECTOR (15 downto 0);
        din87 : IN STD_LOGIC_VECTOR (15 downto 0);
        din88 : IN STD_LOGIC_VECTOR (15 downto 0);
        din89 : IN STD_LOGIC_VECTOR (15 downto 0);
        din90 : IN STD_LOGIC_VECTOR (15 downto 0);
        din91 : IN STD_LOGIC_VECTOR (15 downto 0);
        din92 : IN STD_LOGIC_VECTOR (15 downto 0);
        din93 : IN STD_LOGIC_VECTOR (15 downto 0);
        din94 : IN STD_LOGIC_VECTOR (15 downto 0);
        din95 : IN STD_LOGIC_VECTOR (15 downto 0);
        din96 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_dense_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_4u_config26_s_w26_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address3 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    w26_V_U : component myproject_dense_array_ap_fixed_24u_array_ap_fixed_16_6_5_3_0_4u_config26_s_w26_V
    generic map (
        DataWidth => 12,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w26_V_address0,
        ce0 => w26_V_ce0,
        q0 => w26_V_q0,
        address1 => w26_V_address1,
        ce1 => w26_V_ce1,
        q1 => w26_V_q1,
        address2 => w26_V_address2,
        ce2 => w26_V_ce2,
        q2 => w26_V_q2,
        address3 => w26_V_address3,
        ce3 => w26_V_ce3,
        q3 => w26_V_q3);

    mul_16s_12s_26_2_0_U414 : component myproject_mul_16s_12s_26_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_822_p0,
        din1 => w26_V_load_1_reg_4418,
        ce => ap_const_logic_1,
        dout => grp_fu_822_p2);

    mul_16s_12s_26_2_0_U415 : component myproject_mul_16s_12s_26_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_868_p0,
        din1 => w26_V_load_reg_4413,
        ce => ap_const_logic_1,
        dout => grp_fu_868_p2);

    mul_16s_12s_26_2_0_U416 : component myproject_mul_16s_12s_26_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_882_p0,
        din1 => w26_V_load_3_reg_4428,
        ce => ap_const_logic_1,
        dout => grp_fu_882_p2);

    mul_16s_12s_26_2_0_U417 : component myproject_mul_16s_12s_26_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_894_p0,
        din1 => w26_V_load_2_reg_4423,
        ce => ap_const_logic_1,
        dout => grp_fu_894_p2);

    mux_245_16_1_1_U418 : component myproject_mux_245_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => data_pack_reg_4259,
        din1 => data_pack_24_reg_4264,
        din2 => data_pack_25_reg_4269,
        din3 => data_pack_26_reg_4274,
        din4 => data_pack_27_reg_4279,
        din5 => data_pack_28_reg_4284,
        din6 => data_pack_29_reg_4289,
        din7 => data_pack_30_reg_4294,
        din8 => data_pack_31_reg_4299,
        din9 => data_pack_32_reg_4304,
        din10 => data_pack_33_reg_4309,
        din11 => data_pack_34_reg_4314,
        din12 => data_pack_35_reg_4319,
        din13 => data_pack_36_reg_4324,
        din14 => data_pack_37_reg_4329,
        din15 => data_pack_38_reg_4334,
        din16 => data_pack_39_reg_4339,
        din17 => data_pack_40_reg_4344,
        din18 => data_pack_41_reg_4349,
        din19 => data_pack_42_reg_4354,
        din20 => data_pack_43_reg_4359,
        din21 => data_pack_44_reg_4364,
        din22 => data_pack_45_reg_4369,
        din23 => data_pack_46_reg_4374,
        din24 => ap_phi_mux_ii_phi_fu_738_p4,
        dout => a_V_fu_2332_p26);

    mux_42_16_1_1_U419 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_64,
        din1 => ap_const_lv16_FEE3,
        din2 => ap_const_lv16_5F,
        din3 => ap_const_lv16_4C,
        din4 => acc_V_0_fu_2979_p5,
        dout => acc_V_0_fu_2979_p6);

    mux_42_16_1_1_U420 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => grp_load_fu_2074_p1,
        din1 => grp_load_fu_2077_p1,
        din2 => grp_load_fu_2080_p1,
        din3 => grp_load_fu_2083_p1,
        din4 => trunc_ln57_reg_4559,
        dout => tmp_fu_3367_p6);

    mux_967_16_1_1_U421 : component myproject_mux_967_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 16,
        din65_WIDTH => 16,
        din66_WIDTH => 16,
        din67_WIDTH => 16,
        din68_WIDTH => 16,
        din69_WIDTH => 16,
        din70_WIDTH => 16,
        din71_WIDTH => 16,
        din72_WIDTH => 16,
        din73_WIDTH => 16,
        din74_WIDTH => 16,
        din75_WIDTH => 16,
        din76_WIDTH => 16,
        din77_WIDTH => 16,
        din78_WIDTH => 16,
        din79_WIDTH => 16,
        din80_WIDTH => 16,
        din81_WIDTH => 16,
        din82_WIDTH => 16,
        din83_WIDTH => 16,
        din84_WIDTH => 16,
        din85_WIDTH => 16,
        din86_WIDTH => 16,
        din87_WIDTH => 16,
        din88_WIDTH => 16,
        din89_WIDTH => 16,
        din90_WIDTH => 16,
        din91_WIDTH => 16,
        din92_WIDTH => 16,
        din93_WIDTH => 16,
        din94_WIDTH => 16,
        din95_WIDTH => 16,
        din96_WIDTH => 7,
        dout_WIDTH => 16)
    port map (
        din0 => mult_V_92_fu_240,
        din1 => mult_V_93_fu_244,
        din2 => mult_V_94_fu_248,
        din3 => mult_V_95_fu_252,
        din4 => mult_V_92_1_fu_256,
        din5 => mult_V_93_1_fu_260,
        din6 => mult_V_94_1_fu_264,
        din7 => mult_V_95_1_fu_268,
        din8 => mult_V_92_2_fu_272,
        din9 => mult_V_93_2_fu_276,
        din10 => mult_V_94_2_fu_280,
        din11 => mult_V_95_2_fu_284,
        din12 => mult_V_92_3_fu_288,
        din13 => mult_V_93_3_fu_292,
        din14 => mult_V_94_3_fu_296,
        din15 => mult_V_95_3_fu_300,
        din16 => mult_V_92_4_fu_304,
        din17 => mult_V_93_4_fu_308,
        din18 => mult_V_94_4_fu_312,
        din19 => mult_V_95_4_fu_316,
        din20 => mult_V_92_5_fu_320,
        din21 => mult_V_93_5_fu_324,
        din22 => mult_V_94_5_fu_328,
        din23 => mult_V_95_5_fu_332,
        din24 => mult_V_92_6_fu_336,
        din25 => mult_V_93_6_fu_340,
        din26 => mult_V_94_6_fu_344,
        din27 => mult_V_95_6_fu_348,
        din28 => mult_V_92_7_fu_352,
        din29 => mult_V_93_7_fu_356,
        din30 => mult_V_94_7_fu_360,
        din31 => mult_V_95_7_fu_364,
        din32 => mult_V_92_8_fu_368,
        din33 => mult_V_93_8_fu_372,
        din34 => mult_V_94_8_fu_376,
        din35 => mult_V_95_8_fu_380,
        din36 => mult_V_92_9_fu_384,
        din37 => mult_V_93_9_fu_388,
        din38 => mult_V_94_9_fu_392,
        din39 => mult_V_95_9_fu_396,
        din40 => mult_V_92_10_fu_400,
        din41 => mult_V_93_10_fu_404,
        din42 => mult_V_94_10_fu_408,
        din43 => mult_V_95_10_fu_412,
        din44 => mult_V_92_11_fu_416,
        din45 => mult_V_93_11_fu_420,
        din46 => mult_V_94_11_fu_424,
        din47 => mult_V_95_11_fu_428,
        din48 => mult_V_92_12_fu_432,
        din49 => mult_V_93_12_fu_436,
        din50 => mult_V_94_12_fu_440,
        din51 => mult_V_95_12_fu_444,
        din52 => mult_V_92_13_fu_448,
        din53 => mult_V_93_13_fu_452,
        din54 => mult_V_94_13_fu_456,
        din55 => mult_V_95_13_fu_460,
        din56 => mult_V_92_14_fu_464,
        din57 => mult_V_93_14_fu_468,
        din58 => mult_V_94_14_fu_472,
        din59 => mult_V_95_14_fu_476,
        din60 => mult_V_92_15_fu_480,
        din61 => mult_V_93_15_fu_484,
        din62 => mult_V_94_15_fu_488,
        din63 => mult_V_95_15_fu_492,
        din64 => mult_V_92_16_fu_496,
        din65 => mult_V_93_16_fu_500,
        din66 => mult_V_94_16_fu_504,
        din67 => mult_V_95_16_fu_508,
        din68 => mult_V_92_17_fu_512,
        din69 => mult_V_93_17_fu_516,
        din70 => mult_V_94_17_fu_520,
        din71 => mult_V_95_17_fu_524,
        din72 => mult_V_92_18_fu_528,
        din73 => mult_V_93_18_fu_532,
        din74 => mult_V_94_18_fu_536,
        din75 => mult_V_95_18_fu_540,
        din76 => mult_V_92_19_fu_544,
        din77 => mult_V_93_19_fu_548,
        din78 => mult_V_94_19_fu_552,
        din79 => mult_V_95_19_fu_556,
        din80 => mult_V_92_20_fu_560,
        din81 => mult_V_93_20_fu_564,
        din82 => mult_V_94_20_fu_568,
        din83 => mult_V_95_20_fu_572,
        din84 => mult_V_92_21_fu_576,
        din85 => mult_V_93_21_fu_580,
        din86 => mult_V_94_21_fu_584,
        din87 => mult_V_95_21_fu_588,
        din88 => mult_V_92_22_fu_592,
        din89 => mult_V_93_22_fu_596,
        din90 => mult_V_94_22_fu_600,
        din91 => mult_V_95_22_fu_604,
        din92 => mult_V_92_23_fu_608,
        din93 => mult_V_93_23_fu_612,
        din94 => mult_V_94_23_fu_616,
        din95 => mult_V_95_23_fu_620,
        din96 => tmp_s_fu_3386_p97,
        dout => tmp_s_fu_3386_p98);

    mux_42_16_1_1_U422 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => grp_load_fu_2074_p1,
        din1 => grp_load_fu_2077_p1,
        din2 => grp_load_fu_2080_p1,
        din3 => grp_load_fu_2083_p1,
        din4 => res_V_0_fu_3624_p5,
        dout => res_V_0_fu_3624_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer26_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((layer25_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((layer25_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_V_3_3_fu_652_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                acc_V_3_3_fu_652 <= acc_V_3_4_load_reg_4505;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln57_reg_4559_pp2_iter1_reg = ap_const_lv2_3))) then 
                acc_V_3_3_fu_652 <= acc_V_0_3_fu_3584_p2;
            end if; 
        end if;
    end process;

    acc_V_3_5_fu_640_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                acc_V_3_5_fu_640 <= acc_V_3_load_reg_4490;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln57_reg_4559_pp2_iter1_reg = ap_const_lv2_0))) then 
                acc_V_3_5_fu_640 <= acc_V_0_3_fu_3584_p2;
            end if; 
        end if;
    end process;

    acc_V_3_6_fu_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                acc_V_3_6_fu_644 <= acc_V_3_1_load_reg_4495;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln57_reg_4559_pp2_iter1_reg = ap_const_lv2_1))) then 
                acc_V_3_6_fu_644 <= acc_V_0_3_fu_3584_p2;
            end if; 
        end if;
    end process;

    acc_V_3_7_fu_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                acc_V_3_7_fu_648 <= acc_V_3_2_load_reg_4500;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln57_reg_4559_pp2_iter1_reg = ap_const_lv2_2))) then 
                acc_V_3_7_fu_648 <= acc_V_0_3_fu_3584_p2;
            end if; 
        end if;
    end process;

    iacc_reg_746_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                iacc_reg_746 <= ap_const_lv3_0;
            elsif (((icmp_ln48_fu_2969_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                iacc_reg_746 <= add_ln48_fu_2951_p2;
            end if; 
        end if;
    end process;

    ii_3_reg_768_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                ii_3_reg_768 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln54_reg_4549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                ii_3_reg_768 <= select_ln54_5_reg_4553;
            end if; 
        end if;
    end process;

    ii_reg_734_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln37_reg_4384 = ap_const_lv1_0))) then 
                ii_reg_734 <= add_ln37_reg_4379;
            elsif ((not(((layer25_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_reg_734 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_757_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_757 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln54_fu_3035_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_757 <= add_ln54_fu_3029_p2;
            end if; 
        end if;
    end process;

    ires_reg_790_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ires_reg_790 <= ap_const_lv3_0;
            elsif (((icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                ires_reg_790 <= add_ln64_fu_3608_p2;
            end if; 
        end if;
    end process;

    jj_reg_779_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                jj_reg_779 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln54_fu_3035_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                jj_reg_779 <= add_ln56_fu_3073_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_fu_2326_p2 = ap_const_lv1_0))) then
                a_V_reg_4388 <= a_V_fu_2332_p26;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_V_reg_4388_pp0_iter1_reg <= a_V_reg_4388;
                icmp_ln37_reg_4384 <= icmp_ln37_fu_2326_p2;
                ii_reg_734_pp0_iter1_reg <= ii_reg_734;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln49_fu_2975_p1 = ap_const_lv2_1) and (icmp_ln48_fu_2969_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                acc_V_3_1_fu_628 <= acc_V_0_fu_2979_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                acc_V_3_1_load_reg_4495 <= acc_V_3_1_fu_628;
                acc_V_3_2_load_reg_4500 <= acc_V_3_2_fu_632;
                acc_V_3_4_load_reg_4505 <= acc_V_3_4_fu_636;
                acc_V_3_load_reg_4490 <= acc_V_3_fu_624;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln49_fu_2975_p1 = ap_const_lv2_2) and (icmp_ln48_fu_2969_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                acc_V_3_2_fu_632 <= acc_V_0_fu_2979_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln49_fu_2975_p1 = ap_const_lv2_3) and (icmp_ln48_fu_2969_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                acc_V_3_4_fu_636 <= acc_V_0_fu_2979_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln49_fu_2975_p1 = ap_const_lv2_0) and (icmp_ln48_fu_2969_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                acc_V_3_fu_624 <= acc_V_0_fu_2979_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln37_reg_4379 <= add_ln37_fu_2320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_pack_24_reg_4264 <= layer25_out_dout(31 downto 16);
                data_pack_25_reg_4269 <= layer25_out_dout(47 downto 32);
                data_pack_26_reg_4274 <= layer25_out_dout(63 downto 48);
                data_pack_27_reg_4279 <= layer25_out_dout(79 downto 64);
                data_pack_28_reg_4284 <= layer25_out_dout(95 downto 80);
                data_pack_29_reg_4289 <= layer25_out_dout(111 downto 96);
                data_pack_30_reg_4294 <= layer25_out_dout(127 downto 112);
                data_pack_31_reg_4299 <= layer25_out_dout(143 downto 128);
                data_pack_32_reg_4304 <= layer25_out_dout(159 downto 144);
                data_pack_33_reg_4309 <= layer25_out_dout(175 downto 160);
                data_pack_34_reg_4314 <= layer25_out_dout(191 downto 176);
                data_pack_35_reg_4319 <= layer25_out_dout(207 downto 192);
                data_pack_36_reg_4324 <= layer25_out_dout(223 downto 208);
                data_pack_37_reg_4329 <= layer25_out_dout(239 downto 224);
                data_pack_38_reg_4334 <= layer25_out_dout(255 downto 240);
                data_pack_39_reg_4339 <= layer25_out_dout(271 downto 256);
                data_pack_40_reg_4344 <= layer25_out_dout(287 downto 272);
                data_pack_41_reg_4349 <= layer25_out_dout(303 downto 288);
                data_pack_42_reg_4354 <= layer25_out_dout(319 downto 304);
                data_pack_43_reg_4359 <= layer25_out_dout(335 downto 320);
                data_pack_44_reg_4364 <= layer25_out_dout(351 downto 336);
                data_pack_45_reg_4369 <= layer25_out_dout(367 downto 352);
                data_pack_46_reg_4374 <= layer25_out_dout(383 downto 368);
                data_pack_reg_4259 <= data_pack_fu_2086_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln54_reg_4549 <= icmp_ln54_fu_3035_p2;
                trunc_ln57_reg_4559_pp2_iter1_reg <= trunc_ln57_reg_4559;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ii_reg_734_pp0_iter2_reg <= ii_reg_734_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_A))) then
                mult_V_92_10_fu_400 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_10_fu_404 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_10_fu_408 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_10_fu_412 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_B))) then
                mult_V_92_11_fu_416 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_11_fu_420 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_11_fu_424 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_11_fu_428 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_C))) then
                mult_V_92_12_fu_432 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_12_fu_436 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_12_fu_440 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_12_fu_444 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_D))) then
                mult_V_92_13_fu_448 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_13_fu_452 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_13_fu_456 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_13_fu_460 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_E))) then
                mult_V_92_14_fu_464 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_14_fu_468 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_14_fu_472 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_14_fu_476 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_F))) then
                mult_V_92_15_fu_480 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_15_fu_484 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_15_fu_488 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_15_fu_492 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_10))) then
                mult_V_92_16_fu_496 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_16_fu_500 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_16_fu_504 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_16_fu_508 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_11))) then
                mult_V_92_17_fu_512 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_17_fu_516 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_17_fu_520 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_17_fu_524 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_12))) then
                mult_V_92_18_fu_528 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_18_fu_532 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_18_fu_536 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_18_fu_540 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_13))) then
                mult_V_92_19_fu_544 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_19_fu_548 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_19_fu_552 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_19_fu_556 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_1))) then
                mult_V_92_1_fu_256 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_1_fu_260 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_1_fu_264 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_1_fu_268 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_14))) then
                mult_V_92_20_fu_560 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_20_fu_564 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_20_fu_568 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_20_fu_572 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_15))) then
                mult_V_92_21_fu_576 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_21_fu_580 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_21_fu_584 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_21_fu_588 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_16))) then
                mult_V_92_22_fu_592 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_22_fu_596 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_22_fu_600 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_22_fu_604 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ii_reg_734_pp0_iter2_reg = ap_const_lv5_17) or ((ii_reg_734_pp0_iter2_reg = ap_const_lv5_18) or ((ii_reg_734_pp0_iter2_reg = ap_const_lv5_19) or ((ii_reg_734_pp0_iter2_reg = ap_const_lv5_1A) or ((ii_reg_734_pp0_iter2_reg = ap_const_lv5_1B) or ((ii_reg_734_pp0_iter2_reg = ap_const_lv5_1C) or ((ii_reg_734_pp0_iter2_reg = ap_const_lv5_1D) or ((ii_reg_734_pp0_iter2_reg = ap_const_lv5_1E) or (ii_reg_734_pp0_iter2_reg = ap_const_lv5_1F))))))))))) then
                mult_V_92_23_fu_608 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_23_fu_612 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_23_fu_616 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_23_fu_620 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_2))) then
                mult_V_92_2_fu_272 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_2_fu_276 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_2_fu_280 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_2_fu_284 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_3))) then
                mult_V_92_3_fu_288 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_3_fu_292 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_3_fu_296 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_3_fu_300 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_4))) then
                mult_V_92_4_fu_304 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_4_fu_308 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_4_fu_312 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_4_fu_316 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_5))) then
                mult_V_92_5_fu_320 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_5_fu_324 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_5_fu_328 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_5_fu_332 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_6))) then
                mult_V_92_6_fu_336 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_6_fu_340 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_6_fu_344 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_6_fu_348 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_7))) then
                mult_V_92_7_fu_352 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_7_fu_356 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_7_fu_360 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_7_fu_364 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_8))) then
                mult_V_92_8_fu_368 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_8_fu_372 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_8_fu_376 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_8_fu_380 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_9))) then
                mult_V_92_9_fu_384 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_9_fu_388 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_9_fu_392 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_9_fu_396 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ii_reg_734_pp0_iter2_reg = ap_const_lv5_0))) then
                mult_V_92_fu_240 <= grp_fu_868_p2(25 downto 10);
                mult_V_93_fu_244 <= grp_fu_822_p2(25 downto 10);
                mult_V_94_fu_248 <= grp_fu_894_p2(25 downto 10);
                mult_V_95_fu_252 <= grp_fu_882_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln66_fu_3620_p1 = ap_const_lv2_1) and (icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                res_pack_29_fu_660 <= res_V_0_fu_3624_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln66_fu_3620_p1 = ap_const_lv2_2) and (icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                res_pack_30_fu_664 <= res_V_0_fu_3624_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln66_fu_3620_p1 = ap_const_lv2_3) and (icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                res_pack_31_fu_668 <= res_V_0_fu_3624_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln66_fu_3620_p1 = ap_const_lv2_0) and (icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                res_pack_fu_656 <= res_V_0_fu_3624_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln54_fu_3035_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln54_5_reg_4553 <= select_ln54_5_fu_3061_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln54_reg_4549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_reg_4570 <= tmp_fu_3367_p6;
                tmp_s_reg_4575 <= tmp_s_fu_3386_p98;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln54_fu_3035_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                trunc_ln57_reg_4559 <= trunc_ln57_fu_3069_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                w26_V_load_1_reg_4418 <= w26_V_q2;
                w26_V_load_2_reg_4423 <= w26_V_q1;
                w26_V_load_3_reg_4428 <= w26_V_q0;
                w26_V_load_reg_4413 <= w26_V_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer25_out_empty_n, layer26_out_full_n, ap_CS_fsm_state14, ap_enable_reg_pp0_iter0, icmp_ln37_fu_2326_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state7, ap_enable_reg_pp2_iter0, icmp_ln54_fu_3035_p2, ap_CS_fsm_state13, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, icmp_ln48_fu_2969_p2, icmp_ln64_fu_3614_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer25_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln37_fu_2326_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln37_fu_2326_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln48_fu_2969_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln54_fu_3035_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln54_fu_3035_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((layer26_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    acc_V_0_3_fu_3584_p2 <= std_logic_vector(unsigned(tmp_s_reg_4575) + unsigned(tmp_reg_4570));
    acc_V_0_fu_2979_p5 <= iacc_reg_746(2 - 1 downto 0);
    add_ln37_fu_2320_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii_phi_fu_738_p4) + unsigned(ap_const_lv5_1));
    add_ln48_fu_2951_p2 <= std_logic_vector(unsigned(iacc_reg_746) + unsigned(ap_const_lv3_1));
    add_ln5422_fu_3055_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii_3_phi_fu_772_p4) + unsigned(ap_const_lv5_1));
    add_ln54_fu_3029_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_757) + unsigned(ap_const_lv7_1));
    add_ln56_fu_3073_p2 <= std_logic_vector(unsigned(select_ln54_fu_3047_p3) + unsigned(ap_const_lv3_1));
    add_ln64_fu_3608_p2 <= std_logic_vector(unsigned(ires_reg_790) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(8);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer25_out_empty_n)
    begin
                ap_block_state1 <= ((layer25_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln37_fu_2326_p2)
    begin
        if ((icmp_ln37_fu_2326_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(icmp_ln54_fu_3035_p2)
    begin
        if ((icmp_ln54_fu_3035_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer26_out_full_n, ap_CS_fsm_state14)
    begin
        if (((layer26_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ii_3_phi_fu_772_p4_assign_proc : process(ii_3_reg_768, ap_CS_fsm_pp2_stage0, icmp_ln54_reg_4549, select_ln54_5_reg_4553, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln54_reg_4549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_ii_3_phi_fu_772_p4 <= select_ln54_5_reg_4553;
        else 
            ap_phi_mux_ii_3_phi_fu_772_p4 <= ii_3_reg_768;
        end if; 
    end process;


    ap_phi_mux_ii_phi_fu_738_p4_assign_proc : process(ii_reg_734, ap_CS_fsm_pp0_stage0, add_ln37_reg_4379, icmp_ln37_reg_4384, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln37_reg_4384 = ap_const_lv1_0))) then 
            ap_phi_mux_ii_phi_fu_738_p4 <= add_ln37_reg_4379;
        else 
            ap_phi_mux_ii_phi_fu_738_p4 <= ii_reg_734;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_acc_V_3_3_load_1_assign_proc : process(trunc_ln57_reg_4559_pp2_iter1_reg, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, acc_V_0_3_fu_3584_p2, acc_V_3_3_fu_652)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln57_reg_4559_pp2_iter1_reg = ap_const_lv2_3))) then 
            ap_sig_allocacmp_acc_V_3_3_load_1 <= acc_V_0_3_fu_3584_p2;
        else 
            ap_sig_allocacmp_acc_V_3_3_load_1 <= acc_V_3_3_fu_652;
        end if; 
    end process;


    ap_sig_allocacmp_acc_V_3_5_load_assign_proc : process(trunc_ln57_reg_4559_pp2_iter1_reg, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, acc_V_3_5_fu_640, acc_V_0_3_fu_3584_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln57_reg_4559_pp2_iter1_reg = ap_const_lv2_0))) then 
            ap_sig_allocacmp_acc_V_3_5_load <= acc_V_0_3_fu_3584_p2;
        else 
            ap_sig_allocacmp_acc_V_3_5_load <= acc_V_3_5_fu_640;
        end if; 
    end process;


    ap_sig_allocacmp_acc_V_3_6_load_assign_proc : process(trunc_ln57_reg_4559_pp2_iter1_reg, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, acc_V_0_3_fu_3584_p2, acc_V_3_6_fu_644)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln57_reg_4559_pp2_iter1_reg = ap_const_lv2_1))) then 
            ap_sig_allocacmp_acc_V_3_6_load <= acc_V_0_3_fu_3584_p2;
        else 
            ap_sig_allocacmp_acc_V_3_6_load <= acc_V_3_6_fu_644;
        end if; 
    end process;


    ap_sig_allocacmp_acc_V_3_7_load_assign_proc : process(trunc_ln57_reg_4559_pp2_iter1_reg, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, acc_V_0_3_fu_3584_p2, acc_V_3_7_fu_648)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (trunc_ln57_reg_4559_pp2_iter1_reg = ap_const_lv2_2))) then 
            ap_sig_allocacmp_acc_V_3_7_load <= acc_V_0_3_fu_3584_p2;
        else 
            ap_sig_allocacmp_acc_V_3_7_load <= acc_V_3_7_fu_648;
        end if; 
    end process;

    data_pack_fu_2086_p1 <= layer25_out_dout(16 - 1 downto 0);
    grp_fu_822_p0 <= sext_ln1118_152_fu_2412_p1(16 - 1 downto 0);
    grp_fu_868_p0 <= sext_ln1118_152_fu_2412_p1(16 - 1 downto 0);
    grp_fu_882_p0 <= sext_ln1118_152_fu_2412_p1(16 - 1 downto 0);
    grp_fu_894_p0 <= sext_ln1118_152_fu_2412_p1(16 - 1 downto 0);

    grp_load_fu_2074_p1_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln54_reg_4549, ap_CS_fsm_state13, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln64_fu_3614_p2, acc_V_3_5_fu_640, ap_sig_allocacmp_acc_V_3_5_load)
    begin
        if (((icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_load_fu_2074_p1 <= acc_V_3_5_fu_640;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln54_reg_4549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_load_fu_2074_p1 <= ap_sig_allocacmp_acc_V_3_5_load;
        else 
            grp_load_fu_2074_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_2077_p1_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln54_reg_4549, ap_CS_fsm_state13, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln64_fu_3614_p2, acc_V_3_6_fu_644, ap_sig_allocacmp_acc_V_3_6_load)
    begin
        if (((icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_load_fu_2077_p1 <= acc_V_3_6_fu_644;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln54_reg_4549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_load_fu_2077_p1 <= ap_sig_allocacmp_acc_V_3_6_load;
        else 
            grp_load_fu_2077_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_2080_p1_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln54_reg_4549, ap_CS_fsm_state13, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln64_fu_3614_p2, acc_V_3_7_fu_648, ap_sig_allocacmp_acc_V_3_7_load)
    begin
        if (((icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_load_fu_2080_p1 <= acc_V_3_7_fu_648;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln54_reg_4549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_load_fu_2080_p1 <= ap_sig_allocacmp_acc_V_3_7_load;
        else 
            grp_load_fu_2080_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_2083_p1_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln54_reg_4549, ap_CS_fsm_state13, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln64_fu_3614_p2, acc_V_3_3_fu_652, ap_sig_allocacmp_acc_V_3_3_load_1)
    begin
        if (((icmp_ln64_fu_3614_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_load_fu_2083_p1 <= acc_V_3_3_fu_652;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln54_reg_4549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_load_fu_2083_p1 <= ap_sig_allocacmp_acc_V_3_3_load_1;
        else 
            grp_load_fu_2083_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln37_fu_2326_p2 <= "1" when (ap_phi_mux_ii_phi_fu_738_p4 = ap_const_lv5_18) else "0";
    icmp_ln48_fu_2969_p2 <= "1" when (iacc_reg_746 = ap_const_lv3_4) else "0";
    icmp_ln54_fu_3035_p2 <= "1" when (indvar_flatten_reg_757 = ap_const_lv7_60) else "0";
    icmp_ln56_fu_3041_p2 <= "1" when (jj_reg_779 = ap_const_lv3_4) else "0";
    icmp_ln64_fu_3614_p2 <= "1" when (ires_reg_790 = ap_const_lv3_4) else "0";

    internal_ap_ready_assign_proc : process(layer26_out_full_n, ap_CS_fsm_state14)
    begin
        if (((layer26_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer25_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer25_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer25_out_blk_n <= layer25_out_empty_n;
        else 
            layer25_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer25_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer25_out_empty_n)
    begin
        if ((not(((layer25_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer25_out_read <= ap_const_logic_1;
        else 
            layer25_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer26_out_blk_n_assign_proc : process(layer26_out_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer26_out_blk_n <= layer26_out_full_n;
        else 
            layer26_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer26_out_din <= (((res_pack_31_fu_668 & res_pack_30_fu_664) & res_pack_29_fu_660) & res_pack_fu_656);

    layer26_out_write_assign_proc : process(layer26_out_full_n, ap_CS_fsm_state14)
    begin
        if (((layer26_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            layer26_out_write <= ap_const_logic_1;
        else 
            layer26_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln41_7_fu_2386_p2 <= (shl_ln_fu_2362_p3 or ap_const_lv7_2);
    or_ln41_8_fu_2397_p2 <= (shl_ln_fu_2362_p3 or ap_const_lv7_3);
    or_ln41_fu_2375_p2 <= (shl_ln_fu_2362_p3 or ap_const_lv7_1);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    res_V_0_fu_3624_p5 <= ires_reg_790(2 - 1 downto 0);
    select_ln54_5_fu_3061_p3 <= 
        add_ln5422_fu_3055_p2 when (icmp_ln56_fu_3041_p2(0) = '1') else 
        ap_phi_mux_ii_3_phi_fu_772_p4;
    select_ln54_fu_3047_p3 <= 
        ap_const_lv3_0 when (icmp_ln56_fu_3041_p2(0) = '1') else 
        jj_reg_779;
        sext_ln1118_152_fu_2412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_V_reg_4388_pp0_iter1_reg),26));

    shl_ln_fu_2362_p3 <= (ap_phi_mux_ii_phi_fu_738_p4 & ap_const_lv2_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_3386_p97 <= (select_ln54_5_reg_4553 & trunc_ln57_reg_4559);
    trunc_ln42_cast_fu_2370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_2362_p3),64));
    trunc_ln49_fu_2975_p1 <= iacc_reg_746(2 - 1 downto 0);
    trunc_ln57_fu_3069_p1 <= select_ln54_fu_3047_p3(2 - 1 downto 0);
    trunc_ln66_fu_3620_p1 <= ires_reg_790(2 - 1 downto 0);
    w26_V_address0 <= zext_ln42_28_fu_2403_p1(7 - 1 downto 0);
    w26_V_address1 <= zext_ln42_27_fu_2392_p1(7 - 1 downto 0);
    w26_V_address2 <= zext_ln42_fu_2381_p1(7 - 1 downto 0);
    w26_V_address3 <= trunc_ln42_cast_fu_2370_p1(7 - 1 downto 0);

    w26_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w26_V_ce0 <= ap_const_logic_1;
        else 
            w26_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w26_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w26_V_ce1 <= ap_const_logic_1;
        else 
            w26_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w26_V_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w26_V_ce2 <= ap_const_logic_1;
        else 
            w26_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    w26_V_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w26_V_ce3 <= ap_const_logic_1;
        else 
            w26_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln42_27_fu_2392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln41_7_fu_2386_p2),64));
    zext_ln42_28_fu_2403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln41_8_fu_2397_p2),64));
    zext_ln42_fu_2381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln41_fu_2375_p2),64));
end behav;
