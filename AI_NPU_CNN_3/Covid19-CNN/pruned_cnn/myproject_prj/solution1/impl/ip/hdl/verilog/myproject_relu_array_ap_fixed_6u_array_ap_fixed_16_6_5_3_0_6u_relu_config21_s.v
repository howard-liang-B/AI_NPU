// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_6u_array_ap_fixed_16_6_5_3_0_6u_relu_config21_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_dout,
        data_empty_n,
        data_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [95:0] data_dout;
input   data_empty_n;
output   data_read;
output  [95:0] res_din;
input   res_full_n;
output   res_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_read;
reg res_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_blk_n;
reg    res_blk_n;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_26_fu_69_p1;
reg   [15:0] tmp_26_reg_284;
wire   [14:0] trunc_ln155_fu_73_p1;
reg   [14:0] trunc_ln155_reg_289;
reg   [15:0] tmp_27_reg_294;
reg   [14:0] trunc_ln155_1_reg_299;
reg   [15:0] tmp_28_reg_304;
reg   [14:0] trunc_ln155_2_reg_309;
reg   [15:0] tmp_29_reg_314;
reg   [14:0] trunc_ln155_3_reg_319;
reg   [15:0] tmp_30_reg_324;
reg   [14:0] trunc_ln155_4_reg_329;
reg   [15:0] tmp_31_reg_334;
reg   [14:0] trunc_ln155_5_reg_339;
wire   [14:0] out_data_1_fu_182_p3;
reg   [14:0] out_data_1_reg_344;
wire    ap_CS_fsm_state2;
wire   [14:0] out_data_3_fu_194_p3;
reg   [14:0] out_data_3_reg_349;
wire   [14:0] out_data_5_fu_206_p3;
reg   [14:0] out_data_5_reg_354;
wire   [14:0] out_data_7_fu_218_p3;
reg   [14:0] out_data_7_reg_359;
wire   [14:0] out_data_9_fu_230_p3;
reg   [14:0] out_data_9_reg_364;
wire   [14:0] out_data_11_fu_242_p3;
reg   [14:0] out_data_11_reg_369;
reg    ap_block_state1;
wire   [0:0] icmp_ln1494_fu_177_p2;
wire   [0:0] icmp_ln1494_1_fu_189_p2;
wire   [0:0] icmp_ln1494_2_fu_201_p2;
wire   [0:0] icmp_ln1494_3_fu_213_p2;
wire   [0:0] icmp_ln1494_4_fu_225_p2;
wire   [0:0] icmp_ln1494_5_fu_237_p2;
wire   [15:0] zext_ln45_4_fu_261_p1;
wire   [15:0] zext_ln45_3_fu_258_p1;
wire   [15:0] zext_ln45_2_fu_255_p1;
wire   [15:0] zext_ln45_1_fu_252_p1;
wire   [15:0] zext_ln45_fu_249_p1;
wire   [94:0] tmp_fu_264_p7;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((res_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_data_11_reg_369 <= out_data_11_fu_242_p3;
        out_data_1_reg_344 <= out_data_1_fu_182_p3;
        out_data_3_reg_349 <= out_data_3_fu_194_p3;
        out_data_5_reg_354 <= out_data_5_fu_206_p3;
        out_data_7_reg_359 <= out_data_7_fu_218_p3;
        out_data_9_reg_364 <= out_data_9_fu_230_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_26_reg_284 <= tmp_26_fu_69_p1;
        tmp_27_reg_294 <= {{data_dout[31:16]}};
        tmp_28_reg_304 <= {{data_dout[47:32]}};
        tmp_29_reg_314 <= {{data_dout[63:48]}};
        tmp_30_reg_324 <= {{data_dout[79:64]}};
        tmp_31_reg_334 <= {{data_dout[95:80]}};
        trunc_ln155_1_reg_299 <= {{data_dout[30:16]}};
        trunc_ln155_2_reg_309 <= {{data_dout[46:32]}};
        trunc_ln155_3_reg_319 <= {{data_dout[62:48]}};
        trunc_ln155_4_reg_329 <= {{data_dout[78:64]}};
        trunc_ln155_5_reg_339 <= {{data_dout[94:80]}};
        trunc_ln155_reg_289 <= trunc_ln155_fu_73_p1;
    end
end

always @ (*) begin
    if (((res_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_blk_n = data_empty_n;
    end else begin
        data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (data_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_read = 1'b1;
    end else begin
        data_read = 1'b0;
    end
end

always @ (*) begin
    if (((res_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_write = 1'b1;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (data_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((res_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (data_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln1494_1_fu_189_p2 = (($signed(tmp_27_reg_294) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_201_p2 = (($signed(tmp_28_reg_304) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_213_p2 = (($signed(tmp_29_reg_314) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_225_p2 = (($signed(tmp_30_reg_324) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_237_p2 = (($signed(tmp_31_reg_334) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_177_p2 = (($signed(tmp_26_reg_284) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign out_data_11_fu_242_p3 = ((icmp_ln1494_5_fu_237_p2[0:0] == 1'b1) ? trunc_ln155_5_reg_339 : 15'd0);

assign out_data_1_fu_182_p3 = ((icmp_ln1494_fu_177_p2[0:0] == 1'b1) ? trunc_ln155_reg_289 : 15'd0);

assign out_data_3_fu_194_p3 = ((icmp_ln1494_1_fu_189_p2[0:0] == 1'b1) ? trunc_ln155_1_reg_299 : 15'd0);

assign out_data_5_fu_206_p3 = ((icmp_ln1494_2_fu_201_p2[0:0] == 1'b1) ? trunc_ln155_2_reg_309 : 15'd0);

assign out_data_7_fu_218_p3 = ((icmp_ln1494_3_fu_213_p2[0:0] == 1'b1) ? trunc_ln155_3_reg_319 : 15'd0);

assign out_data_9_fu_230_p3 = ((icmp_ln1494_4_fu_225_p2[0:0] == 1'b1) ? trunc_ln155_4_reg_329 : 15'd0);

assign res_din = tmp_fu_264_p7;

assign start_out = real_start;

assign tmp_26_fu_69_p1 = data_dout[15:0];

assign tmp_fu_264_p7 = {{{{{{out_data_11_reg_369}, {zext_ln45_4_fu_261_p1}}, {zext_ln45_3_fu_258_p1}}, {zext_ln45_2_fu_255_p1}}, {zext_ln45_1_fu_252_p1}}, {zext_ln45_fu_249_p1}};

assign trunc_ln155_fu_73_p1 = data_dout[14:0];

assign zext_ln45_1_fu_252_p1 = out_data_3_reg_349;

assign zext_ln45_2_fu_255_p1 = out_data_5_reg_354;

assign zext_ln45_3_fu_258_p1 = out_data_7_reg_359;

assign zext_ln45_4_fu_261_p1 = out_data_9_reg_364;

assign zext_ln45_fu_249_p1 = out_data_1_reg_344;

endmodule //myproject_relu_array_ap_fixed_6u_array_ap_fixed_16_6_5_3_0_6u_relu_config21_s
