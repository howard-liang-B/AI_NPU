-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    layer28_out_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    layer28_out_V_TVALID : OUT STD_LOGIC;
    layer28_out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_blk_n : STD_LOGIC;
    signal layer28_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_fu_236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_796 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_803 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_810 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_817 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1496_1_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_283_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_reg_834 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln65_1_fu_294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_reg_839 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_2_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_511_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_reg_849 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_1_fu_537_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_1_reg_854 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_2_fu_563_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_2_reg_859 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_3_fu_589_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_3_reg_864 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exp_res_V_0_reg_889 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exp_res_V_1_reg_896 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_2_reg_903 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_3_reg_910 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_17_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_8_reg_922 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal inv_exp_sum_V_reg_932 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln1118_fu_724_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln225_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_1_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_2_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_3_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_159_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_159_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_160_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_161_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_162_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_162_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal xor_ln1496_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1496_2_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_311_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1193_fu_317_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1193_1_fu_320_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_324_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_8_fu_330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1193_2_fu_364_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_367_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_10_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1193_3_fu_407_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_410_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_12_fu_416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_424_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1193_4_fu_450_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_453_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_14_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_3_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_fu_493_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_501_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_1_fu_519_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_527_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_2_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_2_fu_545_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_553_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_3_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_3_fu_571_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_579_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_V_1_cast41_fu_616_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_0_cast40_fu_613_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_625_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_635_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln746_fu_631_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_fu_643_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_V_3_cast43_fu_622_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_2_cast42_fu_619_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_fu_655_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_fu_665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln746_1_fu_661_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_fu_673_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln703_1_fu_681_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln703_fu_651_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_685_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_4_fu_709_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln708_3_fu_773_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_2_fu_763_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1_fu_753_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_743_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_159_ce : STD_LOGIC;
    signal grp_fu_160_ce : STD_LOGIC;
    signal grp_fu_161_ce : STD_LOGIC;
    signal grp_fu_162_ce : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_159_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_160_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_161_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_162_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_18s_17ns_26_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s_exp_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s_invert_tBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s_exp_table
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3);

    invert_table_U : component myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s_invert_tBew
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_17ns_26_2_1_U429 : component myproject_mul_18s_17ns_26_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_159_p0,
        din1 => grp_fu_159_p1,
        ce => grp_fu_159_ce,
        dout => grp_fu_159_p2);

    mul_18s_17ns_26_2_1_U430 : component myproject_mul_18s_17ns_26_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_160_p0,
        din1 => grp_fu_160_p1,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);

    mul_18s_17ns_26_2_1_U431 : component myproject_mul_18s_17ns_26_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_161_p0,
        din1 => grp_fu_161_p1,
        ce => grp_fu_161_ce,
        dout => grp_fu_161_p2);

    mul_18s_17ns_26_2_1_U432 : component myproject_mul_18s_17ns_26_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_162_p0,
        din1 => grp_fu_162_p1,
        ce => grp_fu_162_ce,
        dout => grp_fu_162_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                exp_res_V_0_reg_889 <= exp_table_q3;
                exp_res_V_1_reg_896 <= exp_table_q2;
                exp_res_V_2_reg_903 <= exp_table_q1;
                exp_res_V_3_reg_910 <= exp_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln1496_1_reg_829 <= icmp_ln1496_1_fu_274_p2;
                icmp_ln1496_reg_824 <= icmp_ln1496_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln1496_2_reg_844 <= icmp_ln1496_2_fu_300_p2;
                select_ln65_1_reg_839 <= select_ln65_1_fu_294_p3;
                select_ln65_reg_834 <= select_ln65_fu_283_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                inv_exp_sum_V_reg_932 <= invert_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Result_17_reg_917 <= p_Val2_10_fu_685_p2(17 downto 17);
                tmp_8_reg_922 <= p_Val2_10_fu_685_p2(17 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_1_reg_803 <= data_dout(31 downto 16);
                tmp_2_reg_810 <= data_dout(47 downto 32);
                tmp_3_reg_817 <= data_dout(63 downto 48);
                tmp_reg_796 <= tmp_fu_236_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y_1_reg_854 <= y_1_fu_537_p3;
                y_2_reg_859 <= y_2_fu_563_p3;
                y_3_reg_864 <= y_3_fu_589_p3;
                y_reg_849 <= y_fu_511_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_empty_n, layer28_out_V_TREADY, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((data_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((layer28_out_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln746_1_fu_661_p2 <= std_logic_vector(unsigned(exp_res_V_3_reg_910) + unsigned(exp_res_V_2_reg_903));
    add_ln746_fu_631_p2 <= std_logic_vector(unsigned(exp_res_V_1_reg_896) + unsigned(exp_res_V_0_reg_889));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, data_empty_n)
    begin
                ap_block_state1 <= ((data_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, data_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            data_blk_n <= data_empty_n;
        else 
            data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_read_assign_proc : process(ap_start, ap_CS_fsm_state1, data_empty_n)
    begin
        if ((not(((data_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_read <= ap_const_logic_1;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;

    exp_res_V_0_cast40_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_0_reg_889),18));
    exp_res_V_1_cast41_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_1_reg_896),18));
    exp_res_V_2_cast42_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_2_reg_903),18));
    exp_res_V_3_cast43_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_3_reg_910),18));
    exp_table_address0 <= zext_ln225_3_fu_609_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln225_2_fu_605_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln225_1_fu_601_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln225_fu_597_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_159_ce_assign_proc : process(layer28_out_V_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((layer28_out_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_159_ce <= ap_const_logic_1;
        else 
            grp_fu_159_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_159_p0 <= sext_ln1118_fu_724_p1(18 - 1 downto 0);
    grp_fu_159_p1 <= grp_fu_159_p10(17 - 1 downto 0);
    grp_fu_159_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_2_reg_903),26));

    grp_fu_160_ce_assign_proc : process(layer28_out_V_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((layer28_out_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_160_ce <= ap_const_logic_1;
        else 
            grp_fu_160_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_160_p0 <= sext_ln1118_fu_724_p1(18 - 1 downto 0);
    grp_fu_160_p1 <= grp_fu_160_p10(17 - 1 downto 0);
    grp_fu_160_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_0_reg_889),26));

    grp_fu_161_ce_assign_proc : process(layer28_out_V_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((layer28_out_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_161_ce <= ap_const_logic_1;
        else 
            grp_fu_161_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_161_p0 <= sext_ln1118_fu_724_p1(18 - 1 downto 0);
    grp_fu_161_p1 <= grp_fu_161_p10(17 - 1 downto 0);
    grp_fu_161_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_3_reg_910),26));

    grp_fu_162_ce_assign_proc : process(layer28_out_V_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((layer28_out_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_162_ce <= ap_const_logic_1;
        else 
            grp_fu_162_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_162_p0 <= sext_ln1118_fu_724_p1(18 - 1 downto 0);
    grp_fu_162_p1 <= grp_fu_162_p10(17 - 1 downto 0);
    grp_fu_162_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_V_1_reg_896),26));
    icmp_ln1496_1_fu_274_p2 <= "1" when (signed(tmp_2_reg_810) < signed(tmp_3_reg_817)) else "0";
    icmp_ln1496_2_fu_300_p2 <= "1" when (signed(select_ln65_fu_283_p3) < signed(select_ln65_1_fu_294_p3)) else "0";
    icmp_ln1496_fu_270_p2 <= "1" when (signed(tmp_reg_796) < signed(tmp_1_reg_803)) else "0";
    invert_table_address0 <= zext_ln235_fu_715_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer28_out_V_TDATA <= (((trunc_ln708_3_fu_773_p4 & trunc_ln708_2_fu_763_p4) & trunc_ln708_1_fu_753_p4) & trunc_ln_fu_743_p4);

    layer28_out_V_TDATA_blk_n_assign_proc : process(layer28_out_V_TREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            layer28_out_V_TDATA_blk_n <= layer28_out_V_TREADY;
        else 
            layer28_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer28_out_V_TVALID_assign_proc : process(layer28_out_V_TREADY, ap_CS_fsm_state11)
    begin
        if (((layer28_out_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            layer28_out_V_TVALID <= ap_const_logic_1;
        else 
            layer28_out_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    lhs_fu_643_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_s_fu_635_p3(0) = '1') else 
        add_ln746_fu_631_p2;
    overflow_1_fu_395_p2 <= (xor_ln785_1_fu_389_p2 and p_Result_11_fu_381_p3);
    overflow_2_fu_438_p2 <= (xor_ln785_2_fu_432_p2 and p_Result_13_fu_424_p3);
    overflow_3_fu_481_p2 <= (xor_ln785_3_fu_475_p2 and p_Result_15_fu_467_p3);
    overflow_fu_352_p2 <= (xor_ln785_fu_346_p2 and p_Result_9_fu_338_p3);
    p_Result_10_fu_373_p3 <= ret_V_1_fu_367_p2(16 downto 16);
    p_Result_11_fu_381_p3 <= ret_V_1_fu_367_p2(15 downto 15);
    p_Result_12_fu_416_p3 <= ret_V_2_fu_410_p2(16 downto 16);
    p_Result_13_fu_424_p3 <= ret_V_2_fu_410_p2(15 downto 15);
    p_Result_14_fu_459_p3 <= ret_V_3_fu_453_p2(16 downto 16);
    p_Result_15_fu_467_p3 <= ret_V_3_fu_453_p2(15 downto 15);
    p_Result_16_fu_665_p3 <= p_Val2_9_fu_655_p2(17 downto 17);
    p_Result_8_fu_330_p3 <= ret_V_fu_324_p2(16 downto 16);
    p_Result_9_fu_338_p3 <= ret_V_fu_324_p2(15 downto 15);
    p_Result_s_fu_635_p3 <= p_Val2_8_fu_625_p2(17 downto 17);
    p_Val2_10_fu_685_p2 <= std_logic_vector(unsigned(zext_ln703_1_fu_681_p1) + unsigned(zext_ln703_fu_651_p1));
    p_Val2_8_fu_625_p2 <= std_logic_vector(unsigned(exp_res_V_1_cast41_fu_616_p1) + unsigned(exp_res_V_0_cast40_fu_613_p1));
    p_Val2_9_fu_655_p2 <= std_logic_vector(unsigned(exp_res_V_3_cast43_fu_622_p1) + unsigned(exp_res_V_2_cast42_fu_619_p1));
    ret_V_1_fu_367_p2 <= std_logic_vector(signed(sext_ln1193_2_fu_364_p1) - signed(sext_ln1193_1_fu_320_p1));
    ret_V_2_fu_410_p2 <= std_logic_vector(signed(sext_ln1193_3_fu_407_p1) - signed(sext_ln1193_1_fu_320_p1));
    ret_V_3_fu_453_p2 <= std_logic_vector(signed(sext_ln1193_4_fu_450_p1) - signed(sext_ln1193_1_fu_320_p1));
    ret_V_fu_324_p2 <= std_logic_vector(signed(sext_ln1193_fu_317_p1) - signed(sext_ln1193_1_fu_320_p1));
    rhs_fu_673_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_16_fu_665_p3(0) = '1') else 
        add_ln746_1_fu_661_p2;
    select_ln384_1_fu_519_p3 <= 
        ap_const_lv10_1FF when (overflow_1_fu_395_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_2_fu_545_p3 <= 
        ap_const_lv10_1FF when (overflow_2_fu_438_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_3_fu_571_p3 <= 
        ap_const_lv10_1FF when (overflow_3_fu_481_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_fu_493_p3 <= 
        ap_const_lv10_1FF when (overflow_fu_352_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_294_p3 <= 
        tmp_2_reg_810 when (xor_ln1496_1_fu_289_p2(0) = '1') else 
        tmp_3_reg_817;
    select_ln65_fu_283_p3 <= 
        tmp_reg_796 when (xor_ln1496_fu_278_p2(0) = '1') else 
        tmp_1_reg_803;
        sext_ln1118_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_932),26));

        sext_ln1193_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_311_p3),17));

        sext_ln1193_2_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_803),17));

        sext_ln1193_3_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_810),17));

        sext_ln1193_4_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_817),17));

        sext_ln1193_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_796),17));

    tmp_4_fu_501_p4 <= ret_V_fu_324_p2(15 downto 6);
    tmp_5_fu_527_p4 <= ret_V_1_fu_367_p2(15 downto 6);
    tmp_6_fu_553_p4 <= ret_V_2_fu_410_p2(15 downto 6);
    tmp_7_fu_579_p4 <= ret_V_3_fu_453_p2(15 downto 6);
    tmp_fu_236_p1 <= data_dout(16 - 1 downto 0);
    trunc_ln708_1_fu_753_p4 <= grp_fu_162_p2(25 downto 10);
    trunc_ln708_2_fu_763_p4 <= grp_fu_159_p2(25 downto 10);
    trunc_ln708_3_fu_773_p4 <= grp_fu_161_p2(25 downto 10);
    trunc_ln_fu_743_p4 <= grp_fu_160_p2(25 downto 10);
    x_max_V_fu_311_p3 <= 
        select_ln65_reg_834 when (xor_ln1496_2_fu_306_p2(0) = '1') else 
        select_ln65_1_reg_839;
    xor_ln1496_1_fu_289_p2 <= (icmp_ln1496_1_reg_829 xor ap_const_lv1_1);
    xor_ln1496_2_fu_306_p2 <= (icmp_ln1496_2_reg_844 xor ap_const_lv1_1);
    xor_ln1496_fu_278_p2 <= (icmp_ln1496_reg_824 xor ap_const_lv1_1);
    xor_ln340_1_fu_401_p2 <= (p_Result_11_fu_381_p3 xor p_Result_10_fu_373_p3);
    xor_ln340_2_fu_444_p2 <= (p_Result_13_fu_424_p3 xor p_Result_12_fu_416_p3);
    xor_ln340_3_fu_487_p2 <= (p_Result_15_fu_467_p3 xor p_Result_14_fu_459_p3);
    xor_ln340_fu_358_p2 <= (p_Result_9_fu_338_p3 xor p_Result_8_fu_330_p3);
    xor_ln785_1_fu_389_p2 <= (p_Result_10_fu_373_p3 xor ap_const_lv1_1);
    xor_ln785_2_fu_432_p2 <= (p_Result_12_fu_416_p3 xor ap_const_lv1_1);
    xor_ln785_3_fu_475_p2 <= (p_Result_14_fu_459_p3 xor ap_const_lv1_1);
    xor_ln785_fu_346_p2 <= (p_Result_8_fu_330_p3 xor ap_const_lv1_1);
    y_1_fu_537_p3 <= 
        select_ln384_1_fu_519_p3 when (xor_ln340_1_fu_401_p2(0) = '1') else 
        tmp_5_fu_527_p4;
    y_2_fu_563_p3 <= 
        select_ln384_2_fu_545_p3 when (xor_ln340_2_fu_444_p2(0) = '1') else 
        tmp_6_fu_553_p4;
    y_3_fu_589_p3 <= 
        select_ln384_3_fu_571_p3 when (xor_ln340_3_fu_487_p2(0) = '1') else 
        tmp_7_fu_579_p4;
    y_4_fu_709_p3 <= 
        ap_const_lv10_1FF when (p_Result_17_reg_917(0) = '1') else 
        tmp_8_reg_922;
    y_fu_511_p3 <= 
        select_ln384_fu_493_p3 when (xor_ln340_fu_358_p2(0) = '1') else 
        tmp_4_fu_501_p4;
    zext_ln225_1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_854),64));
    zext_ln225_2_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_2_reg_859),64));
    zext_ln225_3_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_3_reg_864),64));
    zext_ln225_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_849),64));
    zext_ln235_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_4_fu_709_p3),64));
    zext_ln703_1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_fu_673_p3),18));
    zext_ln703_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_643_p3),18));
end behav;
