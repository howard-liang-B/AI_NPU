// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_pooling2d_cl_array_ap_fixed_2u_array_ap_fixed_16_6_5_3_0_2u_config16_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_dout,
        data_empty_n,
        data_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] data_dout;
input   data_empty_n;
output   data_read;
output  [31:0] res_din;
input   res_full_n;
output   res_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_read;
reg res_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] sY_1;
reg   [31:0] pY_1;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [15:0] kernel_data_V_9_2;
reg   [15:0] kernel_data_V_9_3;
reg   [15:0] kernel_data_V_9_6;
reg   [15:0] kernel_data_V_9_7;
reg    line_buffer_Array_9_0_0_ce0;
reg    line_buffer_Array_9_0_0_we0;
wire   [15:0] line_buffer_Array_9_0_0_q0;
reg    line_buffer_Array_9_0_1_ce0;
reg    line_buffer_Array_9_0_1_we0;
wire   [15:0] line_buffer_Array_9_0_1_d0;
wire   [15:0] line_buffer_Array_9_0_1_q0;
reg    data_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    res_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln55_reg_482;
reg   [0:0] icmp_ln55_reg_482_pp0_iter3_reg;
reg   [0:0] and_ln55_2_reg_536;
reg   [0:0] and_ln55_2_reg_536_pp0_iter3_reg;
reg   [7:0] indvar_flatten_reg_93;
wire   [7:0] add_ln109_fu_104_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_predicate_op90_write_state6;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln109_fu_110_p2;
reg   [31:0] sX_1_load_reg_477;
wire   [0:0] icmp_ln55_fu_120_p2;
reg   [0:0] icmp_ln55_reg_482_pp0_iter1_reg;
reg   [0:0] icmp_ln55_reg_482_pp0_iter2_reg;
wire   [31:0] add_ln76_fu_130_p2;
reg   [31:0] add_ln76_reg_487;
wire   [15:0] shift_buffer_V_1_0_fu_136_p1;
reg   [15:0] shift_buffer_V_1_0_reg_493;
reg   [15:0] shift_buffer_V_1_1_reg_500;
reg   [15:0] shift_buffer_V_0_0_reg_507;
reg   [15:0] p_0_reg_514;
wire   [0:0] icmp_ln55_6_fu_184_p2;
reg   [0:0] icmp_ln55_6_reg_521;
wire   [0:0] icmp_ln76_fu_190_p2;
reg   [0:0] icmp_ln76_reg_526;
reg   [0:0] icmp_ln76_reg_526_pp0_iter2_reg;
wire   [31:0] add_ln80_fu_234_p2;
reg   [31:0] add_ln80_reg_530;
wire   [0:0] and_ln55_2_fu_301_p2;
wire   [15:0] select_ln65_fu_318_p3;
reg   [15:0] select_ln65_reg_540;
wire   [15:0] select_ln65_12_fu_336_p3;
reg   [15:0] select_ln65_12_reg_546;
wire   [15:0] select_ln65_1_fu_354_p3;
reg   [15:0] select_ln65_1_reg_552;
wire   [15:0] select_ln65_14_fu_372_p3;
reg   [15:0] select_ln65_14_reg_558;
wire   [0:0] icmp_ln80_fu_379_p2;
reg   [0:0] icmp_ln80_reg_564;
reg   [31:0] sY_1_load_1_reg_568;
wire   [0:0] icmp_ln86_fu_393_p2;
reg   [0:0] icmp_ln86_reg_573;
wire   [15:0] select_ln65_13_fu_421_p3;
reg   [15:0] select_ln65_13_reg_578;
wire   [15:0] select_ln65_15_fu_437_p3;
reg   [15:0] select_ln65_15_reg_583;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] add_ln86_fu_450_p2;
reg   [31:0] ap_sig_allocacmp_sY_1_load;
reg   [31:0] ap_sig_allocacmp_sY_1_load_1;
reg   [31:0] ap_sig_allocacmp_pY_1_load_1;
reg   [31:0] ap_sig_allocacmp_pX_1_load_1;
wire   [31:0] add_ln91_fu_207_p2;
reg   [31:0] ap_sig_allocacmp_sX_1_load;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] select_ln91_fu_200_p3;
wire   [0:0] icmp_ln55_5_fu_290_p2;
wire   [0:0] and_ln55_fu_296_p2;
wire   [0:0] icmp_ln55_4_fu_280_p2;
wire   [0:0] icmp_ln1496_fu_307_p2;
wire   [0:0] xor_ln1496_fu_312_p2;
wire   [0:0] icmp_ln1496_14_fu_325_p2;
wire   [0:0] xor_ln1496_14_fu_330_p2;
wire   [0:0] icmp_ln1496_16_fu_343_p2;
wire   [0:0] xor_ln1496_16_fu_348_p2;
wire   [0:0] icmp_ln1496_17_fu_361_p2;
wire   [0:0] xor_ln1496_17_fu_366_p2;
wire   [0:0] icmp_ln1496_15_fu_411_p2;
wire   [0:0] xor_ln1496_15_fu_415_p2;
wire   [0:0] icmp_ln1496_18_fu_427_p2;
wire   [0:0] xor_ln1496_18_fu_431_p2;
wire   [31:0] select_ln86_fu_443_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_86;
reg    ap_condition_479;
reg    ap_condition_252;
reg    ap_condition_433;
reg    ap_condition_487;
reg    ap_condition_491;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 sY_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 kernel_data_V_9_2 = 16'd0;
#0 kernel_data_V_9_3 = 16'd0;
#0 kernel_data_V_9_6 = 16'd0;
#0 kernel_data_V_9_7 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

myproject_pooling2d_cl_array_ap_fixed_2u_array_ap_fixed_16_6_5_3_0_2u_config16_s_line_bzec #(
    .DataWidth( 16 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
line_buffer_Array_9_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd11),
    .ce0(line_buffer_Array_9_0_0_ce0),
    .we0(line_buffer_Array_9_0_0_we0),
    .d0(shift_buffer_V_1_0_fu_136_p1),
    .q0(line_buffer_Array_9_0_0_q0)
);

myproject_pooling2d_cl_array_ap_fixed_2u_array_ap_fixed_16_6_5_3_0_2u_config16_s_line_bzec #(
    .DataWidth( 16 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
line_buffer_Array_9_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd11),
    .ce0(line_buffer_Array_9_0_1_ce0),
    .we0(line_buffer_Array_9_0_1_we0),
    .d0(line_buffer_Array_9_0_1_d0),
    .q0(line_buffer_Array_9_0_1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_93 <= add_ln109_fu_104_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_93 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_252)) begin
        if ((icmp_ln76_fu_190_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln76_fu_190_p2 == 1'd0)) begin
            pX_1 <= add_ln76_reg_487;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_433)) begin
        if ((icmp_ln80_fu_379_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln80_fu_379_p2 == 1'd0)) begin
            pY_1 <= add_ln80_reg_530;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_252)) begin
        if ((icmp_ln76_fu_190_p2 == 1'd1)) begin
            sX_1 <= 32'd0;
        end else if ((icmp_ln76_fu_190_p2 == 1'd0)) begin
            sX_1 <= add_ln91_fu_207_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_491)) begin
            sY_1 <= 32'd0;
        end else if ((1'b1 == ap_condition_487)) begin
            sY_1 <= add_ln86_fu_450_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_fu_110_p2 == 1'd0))) begin
        add_ln76_reg_487 <= add_ln76_fu_130_p2;
        icmp_ln55_reg_482 <= icmp_ln55_fu_120_p2;
        sX_1_load_reg_477 <= ap_sig_allocacmp_sX_1_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln76_fu_190_p2 == 1'd1))) begin
        add_ln80_reg_530 <= add_ln80_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_482_pp0_iter1_reg == 1'd1))) begin
        and_ln55_2_reg_536 <= and_ln55_2_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln55_2_reg_536_pp0_iter3_reg <= and_ln55_2_reg_536;
        icmp_ln55_reg_482_pp0_iter2_reg <= icmp_ln55_reg_482_pp0_iter1_reg;
        icmp_ln55_reg_482_pp0_iter3_reg <= icmp_ln55_reg_482_pp0_iter2_reg;
        icmp_ln76_reg_526_pp0_iter2_reg <= icmp_ln76_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_482 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_6_reg_521 <= icmp_ln55_6_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_reg_482_pp0_iter1_reg <= icmp_ln55_reg_482;
        icmp_ln76_reg_526 <= icmp_ln76_fu_190_p2;
        p_0_reg_514 <= line_buffer_Array_9_0_1_q0;
        shift_buffer_V_0_0_reg_507 <= line_buffer_Array_9_0_0_q0;
        shift_buffer_V_1_0_reg_493 <= shift_buffer_V_1_0_fu_136_p1;
        shift_buffer_V_1_1_reg_500 <= {{data_dout[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_reg_526 == 1'd1))) begin
        icmp_ln80_reg_564 <= icmp_ln80_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_fu_379_p2 == 1'd0) & (icmp_ln76_reg_526 == 1'd1))) begin
        icmp_ln86_reg_573 <= icmp_ln86_fu_393_p2;
        sY_1_load_1_reg_568 <= ap_sig_allocacmp_sY_1_load_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        kernel_data_V_9_2 <= shift_buffer_V_0_0_reg_507;
        kernel_data_V_9_3 <= p_0_reg_514;
        kernel_data_V_9_6 <= shift_buffer_V_1_0_reg_493;
        kernel_data_V_9_7 <= shift_buffer_V_1_1_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln55_2_fu_301_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_482_pp0_iter1_reg == 1'd1))) begin
        select_ln65_12_reg_546 <= select_ln65_12_fu_336_p3;
        select_ln65_14_reg_558 <= select_ln65_14_fu_372_p3;
        select_ln65_1_reg_552 <= select_ln65_1_fu_354_p3;
        select_ln65_reg_540 <= select_ln65_fu_318_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln55_2_reg_536) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_482_pp0_iter2_reg == 1'd1))) begin
        select_ln65_13_reg_578 <= select_ln65_13_fu_421_p3;
        select_ln65_15_reg_583 <= select_ln65_15_fu_437_p3;
    end
end

always @ (*) begin
    if ((icmp_ln109_fu_110_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_86)) begin
        if ((icmp_ln76_fu_190_p2 == 1'd1)) begin
            ap_sig_allocacmp_pX_1_load_1 = 32'd0;
        end else if ((icmp_ln76_fu_190_p2 == 1'd0)) begin
            ap_sig_allocacmp_pX_1_load_1 = add_ln76_reg_487;
        end else begin
            ap_sig_allocacmp_pX_1_load_1 = pX_1;
        end
    end else begin
        ap_sig_allocacmp_pX_1_load_1 = pX_1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_479)) begin
        if ((icmp_ln80_fu_379_p2 == 1'd1)) begin
            ap_sig_allocacmp_pY_1_load_1 = 32'd0;
        end else if ((icmp_ln80_fu_379_p2 == 1'd0)) begin
            ap_sig_allocacmp_pY_1_load_1 = add_ln80_reg_530;
        end else begin
            ap_sig_allocacmp_pY_1_load_1 = pY_1;
        end
    end else begin
        ap_sig_allocacmp_pY_1_load_1 = pY_1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_86)) begin
        if ((icmp_ln76_fu_190_p2 == 1'd1)) begin
            ap_sig_allocacmp_sX_1_load = 32'd0;
        end else if ((icmp_ln76_fu_190_p2 == 1'd0)) begin
            ap_sig_allocacmp_sX_1_load = add_ln91_fu_207_p2;
        end else begin
            ap_sig_allocacmp_sX_1_load = sX_1;
        end
    end else begin
        ap_sig_allocacmp_sX_1_load = sX_1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln80_reg_564 == 1'd0) & (icmp_ln76_reg_526_pp0_iter2_reg == 1'd1))) begin
        ap_sig_allocacmp_sY_1_load = add_ln86_fu_450_p2;
    end else begin
        ap_sig_allocacmp_sY_1_load = sY_1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln80_reg_564 == 1'd0) & (icmp_ln76_reg_526_pp0_iter2_reg == 1'd1))) begin
        ap_sig_allocacmp_sY_1_load_1 = add_ln86_fu_450_p2;
    end else begin
        ap_sig_allocacmp_sY_1_load_1 = sY_1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_blk_n = data_empty_n;
    end else begin
        data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_read = 1'b1;
    end else begin
        data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_9_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_9_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_9_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_9_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_9_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_9_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_9_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_9_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln55_2_reg_536_pp0_iter3_reg) & (icmp_ln55_reg_482_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op90_write_state6 == 1'b1))) begin
        res_write = 1'b1;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln109_fu_110_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln109_fu_110_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_104_p2 = (indvar_flatten_reg_93 + 8'd1);

assign add_ln76_fu_130_p2 = (ap_sig_allocacmp_pX_1_load_1 + 32'd1);

assign add_ln80_fu_234_p2 = (ap_sig_allocacmp_pY_1_load_1 + 32'd1);

assign add_ln86_fu_450_p2 = (sY_1_load_1_reg_568 + select_ln86_fu_443_p3);

assign add_ln91_fu_207_p2 = (sX_1_load_reg_477 + select_ln91_fu_200_p3);

assign and_ln55_2_fu_301_p2 = (icmp_ln55_4_fu_280_p2 & and_ln55_fu_296_p2);

assign and_ln55_fu_296_p2 = (icmp_ln55_6_reg_521 & icmp_ln55_5_fu_290_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (res_full_n == 1'b0) & (ap_predicate_op90_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (res_full_n == 1'b0) & (ap_predicate_op90_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (res_full_n == 1'b0) & (ap_predicate_op90_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (data_empty_n == 1'b0);
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((res_full_n == 1'b0) & (ap_predicate_op90_write_state6 == 1'b1));
end

always @ (*) begin
    ap_condition_252 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_433 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln76_reg_526 == 1'd1));
end

always @ (*) begin
    ap_condition_479 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln76_reg_526 == 1'd1));
end

always @ (*) begin
    ap_condition_487 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln80_reg_564 == 1'd0) & (icmp_ln76_reg_526_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_condition_491 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln80_fu_379_p2 == 1'd1) & (icmp_ln76_reg_526 == 1'd1));
end

always @ (*) begin
    ap_condition_86 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op90_write_state6 = ((1'd1 == and_ln55_2_reg_536_pp0_iter3_reg) & (icmp_ln55_reg_482_pp0_iter3_reg == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln109_fu_110_p2 = ((indvar_flatten_reg_93 == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_325_p2 = (($signed(kernel_data_V_9_6) < $signed(shift_buffer_V_1_0_reg_493)) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_411_p2 = (($signed(select_ln65_reg_540) < $signed(select_ln65_12_reg_546)) ? 1'b1 : 1'b0);

assign icmp_ln1496_16_fu_343_p2 = (($signed(kernel_data_V_9_3) < $signed(p_0_reg_514)) ? 1'b1 : 1'b0);

assign icmp_ln1496_17_fu_361_p2 = (($signed(kernel_data_V_9_7) < $signed(shift_buffer_V_1_1_reg_500)) ? 1'b1 : 1'b0);

assign icmp_ln1496_18_fu_427_p2 = (($signed(select_ln65_1_reg_552) < $signed(select_ln65_14_reg_558)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_307_p2 = (($signed(kernel_data_V_9_2) < $signed(shift_buffer_V_0_0_reg_507)) ? 1'b1 : 1'b0);

assign icmp_ln55_4_fu_280_p2 = ((ap_sig_allocacmp_sY_1_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln55_5_fu_290_p2 = (($signed(pY_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_6_fu_184_p2 = (($signed(pX_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_120_p2 = ((ap_sig_allocacmp_sX_1_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_190_p2 = ((add_ln76_reg_487 == 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_379_p2 = ((add_ln80_reg_530 == 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_393_p2 = ((ap_sig_allocacmp_sY_1_load_1 == 32'd1) ? 1'b1 : 1'b0);

assign line_buffer_Array_9_0_1_d0 = {{data_dout[31:16]}};

assign res_din = {{select_ln65_15_reg_583}, {select_ln65_13_reg_578}};

assign select_ln65_12_fu_336_p3 = ((xor_ln1496_14_fu_330_p2[0:0] == 1'b1) ? kernel_data_V_9_6 : shift_buffer_V_1_0_reg_493);

assign select_ln65_13_fu_421_p3 = ((xor_ln1496_15_fu_415_p2[0:0] == 1'b1) ? select_ln65_reg_540 : select_ln65_12_reg_546);

assign select_ln65_14_fu_372_p3 = ((xor_ln1496_17_fu_366_p2[0:0] == 1'b1) ? kernel_data_V_9_7 : shift_buffer_V_1_1_reg_500);

assign select_ln65_15_fu_437_p3 = ((xor_ln1496_18_fu_431_p2[0:0] == 1'b1) ? select_ln65_1_reg_552 : select_ln65_14_reg_558);

assign select_ln65_1_fu_354_p3 = ((xor_ln1496_16_fu_348_p2[0:0] == 1'b1) ? kernel_data_V_9_3 : p_0_reg_514);

assign select_ln65_fu_318_p3 = ((xor_ln1496_fu_312_p2[0:0] == 1'b1) ? kernel_data_V_9_2 : shift_buffer_V_0_0_reg_507);

assign select_ln86_fu_443_p3 = ((icmp_ln86_reg_573[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign select_ln91_fu_200_p3 = ((icmp_ln55_reg_482[0:0] == 1'b1) ? 32'd4294967295 : 32'd1);

assign shift_buffer_V_1_0_fu_136_p1 = data_dout[15:0];

assign start_out = real_start;

assign xor_ln1496_14_fu_330_p2 = (icmp_ln1496_14_fu_325_p2 ^ 1'd1);

assign xor_ln1496_15_fu_415_p2 = (icmp_ln1496_15_fu_411_p2 ^ 1'd1);

assign xor_ln1496_16_fu_348_p2 = (icmp_ln1496_16_fu_343_p2 ^ 1'd1);

assign xor_ln1496_17_fu_366_p2 = (icmp_ln1496_17_fu_361_p2 ^ 1'd1);

assign xor_ln1496_18_fu_431_p2 = (icmp_ln1496_18_fu_427_p2 ^ 1'd1);

assign xor_ln1496_fu_312_p2 = (icmp_ln1496_fu_307_p2 ^ 1'd1);

endmodule //myproject_pooling2d_cl_array_ap_fixed_2u_array_ap_fixed_16_6_5_3_0_2u_config16_s
