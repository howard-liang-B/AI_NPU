// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_dout,
        data_empty_n,
        data_read,
        layer28_out_V_TDATA,
        layer28_out_V_TVALID,
        layer28_out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] data_dout;
input   data_empty_n;
output   data_read;
output  [63:0] layer28_out_V_TDATA;
output   layer28_out_V_TVALID;
input   layer28_out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_read;
reg layer28_out_V_TVALID;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [16:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [16:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [16:0] exp_table_q2;
wire   [9:0] exp_table_address3;
reg    exp_table_ce3;
wire   [16:0] exp_table_q3;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg    data_blk_n;
reg    layer28_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state11;
wire  signed [15:0] tmp_fu_236_p1;
reg  signed [15:0] tmp_reg_796;
reg  signed [15:0] tmp_1_reg_803;
reg  signed [15:0] tmp_2_reg_810;
reg  signed [15:0] tmp_3_reg_817;
wire   [0:0] icmp_ln1496_fu_270_p2;
reg   [0:0] icmp_ln1496_reg_824;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1496_1_fu_274_p2;
reg   [0:0] icmp_ln1496_1_reg_829;
wire   [15:0] select_ln65_fu_283_p3;
reg   [15:0] select_ln65_reg_834;
wire    ap_CS_fsm_state3;
wire   [15:0] select_ln65_1_fu_294_p3;
reg   [15:0] select_ln65_1_reg_839;
wire   [0:0] icmp_ln1496_2_fu_300_p2;
reg   [0:0] icmp_ln1496_2_reg_844;
wire   [9:0] y_fu_511_p3;
reg   [9:0] y_reg_849;
wire    ap_CS_fsm_state4;
wire   [9:0] y_1_fu_537_p3;
reg   [9:0] y_1_reg_854;
wire   [9:0] y_2_fu_563_p3;
reg   [9:0] y_2_reg_859;
wire   [9:0] y_3_fu_589_p3;
reg   [9:0] y_3_reg_864;
wire    ap_CS_fsm_state5;
reg   [16:0] exp_res_V_0_reg_889;
wire    ap_CS_fsm_state6;
reg   [16:0] exp_res_V_1_reg_896;
reg   [16:0] exp_res_V_2_reg_903;
reg   [16:0] exp_res_V_3_reg_910;
reg   [0:0] p_Result_17_reg_917;
wire    ap_CS_fsm_state7;
reg   [9:0] tmp_8_reg_922;
wire    ap_CS_fsm_state8;
reg   [17:0] inv_exp_sum_V_reg_932;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire  signed [25:0] sext_ln1118_fu_724_p1;
wire   [63:0] zext_ln225_fu_597_p1;
wire   [63:0] zext_ln225_1_fu_601_p1;
wire   [63:0] zext_ln225_2_fu_605_p1;
wire   [63:0] zext_ln225_3_fu_609_p1;
wire   [63:0] zext_ln235_fu_715_p1;
reg    ap_block_state1;
wire  signed [17:0] grp_fu_159_p0;
wire   [16:0] grp_fu_159_p1;
wire  signed [17:0] grp_fu_160_p0;
wire   [16:0] grp_fu_160_p1;
wire  signed [17:0] grp_fu_161_p0;
wire   [16:0] grp_fu_161_p1;
wire  signed [17:0] grp_fu_162_p0;
wire   [16:0] grp_fu_162_p1;
wire   [0:0] xor_ln1496_fu_278_p2;
wire   [0:0] xor_ln1496_1_fu_289_p2;
wire   [0:0] xor_ln1496_2_fu_306_p2;
wire   [15:0] x_max_V_fu_311_p3;
wire  signed [16:0] sext_ln1193_fu_317_p1;
wire  signed [16:0] sext_ln1193_1_fu_320_p1;
wire   [16:0] ret_V_fu_324_p2;
wire   [0:0] p_Result_8_fu_330_p3;
wire   [0:0] p_Result_9_fu_338_p3;
wire   [0:0] xor_ln785_fu_346_p2;
wire  signed [16:0] sext_ln1193_2_fu_364_p1;
wire   [16:0] ret_V_1_fu_367_p2;
wire   [0:0] p_Result_10_fu_373_p3;
wire   [0:0] p_Result_11_fu_381_p3;
wire   [0:0] xor_ln785_1_fu_389_p2;
wire  signed [16:0] sext_ln1193_3_fu_407_p1;
wire   [16:0] ret_V_2_fu_410_p2;
wire   [0:0] p_Result_12_fu_416_p3;
wire   [0:0] p_Result_13_fu_424_p3;
wire   [0:0] xor_ln785_2_fu_432_p2;
wire  signed [16:0] sext_ln1193_4_fu_450_p1;
wire   [16:0] ret_V_3_fu_453_p2;
wire   [0:0] p_Result_14_fu_459_p3;
wire   [0:0] p_Result_15_fu_467_p3;
wire   [0:0] xor_ln785_3_fu_475_p2;
wire   [0:0] overflow_fu_352_p2;
wire   [0:0] xor_ln340_fu_358_p2;
wire   [9:0] select_ln384_fu_493_p3;
wire   [9:0] tmp_4_fu_501_p4;
wire   [0:0] overflow_1_fu_395_p2;
wire   [0:0] xor_ln340_1_fu_401_p2;
wire   [9:0] select_ln384_1_fu_519_p3;
wire   [9:0] tmp_5_fu_527_p4;
wire   [0:0] overflow_2_fu_438_p2;
wire   [0:0] xor_ln340_2_fu_444_p2;
wire   [9:0] select_ln384_2_fu_545_p3;
wire   [9:0] tmp_6_fu_553_p4;
wire   [0:0] overflow_3_fu_481_p2;
wire   [0:0] xor_ln340_3_fu_487_p2;
wire   [9:0] select_ln384_3_fu_571_p3;
wire   [9:0] tmp_7_fu_579_p4;
wire   [17:0] exp_res_V_1_cast41_fu_616_p1;
wire   [17:0] exp_res_V_0_cast40_fu_613_p1;
wire   [17:0] p_Val2_8_fu_625_p2;
wire   [0:0] p_Result_s_fu_635_p3;
wire   [16:0] add_ln746_fu_631_p2;
wire   [16:0] lhs_fu_643_p3;
wire   [17:0] exp_res_V_3_cast43_fu_622_p1;
wire   [17:0] exp_res_V_2_cast42_fu_619_p1;
wire   [17:0] p_Val2_9_fu_655_p2;
wire   [0:0] p_Result_16_fu_665_p3;
wire   [16:0] add_ln746_1_fu_661_p2;
wire   [16:0] rhs_fu_673_p3;
wire   [17:0] zext_ln703_1_fu_681_p1;
wire   [17:0] zext_ln703_fu_651_p1;
wire   [17:0] p_Val2_10_fu_685_p2;
wire   [9:0] y_4_fu_709_p3;
wire   [25:0] grp_fu_160_p2;
wire   [25:0] grp_fu_162_p2;
wire   [25:0] grp_fu_159_p2;
wire   [25:0] grp_fu_161_p2;
wire   [15:0] trunc_ln708_3_fu_773_p4;
wire   [15:0] trunc_ln708_2_fu_763_p4;
wire   [15:0] trunc_ln708_1_fu_753_p4;
wire   [15:0] trunc_ln_fu_743_p4;
reg    grp_fu_159_ce;
reg    grp_fu_160_ce;
reg    grp_fu_161_ce;
reg    grp_fu_162_ce;
wire    ap_CS_fsm_state12;
reg   [11:0] ap_NS_fsm;
wire   [25:0] grp_fu_159_p10;
wire   [25:0] grp_fu_160_p10;
wire   [25:0] grp_fu_161_p10;
wire   [25:0] grp_fu_162_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s_exp_table #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2),
    .address3(exp_table_address3),
    .ce3(exp_table_ce3),
    .q3(exp_table_q3)
);

myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s_invert_tBew #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

myproject_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_2_1_U429(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_159_p0),
    .din1(grp_fu_159_p1),
    .ce(grp_fu_159_ce),
    .dout(grp_fu_159_p2)
);

myproject_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_2_1_U430(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_160_p0),
    .din1(grp_fu_160_p1),
    .ce(grp_fu_160_ce),
    .dout(grp_fu_160_p2)
);

myproject_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_2_1_U431(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_161_p0),
    .din1(grp_fu_161_p1),
    .ce(grp_fu_161_ce),
    .dout(grp_fu_161_p2)
);

myproject_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
mul_18s_17ns_26_2_1_U432(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_162_p0),
    .din1(grp_fu_162_p1),
    .ce(grp_fu_162_ce),
    .dout(grp_fu_162_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        exp_res_V_0_reg_889 <= exp_table_q3;
        exp_res_V_1_reg_896 <= exp_table_q2;
        exp_res_V_2_reg_903 <= exp_table_q1;
        exp_res_V_3_reg_910 <= exp_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln1496_1_reg_829 <= icmp_ln1496_1_fu_274_p2;
        icmp_ln1496_reg_824 <= icmp_ln1496_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln1496_2_reg_844 <= icmp_ln1496_2_fu_300_p2;
        select_ln65_1_reg_839 <= select_ln65_1_fu_294_p3;
        select_ln65_reg_834 <= select_ln65_fu_283_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        inv_exp_sum_V_reg_932 <= invert_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Result_17_reg_917 <= p_Val2_10_fu_685_p2[32'd17];
        tmp_8_reg_922 <= {{p_Val2_10_fu_685_p2[17:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_1_reg_803 <= {{data_dout[31:16]}};
        tmp_2_reg_810 <= {{data_dout[47:32]}};
        tmp_3_reg_817 <= {{data_dout[63:48]}};
        tmp_reg_796 <= tmp_fu_236_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_1_reg_854 <= y_1_fu_537_p3;
        y_2_reg_859 <= y_2_fu_563_p3;
        y_3_reg_864 <= y_3_fu_589_p3;
        y_reg_849 <= y_fu_511_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        data_blk_n = data_empty_n;
    end else begin
        data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_read = 1'b1;
    end else begin
        data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        exp_table_ce3 = 1'b1;
    end else begin
        exp_table_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((layer28_out_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        grp_fu_159_ce = 1'b1;
    end else begin
        grp_fu_159_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((layer28_out_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        grp_fu_160_ce = 1'b1;
    end else begin
        grp_fu_160_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((layer28_out_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        grp_fu_161_ce = 1'b1;
    end else begin
        grp_fu_161_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((layer28_out_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        grp_fu_162_ce = 1'b1;
    end else begin
        grp_fu_162_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        layer28_out_V_TDATA_blk_n = layer28_out_V_TREADY;
    end else begin
        layer28_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer28_out_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        layer28_out_V_TVALID = 1'b1;
    end else begin
        layer28_out_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((data_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((layer28_out_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_1_fu_661_p2 = (exp_res_V_3_reg_910 + exp_res_V_2_reg_903);

assign add_ln746_fu_631_p2 = (exp_res_V_1_reg_896 + exp_res_V_0_reg_889);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((data_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign exp_res_V_0_cast40_fu_613_p1 = exp_res_V_0_reg_889;

assign exp_res_V_1_cast41_fu_616_p1 = exp_res_V_1_reg_896;

assign exp_res_V_2_cast42_fu_619_p1 = exp_res_V_2_reg_903;

assign exp_res_V_3_cast43_fu_622_p1 = exp_res_V_3_reg_910;

assign exp_table_address0 = zext_ln225_3_fu_609_p1;

assign exp_table_address1 = zext_ln225_2_fu_605_p1;

assign exp_table_address2 = zext_ln225_1_fu_601_p1;

assign exp_table_address3 = zext_ln225_fu_597_p1;

assign grp_fu_159_p0 = sext_ln1118_fu_724_p1;

assign grp_fu_159_p1 = grp_fu_159_p10;

assign grp_fu_159_p10 = exp_res_V_2_reg_903;

assign grp_fu_160_p0 = sext_ln1118_fu_724_p1;

assign grp_fu_160_p1 = grp_fu_160_p10;

assign grp_fu_160_p10 = exp_res_V_0_reg_889;

assign grp_fu_161_p0 = sext_ln1118_fu_724_p1;

assign grp_fu_161_p1 = grp_fu_161_p10;

assign grp_fu_161_p10 = exp_res_V_3_reg_910;

assign grp_fu_162_p0 = sext_ln1118_fu_724_p1;

assign grp_fu_162_p1 = grp_fu_162_p10;

assign grp_fu_162_p10 = exp_res_V_1_reg_896;

assign icmp_ln1496_1_fu_274_p2 = (($signed(tmp_2_reg_810) < $signed(tmp_3_reg_817)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_300_p2 = (($signed(select_ln65_fu_283_p3) < $signed(select_ln65_1_fu_294_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_270_p2 = (($signed(tmp_reg_796) < $signed(tmp_1_reg_803)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln235_fu_715_p1;

assign layer28_out_V_TDATA = {{{{trunc_ln708_3_fu_773_p4}, {trunc_ln708_2_fu_763_p4}}, {trunc_ln708_1_fu_753_p4}}, {trunc_ln_fu_743_p4}};

assign lhs_fu_643_p3 = ((p_Result_s_fu_635_p3[0:0] == 1'b1) ? 17'd131071 : add_ln746_fu_631_p2);

assign overflow_1_fu_395_p2 = (xor_ln785_1_fu_389_p2 & p_Result_11_fu_381_p3);

assign overflow_2_fu_438_p2 = (xor_ln785_2_fu_432_p2 & p_Result_13_fu_424_p3);

assign overflow_3_fu_481_p2 = (xor_ln785_3_fu_475_p2 & p_Result_15_fu_467_p3);

assign overflow_fu_352_p2 = (xor_ln785_fu_346_p2 & p_Result_9_fu_338_p3);

assign p_Result_10_fu_373_p3 = ret_V_1_fu_367_p2[32'd16];

assign p_Result_11_fu_381_p3 = ret_V_1_fu_367_p2[32'd15];

assign p_Result_12_fu_416_p3 = ret_V_2_fu_410_p2[32'd16];

assign p_Result_13_fu_424_p3 = ret_V_2_fu_410_p2[32'd15];

assign p_Result_14_fu_459_p3 = ret_V_3_fu_453_p2[32'd16];

assign p_Result_15_fu_467_p3 = ret_V_3_fu_453_p2[32'd15];

assign p_Result_16_fu_665_p3 = p_Val2_9_fu_655_p2[32'd17];

assign p_Result_8_fu_330_p3 = ret_V_fu_324_p2[32'd16];

assign p_Result_9_fu_338_p3 = ret_V_fu_324_p2[32'd15];

assign p_Result_s_fu_635_p3 = p_Val2_8_fu_625_p2[32'd17];

assign p_Val2_10_fu_685_p2 = (zext_ln703_1_fu_681_p1 + zext_ln703_fu_651_p1);

assign p_Val2_8_fu_625_p2 = (exp_res_V_1_cast41_fu_616_p1 + exp_res_V_0_cast40_fu_613_p1);

assign p_Val2_9_fu_655_p2 = (exp_res_V_3_cast43_fu_622_p1 + exp_res_V_2_cast42_fu_619_p1);

assign ret_V_1_fu_367_p2 = ($signed(sext_ln1193_2_fu_364_p1) - $signed(sext_ln1193_1_fu_320_p1));

assign ret_V_2_fu_410_p2 = ($signed(sext_ln1193_3_fu_407_p1) - $signed(sext_ln1193_1_fu_320_p1));

assign ret_V_3_fu_453_p2 = ($signed(sext_ln1193_4_fu_450_p1) - $signed(sext_ln1193_1_fu_320_p1));

assign ret_V_fu_324_p2 = ($signed(sext_ln1193_fu_317_p1) - $signed(sext_ln1193_1_fu_320_p1));

assign rhs_fu_673_p3 = ((p_Result_16_fu_665_p3[0:0] == 1'b1) ? 17'd131071 : add_ln746_1_fu_661_p2);

assign select_ln384_1_fu_519_p3 = ((overflow_1_fu_395_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_2_fu_545_p3 = ((overflow_2_fu_438_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_3_fu_571_p3 = ((overflow_3_fu_481_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_fu_493_p3 = ((overflow_fu_352_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln65_1_fu_294_p3 = ((xor_ln1496_1_fu_289_p2[0:0] == 1'b1) ? tmp_2_reg_810 : tmp_3_reg_817);

assign select_ln65_fu_283_p3 = ((xor_ln1496_fu_278_p2[0:0] == 1'b1) ? tmp_reg_796 : tmp_1_reg_803);

assign sext_ln1118_fu_724_p1 = $signed(inv_exp_sum_V_reg_932);

assign sext_ln1193_1_fu_320_p1 = $signed(x_max_V_fu_311_p3);

assign sext_ln1193_2_fu_364_p1 = tmp_1_reg_803;

assign sext_ln1193_3_fu_407_p1 = tmp_2_reg_810;

assign sext_ln1193_4_fu_450_p1 = tmp_3_reg_817;

assign sext_ln1193_fu_317_p1 = tmp_reg_796;

assign tmp_4_fu_501_p4 = {{ret_V_fu_324_p2[15:6]}};

assign tmp_5_fu_527_p4 = {{ret_V_1_fu_367_p2[15:6]}};

assign tmp_6_fu_553_p4 = {{ret_V_2_fu_410_p2[15:6]}};

assign tmp_7_fu_579_p4 = {{ret_V_3_fu_453_p2[15:6]}};

assign tmp_fu_236_p1 = data_dout[15:0];

assign trunc_ln708_1_fu_753_p4 = {{grp_fu_162_p2[25:10]}};

assign trunc_ln708_2_fu_763_p4 = {{grp_fu_159_p2[25:10]}};

assign trunc_ln708_3_fu_773_p4 = {{grp_fu_161_p2[25:10]}};

assign trunc_ln_fu_743_p4 = {{grp_fu_160_p2[25:10]}};

assign x_max_V_fu_311_p3 = ((xor_ln1496_2_fu_306_p2[0:0] == 1'b1) ? select_ln65_reg_834 : select_ln65_1_reg_839);

assign xor_ln1496_1_fu_289_p2 = (icmp_ln1496_1_reg_829 ^ 1'd1);

assign xor_ln1496_2_fu_306_p2 = (icmp_ln1496_2_reg_844 ^ 1'd1);

assign xor_ln1496_fu_278_p2 = (icmp_ln1496_reg_824 ^ 1'd1);

assign xor_ln340_1_fu_401_p2 = (p_Result_11_fu_381_p3 ^ p_Result_10_fu_373_p3);

assign xor_ln340_2_fu_444_p2 = (p_Result_13_fu_424_p3 ^ p_Result_12_fu_416_p3);

assign xor_ln340_3_fu_487_p2 = (p_Result_15_fu_467_p3 ^ p_Result_14_fu_459_p3);

assign xor_ln340_fu_358_p2 = (p_Result_9_fu_338_p3 ^ p_Result_8_fu_330_p3);

assign xor_ln785_1_fu_389_p2 = (p_Result_10_fu_373_p3 ^ 1'd1);

assign xor_ln785_2_fu_432_p2 = (p_Result_12_fu_416_p3 ^ 1'd1);

assign xor_ln785_3_fu_475_p2 = (p_Result_14_fu_459_p3 ^ 1'd1);

assign xor_ln785_fu_346_p2 = (p_Result_8_fu_330_p3 ^ 1'd1);

assign y_1_fu_537_p3 = ((xor_ln340_1_fu_401_p2[0:0] == 1'b1) ? select_ln384_1_fu_519_p3 : tmp_5_fu_527_p4);

assign y_2_fu_563_p3 = ((xor_ln340_2_fu_444_p2[0:0] == 1'b1) ? select_ln384_2_fu_545_p3 : tmp_6_fu_553_p4);

assign y_3_fu_589_p3 = ((xor_ln340_3_fu_487_p2[0:0] == 1'b1) ? select_ln384_3_fu_571_p3 : tmp_7_fu_579_p4);

assign y_4_fu_709_p3 = ((p_Result_17_reg_917[0:0] == 1'b1) ? 10'd511 : tmp_8_reg_922);

assign y_fu_511_p3 = ((xor_ln340_fu_358_p2[0:0] == 1'b1) ? select_ln384_fu_493_p3 : tmp_4_fu_501_p4);

assign zext_ln225_1_fu_601_p1 = y_1_reg_854;

assign zext_ln225_2_fu_605_p1 = y_2_reg_859;

assign zext_ln225_3_fu_609_p1 = y_3_reg_864;

assign zext_ln225_fu_597_p1 = y_reg_849;

assign zext_ln235_fu_715_p1 = y_4_fu_709_p3;

assign zext_ln703_1_fu_681_p1 = rhs_fu_673_p3;

assign zext_ln703_fu_651_p1 = lhs_fu_643_p3;

endmodule //myproject_softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config28_s
