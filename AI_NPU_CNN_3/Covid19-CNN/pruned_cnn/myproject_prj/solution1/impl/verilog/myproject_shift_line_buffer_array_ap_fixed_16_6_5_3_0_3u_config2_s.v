// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_3u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        kernel_data_V_6_3_i,
        kernel_data_V_6_3_o,
        kernel_data_V_6_3_o_ap_vld,
        kernel_data_V_6_0,
        kernel_data_V_6_0_ap_vld,
        kernel_data_V_6_4_i,
        kernel_data_V_6_4_o,
        kernel_data_V_6_4_o_ap_vld,
        kernel_data_V_6_1,
        kernel_data_V_6_1_ap_vld,
        kernel_data_V_6_5_i,
        kernel_data_V_6_5_o,
        kernel_data_V_6_5_o_ap_vld,
        kernel_data_V_6_2,
        kernel_data_V_6_2_ap_vld,
        kernel_data_V_6_12_i,
        kernel_data_V_6_12_o,
        kernel_data_V_6_12_o_ap_vld,
        kernel_data_V_6_9,
        kernel_data_V_6_9_ap_vld,
        kernel_data_V_6_13_i,
        kernel_data_V_6_13_o,
        kernel_data_V_6_13_o_ap_vld,
        kernel_data_V_6_10,
        kernel_data_V_6_10_ap_vld,
        kernel_data_V_6_14_i,
        kernel_data_V_6_14_o,
        kernel_data_V_6_14_o_ap_vld,
        kernel_data_V_6_11,
        kernel_data_V_6_11_ap_vld,
        kernel_data_V_6_21_i,
        kernel_data_V_6_21_o,
        kernel_data_V_6_21_o_ap_vld,
        kernel_data_V_6_18,
        kernel_data_V_6_18_ap_vld,
        kernel_data_V_6_22_i,
        kernel_data_V_6_22_o,
        kernel_data_V_6_22_o_ap_vld,
        kernel_data_V_6_19,
        kernel_data_V_6_19_ap_vld,
        kernel_data_V_6_23_i,
        kernel_data_V_6_23_o,
        kernel_data_V_6_23_o_ap_vld,
        kernel_data_V_6_20,
        kernel_data_V_6_20_ap_vld,
        kernel_data_V_6_6_i,
        kernel_data_V_6_6_o,
        kernel_data_V_6_6_o_ap_vld,
        kernel_data_V_6_7_i,
        kernel_data_V_6_7_o,
        kernel_data_V_6_7_o_ap_vld,
        kernel_data_V_6_8_i,
        kernel_data_V_6_8_o,
        kernel_data_V_6_8_o_ap_vld,
        kernel_data_V_6_15_i,
        kernel_data_V_6_15_o,
        kernel_data_V_6_15_o_ap_vld,
        kernel_data_V_6_16_i,
        kernel_data_V_6_16_o,
        kernel_data_V_6_16_o_ap_vld,
        kernel_data_V_6_17_i,
        kernel_data_V_6_17_o,
        kernel_data_V_6_17_o_ap_vld,
        kernel_data_V_6_24_i,
        kernel_data_V_6_24_o,
        kernel_data_V_6_24_o_ap_vld,
        kernel_data_V_6_25_i,
        kernel_data_V_6_25_o,
        kernel_data_V_6_25_o_ap_vld,
        kernel_data_V_6_26_i,
        kernel_data_V_6_26_o,
        kernel_data_V_6_26_o_ap_vld,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] kernel_data_V_6_3_i;
output  [15:0] kernel_data_V_6_3_o;
output   kernel_data_V_6_3_o_ap_vld;
output  [15:0] kernel_data_V_6_0;
output   kernel_data_V_6_0_ap_vld;
input  [15:0] kernel_data_V_6_4_i;
output  [15:0] kernel_data_V_6_4_o;
output   kernel_data_V_6_4_o_ap_vld;
output  [15:0] kernel_data_V_6_1;
output   kernel_data_V_6_1_ap_vld;
input  [15:0] kernel_data_V_6_5_i;
output  [15:0] kernel_data_V_6_5_o;
output   kernel_data_V_6_5_o_ap_vld;
output  [15:0] kernel_data_V_6_2;
output   kernel_data_V_6_2_ap_vld;
input  [15:0] kernel_data_V_6_12_i;
output  [15:0] kernel_data_V_6_12_o;
output   kernel_data_V_6_12_o_ap_vld;
output  [15:0] kernel_data_V_6_9;
output   kernel_data_V_6_9_ap_vld;
input  [15:0] kernel_data_V_6_13_i;
output  [15:0] kernel_data_V_6_13_o;
output   kernel_data_V_6_13_o_ap_vld;
output  [15:0] kernel_data_V_6_10;
output   kernel_data_V_6_10_ap_vld;
input  [15:0] kernel_data_V_6_14_i;
output  [15:0] kernel_data_V_6_14_o;
output   kernel_data_V_6_14_o_ap_vld;
output  [15:0] kernel_data_V_6_11;
output   kernel_data_V_6_11_ap_vld;
input  [15:0] kernel_data_V_6_21_i;
output  [15:0] kernel_data_V_6_21_o;
output   kernel_data_V_6_21_o_ap_vld;
output  [15:0] kernel_data_V_6_18;
output   kernel_data_V_6_18_ap_vld;
input  [15:0] kernel_data_V_6_22_i;
output  [15:0] kernel_data_V_6_22_o;
output   kernel_data_V_6_22_o_ap_vld;
output  [15:0] kernel_data_V_6_19;
output   kernel_data_V_6_19_ap_vld;
input  [15:0] kernel_data_V_6_23_i;
output  [15:0] kernel_data_V_6_23_o;
output   kernel_data_V_6_23_o_ap_vld;
output  [15:0] kernel_data_V_6_20;
output   kernel_data_V_6_20_ap_vld;
input  [15:0] kernel_data_V_6_6_i;
output  [15:0] kernel_data_V_6_6_o;
output   kernel_data_V_6_6_o_ap_vld;
input  [15:0] kernel_data_V_6_7_i;
output  [15:0] kernel_data_V_6_7_o;
output   kernel_data_V_6_7_o_ap_vld;
input  [15:0] kernel_data_V_6_8_i;
output  [15:0] kernel_data_V_6_8_o;
output   kernel_data_V_6_8_o_ap_vld;
input  [15:0] kernel_data_V_6_15_i;
output  [15:0] kernel_data_V_6_15_o;
output   kernel_data_V_6_15_o_ap_vld;
input  [15:0] kernel_data_V_6_16_i;
output  [15:0] kernel_data_V_6_16_o;
output   kernel_data_V_6_16_o_ap_vld;
input  [15:0] kernel_data_V_6_17_i;
output  [15:0] kernel_data_V_6_17_o;
output   kernel_data_V_6_17_o_ap_vld;
input  [15:0] kernel_data_V_6_24_i;
output  [15:0] kernel_data_V_6_24_o;
output   kernel_data_V_6_24_o_ap_vld;
input  [15:0] kernel_data_V_6_25_i;
output  [15:0] kernel_data_V_6_25_o;
output   kernel_data_V_6_25_o_ap_vld;
input  [15:0] kernel_data_V_6_26_i;
output  [15:0] kernel_data_V_6_26_o;
output   kernel_data_V_6_26_o_ap_vld;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] kernel_data_V_6_3_o;
reg kernel_data_V_6_3_o_ap_vld;
reg kernel_data_V_6_0_ap_vld;
reg[15:0] kernel_data_V_6_4_o;
reg kernel_data_V_6_4_o_ap_vld;
reg kernel_data_V_6_1_ap_vld;
reg[15:0] kernel_data_V_6_5_o;
reg kernel_data_V_6_5_o_ap_vld;
reg kernel_data_V_6_2_ap_vld;
reg[15:0] kernel_data_V_6_12_o;
reg kernel_data_V_6_12_o_ap_vld;
reg kernel_data_V_6_9_ap_vld;
reg[15:0] kernel_data_V_6_13_o;
reg kernel_data_V_6_13_o_ap_vld;
reg kernel_data_V_6_10_ap_vld;
reg[15:0] kernel_data_V_6_14_o;
reg kernel_data_V_6_14_o_ap_vld;
reg kernel_data_V_6_11_ap_vld;
reg[15:0] kernel_data_V_6_21_o;
reg kernel_data_V_6_21_o_ap_vld;
reg kernel_data_V_6_18_ap_vld;
reg[15:0] kernel_data_V_6_22_o;
reg kernel_data_V_6_22_o_ap_vld;
reg kernel_data_V_6_19_ap_vld;
reg[15:0] kernel_data_V_6_23_o;
reg kernel_data_V_6_23_o_ap_vld;
reg kernel_data_V_6_20_ap_vld;
reg[15:0] kernel_data_V_6_6_o;
reg kernel_data_V_6_6_o_ap_vld;
reg[15:0] kernel_data_V_6_7_o;
reg kernel_data_V_6_7_o_ap_vld;
reg[15:0] kernel_data_V_6_8_o;
reg kernel_data_V_6_8_o_ap_vld;
reg[15:0] kernel_data_V_6_15_o;
reg kernel_data_V_6_15_o_ap_vld;
reg[15:0] kernel_data_V_6_16_o;
reg kernel_data_V_6_16_o_ap_vld;
reg[15:0] kernel_data_V_6_17_o;
reg kernel_data_V_6_17_o_ap_vld;
reg[15:0] kernel_data_V_6_24_o;
reg kernel_data_V_6_24_o_ap_vld;
reg[15:0] kernel_data_V_6_25_o;
reg kernel_data_V_6_25_o_ap_vld;
reg[15:0] kernel_data_V_6_26_o;
reg kernel_data_V_6_26_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    line_buffer_Array_6_0_0_ce0;
reg    line_buffer_Array_6_0_0_we0;
wire   [15:0] line_buffer_Array_6_0_0_q0;
reg    line_buffer_Array_6_1_0_ce0;
reg    line_buffer_Array_6_1_0_we0;
wire   [15:0] line_buffer_Array_6_1_0_q0;
reg    line_buffer_Array_6_0_1_ce0;
reg    line_buffer_Array_6_0_1_we0;
wire   [15:0] line_buffer_Array_6_0_1_q0;
reg    line_buffer_Array_6_1_1_ce0;
reg    line_buffer_Array_6_1_1_we0;
wire   [15:0] line_buffer_Array_6_1_1_q0;
reg    line_buffer_Array_6_0_2_ce0;
reg    line_buffer_Array_6_0_2_we0;
wire   [15:0] line_buffer_Array_6_0_2_q0;
reg    line_buffer_Array_6_1_2_ce0;
reg    line_buffer_Array_6_1_2_we0;
wire   [15:0] line_buffer_Array_6_1_2_q0;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_3u_config2_s_line_buffer_Array_6_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_6_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_6_0_0_ce0),
    .we0(line_buffer_Array_6_0_0_we0),
    .d0(p_read),
    .q0(line_buffer_Array_6_0_0_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_3u_config2_s_line_buffer_Array_6_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_6_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_6_1_0_ce0),
    .we0(line_buffer_Array_6_1_0_we0),
    .d0(line_buffer_Array_6_0_0_q0),
    .q0(line_buffer_Array_6_1_0_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_3u_config2_s_line_buffer_Array_6_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_6_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_6_0_1_ce0),
    .we0(line_buffer_Array_6_0_1_we0),
    .d0(p_read1),
    .q0(line_buffer_Array_6_0_1_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_3u_config2_s_line_buffer_Array_6_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_6_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_6_1_1_ce0),
    .we0(line_buffer_Array_6_1_1_we0),
    .d0(line_buffer_Array_6_0_1_q0),
    .q0(line_buffer_Array_6_1_1_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_3u_config2_s_line_buffer_Array_6_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_6_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_6_0_2_ce0),
    .we0(line_buffer_Array_6_0_2_we0),
    .d0(p_read2),
    .q0(line_buffer_Array_6_0_2_q0)
);

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_3u_config2_s_line_buffer_Array_6_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
line_buffer_Array_6_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd63),
    .ce0(line_buffer_Array_6_1_2_ce0),
    .we0(line_buffer_Array_6_1_2_we0),
    .d0(line_buffer_Array_6_0_2_q0),
    .q0(line_buffer_Array_6_1_2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_0_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_10_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_11_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_12_o = kernel_data_V_6_15_i;
    end else begin
        kernel_data_V_6_12_o = kernel_data_V_6_12_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_12_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_12_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_13_o = kernel_data_V_6_16_i;
    end else begin
        kernel_data_V_6_13_o = kernel_data_V_6_13_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_13_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_13_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_14_o = kernel_data_V_6_17_i;
    end else begin
        kernel_data_V_6_14_o = kernel_data_V_6_14_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_14_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_14_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_15_o = line_buffer_Array_6_0_0_q0;
    end else begin
        kernel_data_V_6_15_o = kernel_data_V_6_15_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_15_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_15_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_16_o = line_buffer_Array_6_0_1_q0;
    end else begin
        kernel_data_V_6_16_o = kernel_data_V_6_16_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_16_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_16_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_17_o = line_buffer_Array_6_0_2_q0;
    end else begin
        kernel_data_V_6_17_o = kernel_data_V_6_17_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_17_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_17_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_18_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_18_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_19_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_19_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_1_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_20_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_20_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_21_o = kernel_data_V_6_24_i;
    end else begin
        kernel_data_V_6_21_o = kernel_data_V_6_21_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_21_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_21_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_22_o = kernel_data_V_6_25_i;
    end else begin
        kernel_data_V_6_22_o = kernel_data_V_6_22_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_22_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_22_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_23_o = kernel_data_V_6_26_i;
    end else begin
        kernel_data_V_6_23_o = kernel_data_V_6_23_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_23_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_23_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_24_o = p_read;
    end else begin
        kernel_data_V_6_24_o = kernel_data_V_6_24_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_24_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_24_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_25_o = p_read1;
    end else begin
        kernel_data_V_6_25_o = kernel_data_V_6_25_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_25_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_25_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_26_o = p_read2;
    end else begin
        kernel_data_V_6_26_o = kernel_data_V_6_26_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_26_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_26_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_2_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_3_o = kernel_data_V_6_6_i;
    end else begin
        kernel_data_V_6_3_o = kernel_data_V_6_3_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_3_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_4_o = kernel_data_V_6_7_i;
    end else begin
        kernel_data_V_6_4_o = kernel_data_V_6_4_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_4_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_5_o = kernel_data_V_6_8_i;
    end else begin
        kernel_data_V_6_5_o = kernel_data_V_6_5_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_5_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_6_o = line_buffer_Array_6_1_0_q0;
    end else begin
        kernel_data_V_6_6_o = kernel_data_V_6_6_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_6_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_7_o = line_buffer_Array_6_1_1_q0;
    end else begin
        kernel_data_V_6_7_o = kernel_data_V_6_7_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_7_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        kernel_data_V_6_8_o = line_buffer_Array_6_1_2_q0;
    end else begin
        kernel_data_V_6_8_o = kernel_data_V_6_8_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_8_o_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_8_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        kernel_data_V_6_9_ap_vld = 1'b1;
    end else begin
        kernel_data_V_6_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_6_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_6_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_6_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_6_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_6_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_6_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_1_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_6_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_1_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_6_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_1_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_6_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_1_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_6_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_1_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_6_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        line_buffer_Array_6_1_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_6_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign kernel_data_V_6_0 = kernel_data_V_6_3_i;

assign kernel_data_V_6_1 = kernel_data_V_6_4_i;

assign kernel_data_V_6_10 = kernel_data_V_6_13_i;

assign kernel_data_V_6_11 = kernel_data_V_6_14_i;

assign kernel_data_V_6_18 = kernel_data_V_6_21_i;

assign kernel_data_V_6_19 = kernel_data_V_6_22_i;

assign kernel_data_V_6_2 = kernel_data_V_6_5_i;

assign kernel_data_V_6_20 = kernel_data_V_6_23_i;

assign kernel_data_V_6_9 = kernel_data_V_6_12_i;

endmodule //myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_3u_config2_s
